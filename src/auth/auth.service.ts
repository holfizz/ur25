import {
	BadRequestException,
	ForbiddenException,
	Injectable,
	NotFoundException,
	UnauthorizedException,
} from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { User } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { PrismaService } from '../prisma.service'
import { UserService } from '../user/user.service'
import { AuthDto } from './dto/auth.dto'

@Injectable()
export class AuthService {
	private loginStates: Map<number, { email?: string; password?: string }> =
		new Map()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
		private userService: UserService,
	) {}

	async register(dto: AuthDto & { telegramId?: string }) {
		const existUser = await this.prisma.user.findUnique({
			where: { email: dto.email },
		})

		if (existUser) {
			throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		}

		const user = await this.prisma.user.create({
			data: {
				email: dto.email,
				name: dto.name,
				phone: dto.phone,
				address: dto.address,
				password: await bcrypt.hash(dto.password, 5),
				role: dto.role || 'BUYER',
				isVerified: false,
				telegramId: dto.telegramId,
			},
		})

		return {
			user: this.returnUserFields(user),
			message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
		}
	}

	private async issueTokens(userId: string) {
		const data = { id: userId }

		const accessToken = await this.jwtService.signAsync(data, {
			expiresIn: '1h',
		})

		const refreshToken = await this.jwtService.signAsync(data, {
			expiresIn: '7d',
		})
		return { accessToken, refreshToken }
	}

	private returnUserFields(user: User) {
		return {
			id: user.id,
			email: user.email,
			name: user.name,
			role: user.role,
			isAdmin: user.isAdmin,
		}
	}

	async login(loginDto: { email: string; password: string }) {
		const user = await this.prisma.user.findUnique({
			where: { email: loginDto.email },
		})

		if (!user) {
			throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}

		if (!user.isVerified) {
			throw new ForbiddenException(
				'–ê–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
			)
		}

		const isPasswordValid = await bcrypt.compare(
			loginDto.password,
			user.password,
		)
		if (!isPasswordValid) {
			throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
		const tokens = await this.issueTokens(user.id)

		return {
			user: this.returnUserFields(user),
			...tokens, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º accessToken –∏ refreshToken
		}
	}

	async getNewTokens(refreshToken: string) {
		const result = await this.jwtService.verifyAsync(refreshToken)
		if (!result) throw new UnauthorizedException('Invalid refresh token')

		const user = await this.prisma.user.findUnique({
			where: { id: result.id },
		})
		const tokens = await this.userService.byId(result.id, {
			isAdmin: true,
		})
		return {
			user: this.returnUserFields(user),
			...tokens,
		}
	}

	private async validateUser(dto: AuthDto) {
		const user = await this.prisma.user.findUnique({
			where: {
				email: dto.email,
			},
		})

		if (!user) throw new NotFoundException('User not found')

		const isValidPassword = await bcrypt.compare(dto.password, user.password)
		if (!isValidPassword) throw new UnauthorizedException('Invalid password')

		if (!user.isVerified) {
			throw new ForbiddenException('Account is not verified')
		}

		return user
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞
	getLoginState(userId: number) {
		return this.loginStates.get(userId)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞
	async initLoginState(userId: number) {
		console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
		this.loginStates.set(userId, {})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ handleLoginInput
	async handleLoginInput(ctx: Context, text: string) {
		console.log('–í—Ö–æ–¥ –≤ handleLoginInput:', text)
		const userId = ctx.from.id
		const loginState = this.loginStates.get(userId)
		console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞:', loginState)

		if (!loginState) {
			await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –≤—Ö–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
			return
		}

		if (!loginState.email) {
			if (!this.validateEmail(text)) {
				await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
				return
			}
			loginState.email = text
			this.loginStates.set(userId, loginState)
			console.log('Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', loginState)
			await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
			return
		}

		if (!loginState.password) {
			try {
				const result = await this.login({
					email: loginState.email,
					password: text,
				})

				if (result.accessToken) {
					await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
					// –û–±–Ω–æ–≤–ª—è–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await this.prisma.user.update({
						where: { email: loginState.email },
						data: { telegramId: userId.toString() },
					})
				} else {
					await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
				}
			} catch (error) {
				await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
			} finally {
				this.loginStates.delete(userId)
			}
		}
	}

	private validateEmail(email: string): boolean {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}
}
