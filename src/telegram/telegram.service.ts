import { OfferService } from '@/offer/offer.service'
import { Injectable } from '@nestjs/common'
import { Context, Markup, Telegraf } from 'telegraf'
import { PrismaService } from '../prisma.service'

@Injectable()
export class TelegramService {
	private bot: Telegraf

	constructor(
		private readonly prisma: PrismaService,
		private readonly offerService: OfferService,
	) {
		this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)
	}

	public async handleStart(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply(
				'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
								{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
							],
						],
					},
				},
			)
			return
		}

		await this.handleMenu(ctx)
	}

	async handleMenu(ctx: Context) {
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' },
						{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_ads' },
					],
					[
						{ text: 'üìÑ –ó–∞—è–≤–∫–∏', callback_data: 'requests' },
						{ text: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è', callback_data: 'messages' },
					],
					[
						{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
						{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data: 'help' },
					],
					[{ text: 'üö™ –í—ã–π—Ç–∏', callback_data: 'logout' }],
				],
			},
		})
	}

	async showProfile(ctx: Context) {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: ctx.from.id.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		await ctx.reply(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}`)
	}

	async handleTextInput(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}
	}

	async sendVerificationNotification(telegramId: string) {
		const message = await this.bot.telegram.sendMessage(
			telegramId,
			'‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîë –í–æ–π—Ç–∏',
								callback_data: 'login',
							},
						],
					],
				},
			},
		)

		return message
	}

	async handleMyAds(ctx: Context) {
		await this.showMyOffers(ctx)
	}

	async showMyOffers(ctx: Context) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
				include: {
					offers: {
						include: {
							images: true,
							matches: true,
						},
						orderBy: {
							createdAt: 'desc',
						},
					},
				},
			})

			if (!user.offers.length) {
				await ctx.reply(
					'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
					Markup.inlineKeyboard([
						[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
					]),
				)
				return
			}

			const offersList = user.offers
				.map(
					(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
				)
				.join('\n\n')

			await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([
					[
						Markup.button.callback(
							'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
							'create_offer',
						),
					],
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
				]),
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')
		}
	}
}
