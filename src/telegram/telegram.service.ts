import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { Role } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { CallbackQuery } from 'telegraf/typings/core/types/typegram'
import { PrismaService } from '../prisma.service'
import { TelegramServiceClient } from './telegram.service.client'

interface RegistrationState {
	email: string | null
	password: string | null
	confirmPassword: string | null
	name: string | null
	phone: string | null
	address: string | null
	role?: Role | null
}

@Injectable()
export class TelegramService {
	private registrationStates: Map<number, any> = new Map() // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	private editStates: Map<number, { field: string }> = new Map() // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

	constructor(
		private readonly prisma: PrismaService,
		private readonly configService: ConfigService,
		private readonly telegramClient: TelegramServiceClient,
	) {}

	public async handleStart(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply(
				'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! \n\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
								{ text: 'üîë –í—Ö–æ–¥', callback_data: 'login' },
							],
						],
					},
				},
			)
		} else {
			await ctx.reply(
				`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
					`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}\n` +
					`üìß Email: ${user.email}\n` +
					`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
					`üìç –ê–¥—Ä–µ—Å: ${user.address}\n` +
					`üì¶ –†–æ–ª—å: ${this.getRoleInRussian(user.role)}\n`,
			)
		}
	}

	async handleMenu(ctx: Context) {
		await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' },
						{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_ads' },
					],
					[
						{ text: 'üì® –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏', callback_data: 'incoming_requests' },
						{ text: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è', callback_data: 'messages' },
					],
					[
						{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
						{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data: 'help' },
					],
					[{ text: 'üì§ –í—ã–π—Ç–∏', callback_data: 'logout' }],
				],
			},
		})
	}

	async showProfile(ctx: Context) {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: ctx.from.id.toString() },
		})

		if (!user || !user.isVerified) {
			await this.handleLogout(ctx, ctx.from.id)
			return
		}

		if (user) {
			await ctx.reply(
				'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n' +
					`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}\n` +
					`üìß Email: ${user.email}\n` +
					`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
					`üìç –ê–¥—Ä–µ—Å: ${user.address}\n` +
					`üì¶ –†–æ–ª—å: ${this.getRoleInRussian(user.role)}\n` +
					`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${
						user.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'
					}\n\n` +
					'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: 'edit_name' },
								{ text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data: 'edit_phone' },
							],
							[
								{ text: 'üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data: 'edit_address' },
								{ text: 'üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'edit_password' },
							],
							[
								{
									text: user.notificationsEnabled
										? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
										: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
									callback_data: user.notificationsEnabled
										? 'disable_notifications'
										: 'enable_notifications',
								},
							],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)
		}
	}

	async handleCreateAd(ctx: Context) {
		await ctx.reply(
			'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ö–†–°\n\n' +
				'‚ùóÔ∏è –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 10 —à—Ç—É–∫)\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –° —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤',
			{
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]],
				},
			},
		)
	}

	async toggleNotifications(ctx: Context, enable: boolean) {
		const userId = ctx.from.id
		await this.prisma.user.update({
			where: { telegramId: userId.toString() },
			data: { notificationsEnabled: enable },
		})

		await ctx.reply(
			`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${
				enable ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
			}!\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å...`,
		)
		await this.showProfile(ctx)
	}

	private getRoleInRussian(role: Role): string {
		switch (role) {
			case 'BUYER':
				return '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'
			case 'SUPPLIER':
				return '–ø–æ—Å—Ç–∞–≤—â–∏–∫'
			case 'CARRIER':
				return '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫'
			default:
				return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
		}
	}

	public async handleLogout(ctx: Context, userId: number) {
		await this.prisma.user.update({
			where: { telegramId: userId.toString() },
			data: { telegramId: null },
		})

		await ctx.reply(
			'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
				'–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
		)
	}

	public async handleRegistrationFlow(ctx: Context, text: string) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (user && user.isVerified) {
			await ctx.reply('‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.')
			return
		}

		const state = this.registrationStates.get(userId) || {
			email: null,
			password: null,
			confirmPassword: null,
			name: null,
			phone: null,
			address: null,
		}

		// –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
		if (!state.email) {
			const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
			if (!emailRegex.test(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email!\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return
			}
			state.email = text
			await ctx.reply(
				'üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:\n\nüìù –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
			)
		} else if (!state.password) {
			if (
				text.length < 6 ||
				!/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(text)
			) {
				await ctx.reply(
					'‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
				)
				return
			}
			state.password = text
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
		} else if (!state.confirmPassword) {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
				return
			}
			state.confirmPassword = text
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
		} else if (!state.name) {
			state.name = text
			await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\nüìù –ü—Ä–∏–º–µ—Ä: +7XXXXXXXXXX')
		} else if (!state.phone) {
			const phoneRegex = /^\+7\d{10}$/
			if (!phoneRegex.test(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX',
				)
				return
			}
			state.phone = text
			await ctx.reply(
				'üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
			)
		} else if (!state.address) {
			state.address = text

			// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await this.prisma.user.create({
				data: {
					email: state.email,
					password: await bcrypt.hash(state.password, 10),
					name: state.name,
					phone: state.phone,
					address: state.address,
					role: 'BUYER',
					isVerified: false,
					telegramId: userId.toString(),
				},
			})

			await ctx.reply(
				'‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			this.registrationStates.delete(userId) // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
		this.registrationStates.set(userId, state)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
	public async handleRoleSelection(ctx: Context) {
		const userId = ctx.from.id

		const query = ctx.callbackQuery as CallbackQuery.DataQuery
		if (!query.data) {
			await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
			return
		}

		const role = query.data.split('_')[1]

		const state = this.registrationStates.get(userId) || {
			role: null,
			email: null,
			password: null,
			name: null,
			phone: null,
			address: null,
		}
		state.role = role // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

		this.registrationStates.set(userId, state)

		await ctx.reply(
			'‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
		)
		await this.handleRegistrationFlow(ctx, '') // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	}

	public async handleEdit(ctx: Context, field: string) {
		const userId = ctx.from.id

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		this.editStates.set(userId, { field })

		let promptMessage = ''
		switch (field) {
			case 'name':
				promptMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:'
				break
			case 'phone':
				promptMessage = 'üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
				break
			case 'address':
				promptMessage = 'üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:'
				break
			case 'password':
				promptMessage = 'üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:'
				break
			default:
				promptMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:'
		}

		await ctx.reply(promptMessage)
	}

	public async handleTextInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const editState = this.editStates.get(userId)

		if (!editState) return

		try {
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			const updateData: {
				phone?: string
				password?: string
				name?: string
				address?: string
			} = {}
			let isValid = true
			let errorMessage = ''

			switch (editState.field) {
				case 'phone':
					if (!this.validatePhone(text)) {
						isValid = false
						errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79991234567'
					} else {
						updateData.phone = text
					}
					break
				case 'password':
					if (!this.validatePassword(text)) {
						isValid = false
						errorMessage =
							'‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.'
					} else {
						updateData.password = await bcrypt.hash(text, 10) // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
					}
					break
				case 'name':
					updateData.name = text
					break
				case 'address':
					updateData.address = text
					break
			}

			if (isValid) {
				await this.prisma.user.update({
					where: { id: user.id },
					data: updateData,
				})

				await ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
				await this.showProfile(ctx)
			} else {
				await ctx.reply(errorMessage)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
		}
	}

	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/ // –ü—Ä–∏–º–µ—Ä: +79991234567
		return phoneRegex.test(phone)
	}

	private validatePassword(password: string): boolean {
		const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/ // –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
		return passwordRegex.test(password)
	}
}
