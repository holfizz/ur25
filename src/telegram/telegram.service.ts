import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { Role } from '@prisma/client'
import { Context } from 'telegraf'
import { PrismaService } from '../prisma.service'
import { TelegramServiceClient } from './telegram.service.client'

@Injectable()
export class TelegramService {
	private registrationStates: Map<number, any> = new Map()

	constructor(
		private readonly prisma: PrismaService,
		private readonly configService: ConfigService,
		private readonly telegramClient: TelegramServiceClient,
	) {}

	async handleStart(telegramId: string, chatId: string) {
		await this.telegramClient.sendMessageWithKeyboard(
			chatId,
			'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				inline_keyboard: [
					[
						{ text: 'üîë –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'login' },
						{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
					],
				],
			},
		)
	}

	async handleRegister(ctx: Context) {
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'register_BUYER' },
						{ text: 'üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'register_SUPPLIER' },
					],
					[{ text: 'üöõ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'register_CARRIER' }],
				],
			},
		})
	}

	async startRegistration(userId: number, role: Role) {
		this.registrationStates.set(userId, { role })
	}

	async handleRegistrationFlow(ctx: Context, text: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) return

		if (!state.email) {
			if (!this.validateEmail(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return
			}
			state.email = text
			this.registrationStates.set(userId, state)
			await ctx.reply(
				'üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n' +
					'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n' +
					'- –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n' +
					'- –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n' +
					'- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
			)
			return
		}

		if (!state.password) {
			if (!this.validatePassword(text)) {
				await ctx.reply(
					'‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n\n' +
						'- –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n' +
						'- –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n' +
						'- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
				)
				return
			}
			state.password = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
			return
		}

		if (!state.confirmPassword) {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
				return
			}
			state.confirmPassword = text
			this.registrationStates.set(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
			if (state.role === 'BUYER') {
				await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ñ–µ—Ä–º—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–∫–æ—Ç–∞:')
			} else if (state.role === 'SUPPLIER') {
				await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
			} else if (state.role === 'CARRIER') {
				await ctx.reply('üöõ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:')
			}
			return
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await this.saveUserData(userId, state)
		await ctx.reply(
			'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.',
		)
		await this.showProfile(ctx, userId)
	}

	private async saveUserData(userId: number, state: any) {
		await this.prisma.user.create({
			data: {
				email: state.email,
				password: state.password, // –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
				name: state.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
				phone: state.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
				address: state.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
				role: state.role,
				telegramId: userId.toString(),
			},
		})
	}

	public async showProfile(ctx: Context, userId: number) {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (user) {
			await ctx.reply(
				`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ${this.getRoleInRussian(
					user.role,
				)}\n\n` +
					`–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
					`üìß Email: ${user.email}\n` +
					`üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
					`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
					`üìç –ê–¥—Ä–µ—Å: ${user.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
					`–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
					`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
								{ text: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å', callback_data: 'help' },
							],
							[{ text: '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', callback_data: 'logout' }],
						],
					},
				},
			)
		}
	}

	private validateEmail(email: string): boolean {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	private validatePassword(password: string): boolean {
		const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d\W]{6,}$/
		return passwordRegex.test(password)
	}

	getRegistrationState(userId: number) {
		return this.registrationStates.get(userId)
	}

	private getRoleInRussian(role: Role): string {
		switch (role) {
			case 'BUYER':
				return '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'
			case 'SUPPLIER':
				return '–ø–æ—Å—Ç–∞–≤—â–∏–∫'
			case 'CARRIER':
				return '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫'
			default:
				return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
		}
	}

	async handleLogout(ctx: Context, userId: number) {
		await this.prisma.user.update({
			where: { telegramId: userId.toString() },
			data: { telegramId: null },
		})

		await ctx.reply(
			'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
				'–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
		)
	}
}
