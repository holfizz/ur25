import { Injectable } from '@nestjs/common'
import { Context, Markup, Telegraf } from 'telegraf'
import { Message } from 'telegraf/typings/core/types/typegram'
import { PrismaService } from '../prisma.service'
import { TelegramAuthService } from './services/auth.service'
import { TelegramMessageService } from './services/message.service'
import { TelegramOfferService } from './services/offer.service'

@Injectable()
export class TelegramService {
	private bot: Telegraf

	constructor(
		private readonly prisma: PrismaService,
		private readonly offerService: TelegramOfferService,
		private readonly authService: TelegramAuthService,
		private readonly messageService: TelegramMessageService,
	) {
		this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
		this.bot.on('video', async ctx => {
			await this.offerService.handleVideo(ctx)
		})
	}

	public async handleStart(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
								{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
							],
						],
					},
				},
			)
			return
		}

		await this.handleMenu(ctx)
	}

	async handleMenu(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
								{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							],
						],
					},
				},
			)
			return
		}

		if (!user.isVerified) {
			await ctx.reply(
				'‚è≥ –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'start' }],
						],
					},
				},
			)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		const unreadCount = await this.messageService.getUnreadMessagesCount(
			user.id,
		)
		const messagesText =
			unreadCount > 0 ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏—è (${unreadCount})` : 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'

		// –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		const buttons = [
			[{ text: 'üìã –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'browse_offers' }],
			[{ text: messagesText, callback_data: 'messages' }],
		]

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
		if (user.role === 'SUPPLIER') {
			buttons.unshift([
				{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' },
				{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_ads' },
			])
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
		if (user.role === 'BUYER') {
			buttons.unshift([
				{ text: 'üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', callback_data: 'create_request' },
				{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' },
			])
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
		buttons.push([
			{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
			{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
		])

		buttons.push([{ text: 'üö™ –í—ã–π—Ç–∏', callback_data: 'logout' }])

		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
			reply_markup: {
				inline_keyboard: buttons,
			},
		})
	}

	async showProfile(ctx: Context) {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: ctx.from.id.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		await ctx.reply(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}`)
	}

	async handleTextInput(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' },
						{ text: 'üì± –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
					],
				],
			},
		})
	}

	async sendVerificationNotification(
		telegramId: string,
	): Promise<Message.TextMessage> {
		const message = await this.bot.telegram.sendMessage(
			telegramId,
			'‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîë –í–æ–π—Ç–∏',
								callback_data: 'login',
							},
						],
					],
				},
			},
		)

		return message
	}

	async handleMyAds(ctx: Context) {
		await this.showMyOffers(ctx)
	}

	async showMyOffers(ctx: Context) {
		try {
			const userId = ctx.from.id
			const userWithOffers = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
				include: {
					offers: {
						include: {
							images: true,
							matches: true,
						},
					},
				},
			})

			if (!userWithOffers.offers.length) {
				await ctx.reply(
					'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
					Markup.inlineKeyboard([
						[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
					]),
				)
				return
			}

			const offersList = userWithOffers.offers
				.map(
					(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
				)
				.join('\n\n')

			await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([
					[
						Markup.button.callback(
							'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
							'create_offer',
						),
					],
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
				]),
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')
		}
	}

	async handleRegistration(ctx: Context) {
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	}

	async handleCallbackQuery(ctx: Context) {
		//@ts-ignore
		const callbackData = ctx.callbackQuery.data
		await ctx.answerCbQuery() // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

		if (callbackData.startsWith('role_')) {
			const role = callbackData.split('_')[1]
			await this.authService.handleRoleSelection(ctx, role)
		} else if (callbackData.startsWith('type_')) {
			const userType = callbackData.split('_')[1]
			await this.authService.handleSupplierTypeSelection(ctx, userType)
		} else if (callbackData === 'skip_mercury') {
			await this.authService.handleSkipMercury(ctx)
		}

		// –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
	}

	async handleLogin(ctx: Context) {
		const userId = ctx.from.id
		await this.authService.initLoginState(userId)
		await ctx.reply(
			'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –≤—Ö–æ–¥–∞:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
		)
	}

	async handleUserType(ctx: Context) {
		const callbackQuery = ctx.callbackQuery as any
		const userType = callbackQuery.data.split('_')[2]
		await this.authService.handleUserTypeSelection(ctx, userType)
	}

	async sendMessage(chatId: string, message: string) {
		try {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é bot.telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
			await this.bot.telegram.sendMessage(chatId, message)
		} catch (error) {
			console.error('Error sending telegram message:', error)
		}
	}
}
