// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
import { Injectable } from '@nestjs/common'
import { Match, Purpose, Request, User } from '@prisma/client'
import { Markup } from 'telegraf'
import { PrismaService } from '../../prisma.service'

interface RequestState {
	purpose?: Purpose
	breed?: string
	quantity?: number
	weight?: number
	age?: number
	deadline?: Date
	maxPrice?: number
	location?: string
}

interface MatchWithRelations extends Match {
	request: Request & {
		user: User
	}
}

@Injectable()
export class TelegramRequestService {
	private requestStates: Map<number, RequestState> = new Map()

	constructor(private prisma: PrismaService) {}

	async handleRequest(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
			return
		}

		if (user.role !== 'BUYER') {
			await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã')
			return
		}

		await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏ –ö–†–°:', {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[
					Markup.button.callback('ü•© –ú—è—Å–æ', 'purpose_MEAT'),
					Markup.button.callback('üêÑ –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
				],
				[
					Markup.button.callback('ü•õ –ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
					Markup.button.callback('‚öñÔ∏è –û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
				],
				[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'menu')],
			]),
		})
	}

	async handlePurposeCallback(ctx) {
		const userId = ctx.from.id
		const purpose = ctx.callbackQuery.data.split('_')[1] as Purpose

		this.requestStates.set(userId, { purpose })
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
	}

	async handleRequestState(
		ctx,
		userId: number,
		text: string,
	): Promise<boolean> {
		const requestState = this.requestStates.get(userId)
		if (!requestState) return false

		if (!requestState.breed) {
			requestState.breed = text
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
			return true
		}

		if (!requestState.quantity) {
			const quantity = parseInt(text)
			if (isNaN(quantity) || quantity <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
				return true
			}
			requestState.quantity = quantity
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –ö–†–° –≤ –∫–≥:')
			return true
		}

		if (!requestState.weight) {
			const weight = parseFloat(text)
			if (isNaN(weight) || weight <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å')
				return true
			}
			requestState.weight = weight
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ö–†–° –≤ –º–µ—Å—è—Ü–∞—Ö:')
			return true
		}

		if (!requestState.age) {
			const age = parseInt(text)
			if (isNaN(age) || age <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
				return true
			}
			requestState.age = age
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏:', {
				reply_markup: Markup.inlineKeyboard([
					[
						Markup.button.callback('–ú—è—Å–æ', 'purpose_MEAT'),
						Markup.button.callback('–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
					],
					[
						Markup.button.callback('–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
						Markup.button.callback('–û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
					],
				]),
			})
			return true
		}

		if (!requestState.deadline) {
			try {
				const date = new Date(text)
				const today = new Date()
				today.setHours(0, 0, 0, 0)

				if (isNaN(date.getTime())) throw new Error('Invalid date')
				if (date < today) throw new Error('Past date')

				// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤
				const maxDate = new Date()
				maxDate.setMonth(maxDate.getMonth() + 6)
				if (date > maxDate) throw new Error('Too far')

				requestState.deadline = date
				this.requestStates.set(userId, requestState)
				await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):')
				return true
			} catch (error) {
				let errorMessage = '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n'

				if (error.message === 'Past date') {
					errorMessage = '‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º\n\n'
				} else if (error.message === 'Too far') {
					errorMessage = '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤\n\n'
				}

				await ctx.reply(
					`${errorMessage}` +
						'üìÖ –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –∞–∫—Ç—É–∞–ª–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å?\n\n' +
						'‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î\n' +
						'‚úÖ –ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-25\n\n' +
						'‚ùóÔ∏è –≠—Ç–æ –¥–∞—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫—É–ø–∏—Ç—å –ö–†–°.\n' +
						'‚ùóÔ∏è –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã.',
					{
						reply_markup: Markup.inlineKeyboard([
							[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_request')],
						]),
					},
				)
				return true
			}
		}

		if (!requestState.maxPrice) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É')
				return true
			}
			requestState.maxPrice = price
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')
			return true
		}

		if (!requestState.location) {
			requestState.location = text

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			const request = await this.prisma.request.create({
				data: {
					breed: requestState.breed,
					quantity: requestState.quantity,
					weight: requestState.weight,
					age: requestState.age,
					deadline: requestState.deadline,
					purpose: requestState.purpose,
					maxPrice: requestState.maxPrice,
					location: requestState.location,
					userId: user.id,
				},
			})

			// –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
			const matches = await this.findMatches(request)

			this.requestStates.delete(userId)

			await ctx.reply(
				`‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üêÆ –ü–æ—Ä–æ–¥–∞: ${request.breed}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìÖ –°—Ä–æ–∫: ${request.deadline.toLocaleDateString()}
üéØ –¶–µ–ª—å: ${this.getPurposeText(request.purpose)}
üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${request.maxPrice} —Ä—É–±/–≥–æ–ª–æ–≤—É
üìç –î–æ—Å—Ç–∞–≤–∫–∞: ${request.location}

${
	matches.length > 0
		? `\n–ù–∞–π–¥–µ–Ω–æ ${matches.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /matches –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`
		: '\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏.'
}`,
				{ parse_mode: 'HTML' },
			)
			return true
		}

		return false
	}

	private async findMatches(request) {
		// –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
		const matches = await this.prisma.offer.findMany({
			where: {
				breed: request.breed,
				quantity: { gte: request.quantity },
				weight: {
					gte: request.weight * 0.9,
					lte: request.weight * 1.1,
				},
				price: { lte: request.maxPrice },
				status: 'ACTIVE',
			},
		})

		// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
		for (const offer of matches) {
			await this.prisma.match.create({
				data: {
					request: {
						connect: {
							id: request.id,
						},
					},
					offer: {
						connect: {
							id: offer.id,
						},
					},
				},
			})
		}

		return matches
	}

	private getPurposeText(purpose: Purpose): string {
		const texts = {
			MEAT: '–ú—è—Å–æ',
			BREEDING: '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
			DAIRY: '–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
			FATTENING: '–û—Ç–∫–æ—Ä–º',
		}
		return texts[purpose]
	}

	async handleMyRequests(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						matches: {
							include: {
								request: {
									include: {
										user: true,
									},
								},
							},
						},
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', 'create_request')],
				]),
			)
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		const buttons = user.offers.map((req, index) => [
			Markup.button.callback(
				`${index + 1}. ${req.breed} (${req.matches.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`,
				`view_request_${req.id}`,
			),
		])

		buttons.push([
			Markup.button.callback('üîç –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'create_request'),
		])
		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(
			'üìã <b>–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}

	async handleViewRequest(ctx) {
		const requestId = parseInt(ctx.callbackQuery.data.split('_')[2])
		const request = await this.prisma.request.findUnique({
			where: { id: requestId },
			include: {
				matches: {
					include: {
						offer: {
							include: {
								user: true,
							},
						},
					},
				},
			},
		})

		const requestDetails = `
üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:</b>

üêÆ –ü–æ—Ä–æ–¥–∞: ${request.breed}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìÖ –°—Ä–æ–∫: ${this.formatDate(request.deadline)}
üéØ –¶–µ–ª—å: ${this.getPurposeText(request.purpose)}
üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${request.maxPrice} ‚ÇΩ/–≥–æ–ª
üìç –î–æ—Å—Ç–∞–≤–∫–∞: ${request.location}

üì¨ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (${request.matches.length}):</b>`

		const buttons = []

		if (request.matches.length > 0) {
			request.matches.forEach((match, index) => {
				const offer = match.offer
				buttons.push([
					Markup.button.callback(
						`${index + 1}. ${offer.breed} - ${offer.price}‚ÇΩ (${
							offer.user.name
						})`,
						`view_offer_${offer.id}`,
					),
				])
			})
		}

		buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å–∞–º', 'my_requests')])
		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(requestDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	async handleViewOffer(ctx) {
		const offerId = ctx.callbackQuery.data.split('_')[2]
		const offer = await this.prisma.offer.findUnique({
			where: { id: offerId },
			include: {
				user: true,
				images: true,
			},
		})

		if (!offer) {
			await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
			return
		}

		const offerDetails = `
üì¶ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${offer.user.name}</b>

üêÆ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç –õ–æ–∫–∞—Ü–∏—è: ${offer.location}

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:</b>
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.user.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${offer.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: ${offer.user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

		const buttons = [
			[
				Markup.button.callback(
					'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					`chat_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'üì± –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
					`contacts_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º',
					`view_request_${ctx.match[1]}`,
				),
			],
			[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
		]

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (offer.images.length > 0) {
			for (const image of offer.images) {
				await ctx.replyWithPhoto(image.url)
			}
		}

		await ctx.reply(offerDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	private formatDate(date: Date): string {
		return new Intl.DateTimeFormat('ru-RU', {
			day: '2-digit',
			month: '2-digit',
			year: 'numeric',
		}).format(date)
	}

	async handleIncomingRequests(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						matches: {
							include: {
								request: {
									include: {
										user: true,
									},
								},
							},
						},
					},
				},
			},
		})

		const activeMatches = user.offers.flatMap(offer =>
			offer.matches.filter(match => match.status === 'PENDING'),
		)

		if (!activeMatches.length) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		const buttons = activeMatches.map((match, index) => [
			Markup.button.callback(
				`${index + 1}. ${match.request.breed} –æ—Ç ${match.request.user.name}`,
				`view_incoming_request_${match.request.id}`,
			),
		])

		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(
			'üì¨ <b>–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}
}
