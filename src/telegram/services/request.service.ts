// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
import { Injectable } from '@nestjs/common'
import { CattleType, Match, User } from '@prisma/client'
import { Action, Ctx } from 'nestjs-telegraf'
import { Context, Markup } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'
import { TelegramOfferService } from './offer.service'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π enum Purpose, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ @prisma/client
export enum Purpose {
	MEAT = 'MEAT',
	BREEDING = 'BREEDING',
	DAIRY = 'DAIRY',
	FATTENING = 'FATTENING',
}

interface RequestState {
	purpose?: Purpose
	breed?: string // –ü–æ—Ä–æ–¥–∞
	quantity?: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤
	weight?: number // –í–µ—Å
	age?: number // –í–æ–∑—Ä–∞—Å—Ç
	deadline?: string // –°—Ä–æ–∫–∏ (–∏–∑–º–µ–Ω—è–µ–º —Ç–∏–ø —Å Date –Ω–∞ string)
	maxPrice?: number // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
	location?: string // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã
	region?: string // –†–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∫–∏
	title?: string
	price?: number
	inputType?: string
	cattleType?: CattleType
	description?: string
	ageGroup?: string
	userId?: string
	isExport?: boolean // –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
	isBreeding?: boolean // –î–ª—è –ø–ª–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
	deliveryDate?: string // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
}

interface MatchWithRelations extends Match {
	request: Request & {
		user: User
	}
}

@Injectable()
export class TelegramRequestService {
	private requestStates: Map<number, RequestState> = new Map()

	constructor(
		private prisma: PrismaService,
		private telegramClient: TelegramClient,
		private offerService: TelegramOfferService,
	) {}

	// –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –∫–ª–∞—Å—Å–∞ –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
	private translateCattleType(type: string): string {
		const translations = {
			COWS: '–ö–æ—Ä–æ–≤—ã',
			BULLS: '–ë—ã–∫–∏',
			HEIFERS: '–¢–µ–ª–∫–∏',
			BREEDING_HEIFERS: '–ù–µ—Ç–µ–ª–∏',
			CALVES: '–¢–µ–ª—è—Ç–∞',
			BULL_CALVES: '–ë—ã—á–∫–∏',
		}
		return translations[type] || type
	}

	private translatePurpose(purpose: string): string {
		const translations = {
			MEAT: '–Ω–∞ –º—è—Å–æ',
			BREEDING: '–Ω–∞ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
			DAIRY: '–Ω–∞ –º–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
			FATTENING: '–Ω–∞ –æ—Ç–∫–æ—Ä–º',
		}
		return translations[purpose] || purpose
	}

	async handleRequest(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
			return
		}

		if (user.role !== 'BUYER') {
			await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã')
			return
		}

		await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏ –ö–†–°:', {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[
					Markup.button.callback('ü•© –ú—è—Å–æ', 'purpose_MEAT'),
					Markup.button.callback('üêÑ –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
				],
				[
					Markup.button.callback('ü•õ –ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
					Markup.button.callback('‚öñÔ∏è –û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
				],
				[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'menu')],
			]),
		})
	}

	async handlePurposeCallback(ctx) {
		const userId = ctx.from.id
		const purpose = ctx.callbackQuery.data.split('_')[1] as Purpose

		this.requestStates.set(userId, { purpose })
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
	}

	async handleRequestState(
		ctx,
		userId: number,
		text: string,
	): Promise<boolean> {
		const requestState = this.requestStates.get(userId)
		if (!requestState) return false

		if (!requestState.title) {
			requestState.title = text
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
			return true
		}

		if (!requestState.quantity) {
			const quantity = parseInt(text)
			if (isNaN(quantity) || quantity <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
				return true
			}
			requestState.quantity = quantity
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –ö–†–° –≤ –∫–≥:')
			return true
		}

		if (!requestState.weight) {
			const weight = parseFloat(text)
			if (isNaN(weight) || weight <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å')
				return true
			}
			requestState.weight = weight
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ö–†–° –≤ –º–µ—Å—è—Ü–∞—Ö:')
			return true
		}

		if (!requestState.age) {
			const age = parseInt(text)
			if (isNaN(age) || age <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
				return true
			}
			requestState.age = age
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏:', {
				reply_markup: Markup.inlineKeyboard([
					[
						Markup.button.callback('–ú—è—Å–æ', 'purpose_MEAT'),
						Markup.button.callback('–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
					],
					[
						Markup.button.callback('–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
						Markup.button.callback('–û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
					],
				]),
			})
			return true
		}

		if (!requestState.deadline) {
			try {
				const date = new Date(text)
				const today = new Date()
				today.setHours(0, 0, 0, 0)

				if (isNaN(date.getTime())) throw new Error('Invalid date')
				if (date < today) throw new Error('Past date')

				// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤
				const maxDate = new Date()
				maxDate.setMonth(maxDate.getMonth() + 6)
				if (date > maxDate) throw new Error('Too far')

				requestState.deadline = date.toISOString()
				this.requestStates.set(userId, requestState)
				await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):')
				return true
			} catch (error) {
				let errorMessage = '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n'

				if (error.message === 'Past date') {
					errorMessage = '‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º\n\n'
				} else if (error.message === 'Too far') {
					errorMessage = '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤\n\n'
				}

				await ctx.reply(
					`${errorMessage}` +
						'üìÖ –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –∞–∫—Ç—É–∞–ª–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å?\n\n' +
						'‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î\n' +
						'‚úÖ –ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-25\n\n' +
						'‚ùóÔ∏è –≠—Ç–æ –¥–∞—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫—É–ø–∏—Ç—å –ö–†–°.\n' +
						'‚ùóÔ∏è –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã.',
					{
						reply_markup: Markup.inlineKeyboard([
							[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_request')],
						]),
					},
				)
				return true
			}
		}

		if (!requestState.maxPrice) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É')
				return true
			}
			requestState.maxPrice = price
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')
			return true
		}

		if (!requestState.location) {
			requestState.location = text
			this.requestStates.set(userId, requestState)

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):')
			return true
		}

		if (!requestState.price) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É')
				return true
			}
			requestState.price = price
			this.requestStates.set(userId, requestState)

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
			await this.createRequest(ctx)
			return true
		}

		return false
	}

	async findMatches(request) {
		// –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'APPROVED' as const,
				quantity: {
					gte: request.quantity,
				},
				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
			},
			include: {
				user: true,
				images: true,
			},
		})

		// –°–æ–∑–¥–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const matchPromises = offers.map(offer =>
			this.prisma.match.create({
				data: {
					request: { connect: { id: request.id } },
					offer: { connect: { id: offer.id } },
					status: 'PENDING',
				},
			}),
		)

		const matches = await Promise.all(matchPromises)
		return matches
	}

	private getPurposeText(purpose: Purpose): string {
		const texts = {
			MEAT: '–ú—è—Å–æ',
			BREEDING: '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
			DAIRY: '–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
			FATTENING: '–û—Ç–∫–æ—Ä–º',
		}
		return texts[purpose]
	}

	async handleMyRequests(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const title = user.role === 'BUYER' ? '–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã' : '–ó–∞–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'

		const requests = await this.prisma.request.findMany({
			where:
				user.role === 'SUPPLIER' ? { userId: user.id } : { status: 'ACTIVE' },
			include: {
				matches: true,
				user: true,
			},
			orderBy: { createdAt: 'desc' },
		})

		if (!requests.length) {
			const emptyMessage =
				user.role === 'BUYER'
					? 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ö–†–°'
					: 'üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç'

			await ctx.reply(emptyMessage, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		for (const request of requests) {
			const message = `
üìã <b>${request.title}</b>

${user.role === 'SUPPLIER' ? `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${request.user.name}\n` : ''}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}
üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª
üì¨ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${request.matches.length}
`

			const buttons = []

			if (user.role === 'BUYER') {
				buttons.push([
					Markup.button.callback(
						'üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏',
						`view_request_${request.id}`,
					),
				])
			} else {
				buttons.push([
					Markup.button.callback(
						'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º',
						`contact_buyer_${request.userId}`,
					),
				])
			}

			buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

			await ctx.reply(message, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			})
		}
	}

	async handleViewRequest(ctx) {
		const requestId = parseInt(ctx.callbackQuery.data.split('_')[2])
		const request = await this.prisma.request.findUnique({
			where: { id: requestId },
			include: {
				matches: {
					include: {
						offer: {
							include: {
								user: true,
							},
						},
					},
				},
			},
		})

		const requestDetails = `
üìã <b>–ó–∞–ø—Ä–æ—Å #${request.id}</b>

üêÑ ${request.title}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}
üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª

üì¨ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (${request.matches.length}):</b>`

		const buttons = []

		if (request.matches.length > 0) {
			request.matches.forEach((match, index) => {
				const offer = match.offer
				buttons.push([
					Markup.button.callback(
						`${index + 1}. ${offer.title} - ${offer.price}‚ÇΩ (${
							offer.user.name
						})`,
						`view_offer_${offer.id}`,
					),
				])
			})
		}

		buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å–∞–º', 'my_requests')])
		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(requestDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	async handleViewOffer(ctx) {
		const offerId = ctx.callbackQuery.data.split('_')[2]
		const offer = await this.prisma.offer.findUnique({
			where: { id: offerId },
			include: {
				user: true,
				images: true,
			},
		})

		if (!offer) {
			await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
			return
		}

		const offerDetails = `
üì¶ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${offer.user.name}</b>

üêÑ ${offer.title}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç –õ–æ–∫–∞—Ü–∏—è: ${offer.location}

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:</b>
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.user.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${offer.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: ${offer.user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

		const buttons = [
			[
				Markup.button.callback(
					'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					`chat_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'üì± –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
					`contacts_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º',
					`view_request_${ctx.match[1]}`,
				),
			],
			[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
		]

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (offer.images.length > 0) {
			for (const image of offer.images) {
				await ctx.replyWithPhoto(image.url)
			}
		}

		await ctx.reply(offerDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	private formatDate(date: Date): string {
		return new Intl.DateTimeFormat('ru-RU', {
			day: '2-digit',
			month: '2-digit',
			year: 'numeric',
		}).format(date)
	}

	async handleIncomingRequests(ctx) {
		const userId = ctx.from.id
		const userWithOffers = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						matches: {
							include: {
								request: {
									include: {
										user: true,
									},
								},
							},
						},
					},
				},
			},
		})

		const activeMatches = userWithOffers.offers.flatMap(offer =>
			offer.matches.filter(match => match.status === 'PENDING'),
		)

		if (!activeMatches.length) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		const buttons = activeMatches.map((match, index) => [
			Markup.button.callback(
				`${index + 1}. ${match.request.title} –æ—Ç ${match.request.user.name}`,
				`view_incoming_request_${match.request.id}`,
			),
		])

		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(
			'üì¨ <b>–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}

	async handleRequestInput(ctx: Context, text: string) {
		const userId = ctx.from.id

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º
		const state = this.getRequestState(userId)
		console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, state)

		if (!state) {
			console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
			return false
		}

		try {
			switch (state.inputType) {
				case 'breed':
					state.breed = text
					state.inputType = 'quantity'
					this.requestStates.set(userId, state)
					await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
					return true

				case 'quantity':
					const quantity = parseInt(text)
					if (isNaN(quantity) || quantity <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return true
					}
					state.quantity = quantity
					state.inputType = 'weight'
					this.requestStates.set(userId, state)
					await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å (–≤ –∫–≥):')
					return true

				case 'weight':
					const weight = parseInt(text)
					if (isNaN(weight) || weight <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return true
					}
					state.weight = weight
					state.inputType = 'age'
					this.requestStates.set(userId, state)
					await ctx.reply('üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ö–†–° (–≤ –º–µ—Å—è—Ü–∞—Ö):')
					return true

				case 'age':
					const age = parseInt(text)
					if (isNaN(age) || age <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return true
					}
					state.age = age
					state.inputType = 'delivery_date'
					this.requestStates.set(userId, state)
					await ctx.reply(
						'üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ 15.06.2023"):',
					)
					return true

				case 'delivery_date':
					state.deliveryDate = text
					state.inputType = 'price'
					this.requestStates.set(userId, state)
					await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):')
					return true

				case 'price':
					const price = parseInt(text)
					if (isNaN(price) || price <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return true
					}
					state.price = price
					state.inputType = 'region'
					this.requestStates.set(userId, state)
					await ctx.reply('üåç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∫–∏:')
					return true

				case 'region':
					state.region = text
					state.inputType = 'location'
					this.requestStates.set(userId, state)
					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')
					return true

				case 'location':
					state.location = text
					// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
					await this.createRequest(ctx)
					return true

				default:
					return false
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞')
			return true
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	initRequestState(userId: number, state: RequestState) {
		this.requestStates.set(userId, state)
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	async startRequestCreation(ctx: Context) {
		try {
			const userId = ctx.from.id

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ photos –∏ videos
			const requestState: RequestState = {
				inputType: 'cattle_type',
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			this.requestStates.set(userId, requestState)

			// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			console.log(
				`–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
				requestState,
			)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Å–∫–æ—Ç–∞
			await ctx.reply('üêÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ö–†–°:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üêÑ –ö–æ—Ä–æ–≤—ã', callback_data: 'request_cattle_COWS' },
							{ text: 'üêÇ –ë—ã–∫–∏', callback_data: 'request_cattle_BULLS' },
						],
						[
							{ text: 'üêÆ –¢–µ–ª–∫–∏', callback_data: 'request_cattle_HEIFERS' },
							{
								text: 'üêÑ –ù–µ—Ç–µ–ª–∏',
								callback_data: 'request_cattle_BREEDING_HEIFERS',
							},
						],
						[
							{ text: 'üêÆ –¢–µ–ª—è—Ç–∞', callback_data: 'request_cattle_CALVES' },
							{ text: 'üêÇ –ë—ã—á–∫–∏', callback_data: 'request_cattle_BULL_CALVES' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	async createRequest(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.requestStates.get(userId)

			if (!state) {
				await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
			if (!state.region || !state.location) {
				await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')

				if (!state.region) {
					state.inputType = 'region'
					this.requestStates.set(userId, state)
					await ctx.reply('üåç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∫–∏:')
				} else if (!state.location) {
					state.inputType = 'location'
					this.requestStates.set(userId, state)
					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')
				}
				return
			}

			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', state)

			// –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø –ö–†–° –∏ —Ü–µ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
			const russianTitle = `${this.translateCattleType(state.cattleType)} ${this.translatePurpose(state.purpose)}`

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç ISO
			let deadlineDate = null
			if (state.deliveryDate) {
				try {
					// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
					const parts = state.deliveryDate.split('.')
					if (parts.length === 3) {
						deadlineDate = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)
					}
				} catch (e) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã:', e)
				}
			}

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const request = await this.prisma.request.create({
				data: {
					title: russianTitle,
					quantity: state.quantity,
					weight: state.weight,
					age: state.age,
					price: state.price,
					location: state.location,
					region: state.region,
					breed: state.breed || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
					status: 'ACTIVE',
					deadline: deadlineDate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
					user: { connect: { id: user.id } },
				},
			})

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
			this.requestStates.delete(userId)

			// –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
			const matches = await this.findMatches(request)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
			await ctx.reply(
				`‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
					`üêÑ ${russianTitle}\n` +
					`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤\n` +
					`‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥\n` +
					`üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.\n` +
					`üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}\n` +
					`üåç –†–µ–≥–∏–æ–Ω: ${request.region}\n` +
					`üêÆ –ü–æ—Ä–æ–¥–∞: ${request.breed}\n` +
					`üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª\n\n` +
					`${
						matches.length > 0
							? `–ù–∞–π–¥–µ–Ω–æ ${matches.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /matches –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`
							: '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏.'
					}`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	getRequestState(userId: number): RequestState | undefined {
		return this.requestStates.get(userId)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	updateRequestState(userId: number, state: RequestState): void {
		this.requestStates.set(userId, state)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
	async showRequestDetails(ctx: Context, requestId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
			const request = await this.prisma.request.findUnique({
				where: { id: requestId },
				include: {
					user: true,
					matches: {
						include: {
							offer: {
								include: {
									user: true,
									images: true,
								},
							},
						},
					},
				},
			})

			if (!request) {
				await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø—Ä–æ—Å–∞
			let message = `üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ #${request.id}</b>\n\n`
			message += `üêÆ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${request.title}\n`
			message += `üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${request.quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è <b>–í–µ—Å:</b> ${request.weight} –∫–≥\n`
			message += `üóìÔ∏è <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${request.age} –º–µ—Å.\n`
			message += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${request.location}\n`
			message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${request.price} ‚ÇΩ/–≥–æ–ª\n`
			message += `üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> ${this.getStatusText(request.status)}\n`
			message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${request.createdAt.toLocaleDateString()}\n\n`

			// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const buttons = []

			if (user.role === 'SUPPLIER') {
				// –î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ö–†–°"
				buttons.push([
					{
						text: 'üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ö–†–°',
						callback_data: `offer_cattle_${request.id}`,
					},
				])
				buttons.push([
					{ text: '¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'all_requests' },
				])
			} else if (user.role === 'BUYER' && request.userId === user.id) {
				// –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø—Ä–æ—Å–∞) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
				if (request.matches.length > 0) {
					message += `üîç <b>–ù–∞–π–¥–µ–Ω–æ ${request.matches.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</b>\n\n`
					const matchButtons = request.matches.map((match, index) => [
						{
							text: `${index + 1}. ${match.offer.title} (${match.offer.user.name})`,
							callback_data: `view_match_${match.id}`,
						},
					])
					buttons.push(...matchButtons)
				}
				buttons.push([
					{
						text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å',
						callback_data: `close_request_${request.id}`,
					},
				])
				buttons.push([{ text: '¬´ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }])
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö
			buttons.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: buttons,
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
	private getStatusText(status: string): string {
		const statusTexts = {
			ACTIVE: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
			INACTIVE: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
			COMPLETED: '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω',
			CANCELLED: '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
		}
		return statusTexts[status] || status
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	async showMatchDetails(ctx: Context, matchId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const match = await this.prisma.match.findUnique({
				where: { id: matchId },
				include: {
					request: true,
					offer: {
						include: {
							user: true,
							images: true,
						},
					},
				},
			})

			if (!match) {
				await ctx.reply('‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (match.request.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é')
				return
			}

			const offer = match.offer
			const supplier = offer.user

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
			let message = `üîç <b>–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n`
			message += `üêÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${offer.title}\n`
			message += `üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${offer.quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è <b>–í–µ—Å:</b> ${offer.weight} –∫–≥\n`
			message += `üóìÔ∏è <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${offer.age} –º–µ—Å.\n`
			message += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${offer.location}\n`
			message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${offer.price} ‚ÇΩ/${offer.priceType === 'PER_HEAD' ? '–≥–æ–ª' : '–∫–≥'}\n\n`

			message += `üë§ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> ${supplier.name}\n`
			message += `üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ${offer.createdAt.toLocaleDateString()}\n\n`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const buttons = [
				[
					Markup.button.callback(
						'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
						`request_contacts_${supplier.id}`,
					),
					Markup.button.callback(
						'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
						`send_message_${supplier.id}`,
					),
				],
				[
					Markup.button.callback(
						'¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å—É',
						`view_request_${match.request.id}`,
					),
					Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
				],
			]

			// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
			if (offer.images && offer.images.length > 0) {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
				const firstImage = offer.images[0]
				await ctx.replyWithPhoto(
					{ url: firstImage.url },
					{
						caption: message,
						parse_mode: 'HTML',
						reply_markup: { inline_keyboard: buttons },
					},
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
				for (let i = 1; i < offer.images.length; i++) {
					await ctx.replyWithPhoto({ url: offer.images[i].url })
				}
			} else {
				// –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: { inline_keyboard: buttons },
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞
	async closeRequest(ctx: Context, requestId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
			const request = await this.prisma.request.findUnique({
				where: { id: requestId },
			})

			if (!request) {
				await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (request.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É')
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "COMPLETED"
			await this.prisma.request.update({
				where: { id: requestId },
				data: { status: 'COMPLETED' },
			})

			await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç', {
				reply_markup: {
					inline_keyboard: [
						[
							Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', 'my_requests'),
							Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	async handleViewRequestDetails(ctx) {
		try {
			const requestId = ctx.callbackQuery.data.split('_')[2]
			const request = await this.prisma.request.findUnique({
				where: { id: parseInt(requestId) },
				include: {
					matches: {
						include: {
							offer: {
								include: {
									user: true,
									images: true,
								},
							},
						},
					},
				},
			})

			if (!request) {
				await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			const message = `
üìã <b>${request.title}</b>

üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}
üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª
üïí –°–æ–∑–¥–∞–Ω: ${request.createdAt.toLocaleDateString('ru-RU')}

üì¨ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${request.matches.length}
`

			const buttons = []

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
			if (request.matches.length > 0) {
				buttons.push([
					Markup.button.callback(
						'üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
						`view_matches_${request.id}`,
					),
				])
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
			buttons.push([
				Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `refresh_request_${request.id}`),
				Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', `close_request_${request.id}`),
			])

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
			buttons.push([
				Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å–∞–º', 'my_requests'),
				Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
			])

			await ctx.reply(message, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
	async handleBuyerRequests(ctx) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			if (user.role !== 'SUPPLIER') {
				await ctx.reply('‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
			const requests = await this.prisma.request.findMany({
				where: {
					status: 'ACTIVE',
				},
				include: {
					user: true,
					matches: true,
				},
				orderBy: { createdAt: 'desc' },
			})

			if (!requests.length) {
				await ctx.reply('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç', {
					parse_mode: 'HTML',
					...Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
					]),
				})
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			for (const request of requests) {
				const message = `
üìã <b>${request.title}</b>

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${request.user.name}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}
üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª
üïí –°–æ–∑–¥–∞–Ω: ${request.createdAt.toLocaleDateString('ru-RU')}
`

				const buttons = [
					[
						Markup.button.callback(
							'üì§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å',
							`offer_to_request_${request.id}`,
						),
					],
					[
						Markup.button.callback(
							'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º',
							`contact_buyer_${request.userId}`,
						),
					],

					[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
				]

				await ctx.reply(message, {
					parse_mode: 'HTML',
					...Markup.inlineKeyboard(buttons),
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è match
	@Action(/^send_offer_.*/)
	async handleSendOffer(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const callbackQuery = ctx.callbackQuery as any
			const [, requestId, offerId] = callbackQuery.data.split('_')

			// –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const match = await this.prisma.match.create({
				data: {
					request: { connect: { id: parseInt(requestId) } },
					offer: { connect: { id: offerId } },
					status: 'PENDING',
				},
				include: {
					request: {
						include: { user: true },
					},
					offer: {
						include: { user: true },
					},
				},
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
			if (match.request.user.telegramId) {
				const buyerMessage = `
üîî <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</b>

üìã –í–∞—à –∑–∞–ø—Ä–æ—Å: ${match.request.title}
üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${match.offer.user.name}
üêÆ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${match.offer.title}
üí∞ –¶–µ–Ω–∞: ${match.offer.price}‚ÇΩ/${
					match.offer.priceType === 'PER_HEAD' ? '–≥–æ–ª–æ–≤—É' : '–∫–≥'
				}
`

				await ctx.telegram.sendMessage(
					match.request.user.telegramId,
					buyerMessage,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
										callback_data: `view_match_${match.id}`,
									},
								],
							],
						},
					},
				)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
			await ctx.reply('‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å—É',
								callback_data: `view_request_${requestId}`,
							},
						],
						[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	@Action(/^offer_cattle_.*/)
	async handleOfferCattle(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const callbackQuery = ctx.callbackQuery as any
			const requestId = callbackQuery.data.replace('offer_cattle_', '')

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
				include: {
					offers: {
						where: { status: 'APPROVED' },
						include: {
							images: true,
						},
					},
				},
			})

			if (!user || user.role !== 'SUPPLIER') {
				await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')
				return
			}

			// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ ...
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ö–†–°:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	async showAllRequests(ctx: Context) {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
			const requests = await this.prisma.request.findMany({
				where: { status: 'ACTIVE' },
				include: {
					user: true,
					matches: true,
				},
				orderBy: {
					createdAt: 'desc',
				},
			})

			if (requests.length === 0) {
				await ctx.reply('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
			let message = 'üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:</b>\n\n'

			// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			for (const request of requests) {
				message += ` <b>${request.title}</b>\n`
				message += `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${request.user.name}\n`
				message += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤\n`
				message += `‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥\n`
				message += `üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.\n`
				message += `üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}\n`
				message += `üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª\n`
				message += `üì¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${request.matches.length}\n\n`
			}

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			const buttons = requests.map(request => [
				{
					text: `${request.title} - ${request.quantity} –≥–æ–ª–æ–≤`,
					callback_data: `view_request_${request.id}`,
				},
			])

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
			buttons.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: buttons,
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤')
		}
	}

	@Action(/^view_matches_.*/)
	async handleViewMatches(@Ctx() ctx: Context) {
		try {
			const callbackQuery = ctx.callbackQuery as any
			const offerId = callbackQuery.data.replace('view_matches_', '')

			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					matches: {
						include: {
							request: {
								include: {
									user: true,
								},
							},
						},
					},
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
			const message =
				`üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É (${offer.matches.length}):</b>\n\n` +
				`‚ùóÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
			const buttons = offer.matches.map(match => [
				{
					text: `${match.request.user.name} - ${match.request.quantity} –≥–æ–ª–æ–≤`,
					callback_data: `view_match_details_${match.id}`,
				},
			])

			buttons.push([
				{
					text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
					callback_data: `view_my_offer_${offerId}`,
				},
			])
			buttons.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: buttons },
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∫–æ—Ç–∞
	async handleCattleTypeSelection(ctx: Context, cattleType: CattleType) {
		const userId = ctx.from.id

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		const state = this.getRequestState(userId)
		console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, state)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–∫–æ—Ç–∞
		state.cattleType = cattleType
		state.inputType = 'breed' // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ—Ä–æ–¥—ã

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º
		this.requestStates.set(userId, state)
		console.log(
			`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
			this.requestStates.get(userId),
		)

		// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Ä–æ–¥—ã
		await ctx.reply('üêÑ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É —Å–∫–æ—Ç–∞:')
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
	async handlePurposeSelection(ctx: Context, purpose: string) {
		console.log('–í—ã–∑–≤–∞–Ω handlePurposeSelection —Å —Ü–µ–ª—å—é:', purpose)
		const userId = ctx.from.id
		const state = this.requestStates.get(userId)

		console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.purpose = purpose as Purpose
		state.inputType = 'region' // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –≤–º–µ—Å—Ç–æ –ø–æ—Ä–æ–¥—ã
		this.requestStates.set(userId, state)
		console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.requestStates.get(userId))

		// –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω
		await ctx.reply('üåç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∫–∏:')
	}

	// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	async completeRequest(ctx: Context) {
		const userId = ctx.from.id
		const state = this.requestStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
			return
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
			const request = await this.prisma.request.create({
				data: {
					title: `${state.cattleType} –¥–ª—è ${state.purpose}`,
					description: state.description || '',
					quantity: state.quantity,
					weight: state.weight,
					price: state.price,
					location: state.location,
					region: state.region,
					breed: state.breed,
					age: state.age,
					deadline: state.deadline,
					isExport: state.isExport,
					isBreeding: state.isBreeding,
					user: { connect: { id: user.id } },
					status: 'ACTIVE',
				},
			})

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			this.requestStates.delete(userId)

			// –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞
			const relevantOffers = await this.findRelevantOffers(request)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
			await ctx.reply(
				'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n' +
					`–¢–∏–ø –ö–†–°: ${state.cattleType}\n` +
					`–ü–æ—Ä–æ–¥–∞: ${state.breed}\n` +
					`–¶–µ–ª—å: ${state.purpose}\n` +
					`–†–µ–≥–∏–æ–Ω: ${state.region}\n` +
					`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${state.quantity} –≥–æ–ª–æ–≤\n` +
					`–í–µ—Å: ${state.weight} –∫–≥\n` +
					`–í–æ–∑—Ä–∞—Å—Ç: ${state.age} –º–µ—Å.\n` +
					`–°—Ä–æ–∫–∏: ${state.deadline}\n` +
					`–¶–µ–Ω–∞: ${state.price} —Ä—É–±.\n` +
					`–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã: ${state.location}\n` +
					`–≠–∫—Å–ø–æ—Ä—Ç: ${state.isExport ? '–î–∞' : '–ù–µ—Ç'}\n` +
					`–ü–ª–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ: ${state.isBreeding ? '–î–∞' : '–ù–µ—Ç'}\n` +
					(state.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}\n\n` : '\n') +
					'–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.',
			)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
			if (relevantOffers.length > 0) {
				await ctx.reply('üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:')

				for (const offer of relevantOffers) {
					const priceInfo =
						offer.priceType === 'PER_HEAD'
							? `${offer.price} —Ä—É–±. –∑–∞ –≥–æ–ª–æ–≤—É`
							: `${offer.price} —Ä—É–±. –∑–∞ –∫–≥`

					await ctx.reply(
						`üêÑ ${offer.title}\n\n` +
							`–¢–∏–ø –ö–†–°: ${offer.cattleType}\n` +
							`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤\n` +
							`–í–µ—Å: ${offer.weight} –∫–≥\n` +
							`–¶–µ–Ω–∞: ${priceInfo}\n` +
							`–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${offer.location}\n\n` +
							`${offer.description || ''}`,
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
											callback_data: `contact_seller_${offer.id}`,
										},
									],
								],
							},
						},
					)
				}
			} else {
				await ctx.reply(
					'‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n' +
						'–û–∂–∏–¥–∞–π—Ç–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
				)
			}

			// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }],
						[{ text: 'üì± –ú–µ–Ω—é', callback_data: 'menu' }],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply(
				'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			)
		}
	}

	// –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
	async findRelevantOffers(request: any) {
		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (¬±30%)
		const minPrice = Math.floor(request.price * 0.7)
		const maxPrice = Math.ceil(request.price * 1.3)

		// –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞
		const offers = await this.prisma.offer.findMany({
			where: {
				cattleType: request.title.split(' ')[0] as any,
				quantity: {
					gte: request.quantity * 0.7,
					lte: request.quantity * 1.3,
				},
				weight: {
					gte: request.weight * 0.7,
					lte: request.weight * 1.3,
				},
				price: {
					gte: minPrice,
					lte: maxPrice,
				},
				...(request.region
					? {
							OR: [
								{ region: request.region },
								{ region: { contains: request.region } },
								{ location: { contains: request.region } },
							],
						}
					: {}),
				status: 'APPROVED' as const,
			},
			take: 5,
		})

		return offers
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
	async handleRequestContacts(ctx: Context) {
		try {
			await ctx.answerCbQuery()

			// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ callback_data
			//@ts-ignore
			const callbackData = ctx.callbackQuery.data
			const offerId = callbackData.replace('request_contacts_', '')
			const userId = ctx.from.id

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: { user: true },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
			const existingRequest = await this.prisma.contactRequest.findFirst({
				where: {
					offerId: offerId,
					buyerId: user.id,
					status: 'PENDING',
				},
			})

			if (existingRequest) {
				await ctx.reply(
					'‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
				)
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
			const requestState = {
				offerId,
				inputType: 'contact_request_comment',
				photos: [], // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
				videos: [], // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
			}
			this.offerService.updateOfferState(userId, requestState)

			await ctx.reply(
				'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∏ –∫–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫—É–ø–∏—Ç—å):',
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
	async handleExportSelection(ctx: Context, isExport: boolean) {
		const userId = ctx.from.id
		const state = this.requestStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.isExport = isExport

		// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–ª–µ–º–µ–Ω–Ω–æ–º —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏
		state.inputType = 'breeding'
		this.requestStates.set(userId, state)

		await ctx.reply('üß¨ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø–ª–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ?', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: '‚úÖ –î–∞', callback_data: 'request_breeding_yes' },
						{ text: '‚ùå –ù–µ—Ç', callback_data: 'request_breeding_no' },
					],
				],
			},
		})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
	async handleBreedingSelection(ctx: Context, isBreeding: boolean) {
		const userId = ctx.from.id
		const state = this.requestStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.isBreeding = isBreeding

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
		state.inputType = 'description'
		this.requestStates.set(userId, state)

		await ctx.reply(
			'üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }],
					],
				},
			},
		)
	}
}
