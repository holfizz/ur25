// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
import { Injectable } from '@nestjs/common'
import { Match, User } from '@prisma/client'
import { Context, Markup } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { Purpose } from '../../types/purpose.enum'

interface RequestState {
	purpose?: Purpose
	breed?: string
	quantity?: number
	weight?: number
	age?: number
	deadline?: Date
	maxPrice?: number
	location?: string
	title?: string
	price?: number
	inputType?: string
}

interface MatchWithRelations extends Match {
	request: Request & {
		user: User
	}
}

@Injectable()
export class TelegramRequestService {
	private requestStates: Map<number, RequestState> = new Map()

	constructor(private prisma: PrismaService) {}

	async handleRequest(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
			return
		}

		if (user.role !== 'BUYER') {
			await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã')
			return
		}

		await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏ –ö–†–°:', {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[
					Markup.button.callback('ü•© –ú—è—Å–æ', 'purpose_MEAT'),
					Markup.button.callback('üêÑ –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
				],
				[
					Markup.button.callback('ü•õ –ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
					Markup.button.callback('‚öñÔ∏è –û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
				],
				[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'menu')],
			]),
		})
	}

	async handlePurposeCallback(ctx) {
		const userId = ctx.from.id
		const purpose = ctx.callbackQuery.data.split('_')[1] as Purpose

		this.requestStates.set(userId, { purpose })
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
	}

	async handleRequestState(
		ctx,
		userId: number,
		text: string,
	): Promise<boolean> {
		const requestState = this.requestStates.get(userId)
		if (!requestState) return false

		if (!requestState.title) {
			requestState.title = text
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
			return true
		}

		if (!requestState.quantity) {
			const quantity = parseInt(text)
			if (isNaN(quantity) || quantity <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
				return true
			}
			requestState.quantity = quantity
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –ö–†–° –≤ –∫–≥:')
			return true
		}

		if (!requestState.weight) {
			const weight = parseFloat(text)
			if (isNaN(weight) || weight <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å')
				return true
			}
			requestState.weight = weight
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ö–†–° –≤ –º–µ—Å—è—Ü–∞—Ö:')
			return true
		}

		if (!requestState.age) {
			const age = parseInt(text)
			if (isNaN(age) || age <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
				return true
			}
			requestState.age = age
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏:', {
				reply_markup: Markup.inlineKeyboard([
					[
						Markup.button.callback('–ú—è—Å–æ', 'purpose_MEAT'),
						Markup.button.callback('–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ', 'purpose_BREEDING'),
					],
					[
						Markup.button.callback('–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'purpose_DAIRY'),
						Markup.button.callback('–û—Ç–∫–æ—Ä–º', 'purpose_FATTENING'),
					],
				]),
			})
			return true
		}

		if (!requestState.deadline) {
			try {
				const date = new Date(text)
				const today = new Date()
				today.setHours(0, 0, 0, 0)

				if (isNaN(date.getTime())) throw new Error('Invalid date')
				if (date < today) throw new Error('Past date')

				// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤
				const maxDate = new Date()
				maxDate.setMonth(maxDate.getMonth() + 6)
				if (date > maxDate) throw new Error('Too far')

				requestState.deadline = date
				this.requestStates.set(userId, requestState)
				await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):')
				return true
			} catch (error) {
				let errorMessage = '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n'

				if (error.message === 'Past date') {
					errorMessage = '‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º\n\n'
				} else if (error.message === 'Too far') {
					errorMessage = '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 6 –º–µ—Å—è—Ü–µ–≤\n\n'
				}

				await ctx.reply(
					`${errorMessage}` +
						'üìÖ –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –∞–∫—Ç—É–∞–ª–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å?\n\n' +
						'‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î\n' +
						'‚úÖ –ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-25\n\n' +
						'‚ùóÔ∏è –≠—Ç–æ –¥–∞—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫—É–ø–∏—Ç—å –ö–†–°.\n' +
						'‚ùóÔ∏è –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã.',
					{
						reply_markup: Markup.inlineKeyboard([
							[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_request')],
						]),
					},
				)
				return true
			}
		}

		if (!requestState.maxPrice) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É')
				return true
			}
			requestState.maxPrice = price
			this.requestStates.set(userId, requestState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')
			return true
		}

		if (!requestState.location) {
			requestState.location = text
			this.requestStates.set(userId, requestState)

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):')
			return true
		}

		if (!requestState.price) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É')
				return true
			}
			requestState.price = price
			this.requestStates.set(userId, requestState)

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
			await this.createRequest(ctx)
			return true
		}

		return false
	}

	async findMatches(request) {
		// –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'ACTIVE',
				quantity: {
					gte: request.quantity,
				},
				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
			},
			include: {
				user: true,
				images: true,
			},
		})

		// –°–æ–∑–¥–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const matchPromises = offers.map(offer =>
			this.prisma.match.create({
				data: {
					request: { connect: { id: request.id } },
					offer: { connect: { id: offer.id } },
					status: 'PENDING',
				},
			}),
		)

		const matches = await Promise.all(matchPromises)
		return matches
	}

	private getPurposeText(purpose: Purpose): string {
		const texts = {
			MEAT: '–ú—è—Å–æ',
			BREEDING: '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
			DAIRY: '–ú–æ–ª–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
			FATTENING: '–û—Ç–∫–æ—Ä–º',
		}
		return texts[purpose]
	}

	async handleMyRequests(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		const requests = await this.prisma.request.findMany({
			where: { userId: user.id },
			include: {
				matches: true,
			},
			orderBy: { createdAt: 'desc' },
		})

		if (!requests.length) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ö–†–°', {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		const buttons = requests.map((req, index) => [
			Markup.button.callback(
				`${index + 1}. ${req.title} (${req.matches.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`,
				`view_request_${req.id}`,
			),
		])

		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(
			'üìã <b>–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}

	async handleViewRequest(ctx) {
		const requestId = parseInt(ctx.callbackQuery.data.split('_')[2])
		const request = await this.prisma.request.findUnique({
			where: { id: requestId },
			include: {
				matches: {
					include: {
						offer: {
							include: {
								user: true,
							},
						},
					},
				},
			},
		})

		const requestDetails = `
üìã <b>–ó–∞–ø—Ä–æ—Å #${request.id}</b>

üêÑ ${request.title}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.
üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}
üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª

üì¨ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (${request.matches.length}):</b>`

		const buttons = []

		if (request.matches.length > 0) {
			request.matches.forEach((match, index) => {
				const offer = match.offer
				buttons.push([
					Markup.button.callback(
						`${index + 1}. ${offer.title} - ${offer.price}‚ÇΩ (${
							offer.user.name
						})`,
						`view_offer_${offer.id}`,
					),
				])
			})
		}

		buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å–∞–º', 'my_requests')])
		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(requestDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	async handleViewOffer(ctx) {
		const offerId = ctx.callbackQuery.data.split('_')[2]
		const offer = await this.prisma.offer.findUnique({
			where: { id: offerId },
			include: {
				user: true,
				images: true,
			},
		})

		if (!offer) {
			await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
			return
		}

		const offerDetails = `
üì¶ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${offer.user.name}</b>

üêÑ ${offer.title}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç –õ–æ–∫–∞—Ü–∏—è: ${offer.location}

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:</b>
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.user.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${offer.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: ${offer.user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

		const buttons = [
			[
				Markup.button.callback(
					'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					`chat_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'üì± –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
					`contacts_${offer.user.id}`,
				),
			],
			[
				Markup.button.callback(
					'¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º',
					`view_request_${ctx.match[1]}`,
				),
			],
			[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
		]

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (offer.images.length > 0) {
			for (const image of offer.images) {
				await ctx.replyWithPhoto(image.url)
			}
		}

		await ctx.reply(offerDetails, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	private formatDate(date: Date): string {
		return new Intl.DateTimeFormat('ru-RU', {
			day: '2-digit',
			month: '2-digit',
			year: 'numeric',
		}).format(date)
	}

	async handleIncomingRequests(ctx) {
		const userId = ctx.from.id
		const userWithOffers = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						matches: {
							include: {
								request: {
									include: {
										user: true,
									},
								},
							},
						},
					},
				},
			},
		})

		const activeMatches = userWithOffers.offers.flatMap(offer =>
			offer.matches.filter(match => match.status === 'PENDING'),
		)

		if (!activeMatches.length) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		const buttons = activeMatches.map((match, index) => [
			Markup.button.callback(
				`${index + 1}. ${match.request.title} –æ—Ç ${match.request.user.name}`,
				`view_incoming_request_${match.request.id}`,
			),
		])

		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])

		await ctx.reply(
			'üì¨ <b>–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}

	async handleRequestInput(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const state = this.requestStates.get(userId)

			if (!state || !state.inputType) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ')
				return
			}

			console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', state.inputType, text)

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
			switch (state.inputType) {
				case 'title':
					state.title = text
					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å description –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ quantity
					state.inputType = 'quantity'
					await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
					break
				case 'quantity':
					const quantity = parseInt(text)
					if (isNaN(quantity) || quantity <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return
					}
					state.quantity = quantity
					state.inputType = 'weight'
					await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):')
					break
				case 'weight':
					const weight = parseInt(text)
					if (isNaN(weight) || weight <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return
					}
					state.weight = weight
					state.inputType = 'age'
					await ctx.reply('üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–º–µ—Å—è—Ü–µ–≤):')
					break
				case 'age':
					const age = parseInt(text)
					if (isNaN(age) || age <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return
					}
					state.age = age
					state.inputType = 'price'
					await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ):')
					break
				case 'price':
					const price = parseInt(text)
					if (isNaN(price) || price <= 0) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
						return
					}
					state.price = price
					state.inputType = 'location'
					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:')
					break
				case 'location':
					state.location = text
					state.inputType = 'completed' // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
					await this.createRequest(ctx) // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
					return // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞
				default:
					await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
					break
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			this.requestStates.set(userId, state)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	initRequestState(userId: number, state: RequestState) {
		this.requestStates.set(userId, state)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	async startRequestCreation(ctx: Context) {
		try {
			const userId = ctx.from.id

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
			const requestState: RequestState = {
				inputType: 'title',
			}

			this.requestStates.set(userId, requestState)

			await ctx.reply(
				'üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ö–†–°</b>\n\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:',
				{ parse_mode: 'HTML' },
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	async createRequest(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.requestStates.get(userId)

			if (!state) {
				await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
				return
			}

			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', state)

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª–µ description, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
			const request = await this.prisma.request.create({
				data: {
					title: state.title,
					// –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ description, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
					quantity: state.quantity,
					weight: state.weight,
					age: state.age,
					price: state.price,
					location: state.location,
					status: 'ACTIVE',
					user: { connect: { id: user.id } },
				},
			})

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
			this.requestStates.delete(userId)

			// –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
			const matches = await this.findMatches(request)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª–µ description
			await ctx.reply(
				`‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
					`üêÑ ${request.title}\n` +
					// –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å description
					`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity} –≥–æ–ª–æ–≤\n` +
					`‚öñÔ∏è –í–µ—Å: ${request.weight} –∫–≥\n` +
					`üóìÔ∏è –í–æ–∑—Ä–∞—Å—Ç: ${request.age} –º–µ—Å.\n` +
					`üìç –õ–æ–∫–∞—Ü–∏—è: ${request.location}\n` +
					`üí∞ –¶–µ–Ω–∞: ${request.price} ‚ÇΩ/–≥–æ–ª\n\n` +
					`${
						matches.length > 0
							? `–ù–∞–π–¥–µ–Ω–æ ${matches.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /matches –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`
							: '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏.'
					}`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	getRequestState(userId: number): RequestState | undefined {
		return this.requestStates.get(userId)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
	async showRequestDetails(ctx: Context, requestId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
			const request = await this.prisma.request.findUnique({
				where: { id: requestId },
				include: {
					matches: {
						include: {
							offer: {
								include: {
									user: true,
								},
							},
						},
					},
				},
			})

			if (!request) {
				await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (request.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø—Ä–æ—Å–∞
			let message = `üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ #${request.id}</b>\n\n`
			message += `üêÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${request.title}\n`

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è description —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ in
			// –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
			if ('description' in request && request.description) {
				message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${request.description}\n`
			}

			message += `üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${request.quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è <b>–í–µ—Å:</b> ${request.weight} –∫–≥\n`
			message += `üóìÔ∏è <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${request.age} –º–µ—Å.\n`
			message += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${request.location}\n`
			message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${request.price} ‚ÇΩ/–≥–æ–ª\n`
			message += `üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> ${this.getStatusText(request.status)}\n`
			message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${request.createdAt.toLocaleDateString()}\n\n`

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
			if (request.matches.length > 0) {
				message += `üîç <b>–ù–∞–π–¥–µ–Ω–æ ${request.matches.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</b>\n\n`

				// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
				const matchButtons = request.matches.map((match, index) => [
					Markup.button.callback(
						`${index + 1}. ${match.offer.title} (${match.offer.user.name})`,
						`view_match_${match.id}`,
					),
				])

				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
				matchButtons.push([
					Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', 'my_requests'),
					Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
				])

				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: matchButtons,
					},
				})
			} else {
				message += 'üîç <b>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.</b>\n'
				message += '–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'

				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								Markup.button.callback(
									'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
									`view_request_${request.id}`,
								),
								Markup.button.callback(
									'‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å',
									`close_request_${request.id}`,
								),
							],
							[
								Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', 'my_requests'),
								Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
							],
						],
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
	private getStatusText(status: string): string {
		const statusTexts = {
			ACTIVE: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
			INACTIVE: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
			COMPLETED: '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω',
			CANCELLED: '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
		}
		return statusTexts[status] || status
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	async showMatchDetails(ctx: Context, matchId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const match = await this.prisma.match.findUnique({
				where: { id: matchId },
				include: {
					request: true,
					offer: {
						include: {
							user: true,
							images: true,
						},
					},
				},
			})

			if (!match) {
				await ctx.reply('‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (match.request.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é')
				return
			}

			const offer = match.offer
			const supplier = offer.user

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
			let message = `üîç <b>–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n`
			message += `üêÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${offer.title}\n`
			message += `üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${offer.quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è <b>–í–µ—Å:</b> ${offer.weight} –∫–≥\n`
			message += `üóìÔ∏è <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${offer.age} –º–µ—Å.\n`
			message += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${offer.location}\n`
			message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${offer.price} ‚ÇΩ/${offer.priceType === 'PER_HEAD' ? '–≥–æ–ª' : '–∫–≥'}\n\n`

			message += `üë§ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> ${supplier.name}\n`
			message += `üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ${offer.createdAt.toLocaleDateString()}\n\n`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const buttons = [
				[
					Markup.button.callback(
						'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
						`request_contacts_${supplier.id}`,
					),
					Markup.button.callback(
						'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
						`send_message_${supplier.id}`,
					),
				],
				[
					Markup.button.callback(
						'¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å—É',
						`view_request_${match.request.id}`,
					),
					Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
				],
			]

			// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
			if (offer.images && offer.images.length > 0) {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
				const firstImage = offer.images[0]
				await ctx.replyWithPhoto(
					{ url: firstImage.url },
					{
						caption: message,
						parse_mode: 'HTML',
						reply_markup: { inline_keyboard: buttons },
					},
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
				for (let i = 1; i < offer.images.length; i++) {
					await ctx.replyWithPhoto({ url: offer.images[i].url })
				}
			} else {
				// –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: { inline_keyboard: buttons },
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞
	async closeRequest(ctx: Context, requestId: number) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
			const request = await this.prisma.request.findUnique({
				where: { id: requestId },
			})

			if (!request) {
				await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (request.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É')
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "COMPLETED"
			await this.prisma.request.update({
				where: { id: requestId },
				data: { status: 'COMPLETED' },
			})

			await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç', {
				reply_markup: {
					inline_keyboard: [
						[
							Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', 'my_requests'),
							Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}
}
