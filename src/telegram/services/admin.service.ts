import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

@Injectable()
export class AdminService {
	constructor(
		private prisma: PrismaService,
		private configService: ConfigService,
		private telegramClient: TelegramClient,
	) {}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	async handleContactRequest(matchId: string) {
		try {
			const match = await this.prisma.match.findUnique({
				where: { id: parseInt(matchId) },
				include: {
					offer: {
						include: {
							user: true,
							images: true,
						},
					},
					request: {
						include: {
							user: true,
						},
					},
				},
			})

			if (!match) {
				throw new Error('Match not found')
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
			const admins = await this.prisma.user.findMany({
				where: { role: 'ADMIN' },
			})

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
			const message = `
üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: ${match.request.user.name}
‚Ä¢ ID: ${match.request.user.id}
‚Ä¢ –†–µ–≥–∏–æ–Ω: ${match.request.user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìã <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${match.offer.title}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${match.offer.quantity} –≥–æ–ª–æ–≤
‚Ä¢ –¶–µ–Ω–∞: ${match.offer.pricePerHead ? `${match.offer.pricePerHead}‚ÇΩ/–≥–æ–ª–æ–≤—É` : `${match.offer.pricePerKg}‚ÇΩ/–∫–≥`}
‚Ä¢ –†–µ–≥–∏–æ–Ω: ${match.offer.region}

üíº <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b>
‚Ä¢ –ò–º—è: ${match.offer.user.name}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${match.offer.user.status || 'REGULAR'}
‚Ä¢ ID: ${match.offer.user.id}

‚ö°Ô∏è –î–µ–π—Å—Ç–≤–∏—è:
/approve_contact_${match.id} - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
/reject_contact_${match.id} - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
`

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
			for (const admin of admins) {
				if (admin.telegramId) {
					await this.telegramClient.sendMessage(admin.telegramId, message, {
						parse_mode: 'HTML',
					})

					// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é
					if (match.offer.images && match.offer.images.length > 0) {
						await this.telegramClient.sendPhoto(
							admin.telegramId,
							match.offer.images[0].url,
						)
					}
				}
			}

			return true
		} catch (error) {
			console.error('Error handling contact request:', error)
			return false
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
	async approveContactRequest(matchId: string) {
		try {
			const match = await this.prisma.match.update({
				where: { id: parseInt(matchId) },
				data: { status: 'APPROVED' },
				include: {
					offer: { include: { user: true } },
					request: { include: { user: true } },
				},
			})

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
			if (match.request.user.telegramId) {
				const buyerMessage = `
‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–¥–æ–±—Ä–µ–Ω!</b>

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:
‚Ä¢ –ò–º—è: ${match.offer.user.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${match.offer.user.phone}
‚Ä¢ Email: ${match.offer.user.email}

üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${match.offer.title}
`
				await this.telegramClient.sendMessage(
					match.request.user.telegramId,
					buyerMessage,
					{ parse_mode: 'HTML' },
				)
			}

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
			if (match.offer.user.telegramId) {
				const sellerMessage = `
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ</b>

–ü–æ–∫—É–ø–∞—Ç–µ–ª—é ${match.request.user.name} –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${match.offer.title}".
`
				await this.telegramClient.sendMessage(
					match.offer.user.telegramId,
					sellerMessage,
					{ parse_mode: 'HTML' },
				)
			}

			return true
		} catch (error) {
			console.error('Error approving contact request:', error)
			return false
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
	async rejectContactRequest(matchId: string) {
		try {
			const match = await this.prisma.match.update({
				where: { id: parseInt(matchId) },
				data: { status: 'REJECTED' },
				include: {
					offer: true,
					request: { include: { user: true } },
				},
			})

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
			if (match.request.user.telegramId) {
				const message = `
‚ùå <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${match.offer.title}" –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–¥–µ–ª–∫–∏
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
`
				await this.telegramClient.sendMessage(
					match.request.user.telegramId,
					message,
					{ parse_mode: 'HTML' },
				)
			}

			return true
		} catch (error) {
			console.error('Error rejecting contact request:', error)
			return false
		}
	}
}
