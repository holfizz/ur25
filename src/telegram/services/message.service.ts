import { Injectable } from '@nestjs/common'
import { Context } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

interface MessageState {
	chatId: string
	recipientId: string
}

@Injectable()
export class TelegramMessageService {
	private messageStates: Map<number, MessageState> = new Map()

	constructor(
		private prisma: PrismaService,
		private telegramClient: TelegramClient,
	) {}

	setMessageState(userId: number, state: MessageState): void {
		this.messageStates.set(userId, state)
	}

	getMessageState(userId: number): MessageState | undefined {
		return this.messageStates.get(userId)
	}

	clearMessageState(userId: number): void {
		this.messageStates.delete(userId)
	}

	async handleMessageInput(ctx: Context, text: string): Promise<void> {
		const userId = ctx.from.id
		const state = this.getMessageState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		const recipient = await this.prisma.user.findUnique({
			where: { id: state.recipientId },
		})

		if (!recipient) {
			await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		const message = await this.prisma.chatMessage.create({
			data: {
				chat: { connect: { id: state.chatId } },
				sender: { connect: { id: user.id } },
				text: text,
			},
			include: {
				chat: true,
			},
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await ctx.reply(
			`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipient.name || recipient.email}`,
			{
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
				},
			},
		)

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
		if (recipient.telegramId) {
			await this.telegramClient.sendMessage(
				recipient.telegramId,
				`üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n` +
					`–û—Ç: ${user.name || user.email}\n\n` +
					`${text}`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å',
									callback_data: `send_message_${user.id}`,
								},
							],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)
		}

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		this.clearMessageState(userId)
	}

	async showChats(ctx: Context): Promise<void> {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const chats = await this.prisma.chat.findMany({
			where: {
				OR: [{ user1Id: user.id }, { user2Id: user.id }],
			},
			include: {
				user1: true,
				user2: true,
				messages: {
					orderBy: { createdAt: 'desc' },
					take: 1,
				},
			},
			orderBy: { updatedAt: 'desc' },
		})

		if (chats.length === 0) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤
		let message = 'üí¨ <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'
		const keyboard = []

		for (const chat of chats) {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
			const interlocutor = chat.user1Id === user.id ? chat.user2 : chat.user1

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			const lastMessage = chat.messages[0]
			const lastMessageText = lastMessage
				? `${lastMessage.text.substring(0, 30)}${lastMessage.text.length > 30 ? '...' : ''}`
				: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
			message += `üë§ <b>${interlocutor.name || interlocutor.email}</b>\n`
			message += `üìù ${lastMessageText}\n\n`

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç—É
			keyboard.push([
				{
					text: `üí¨ ${interlocutor.name || interlocutor.email}`,
					callback_data: `open_chat_${chat.id}`,
				},
			])
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
		keyboard.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		await ctx.reply(message, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: keyboard,
			},
		})
	}

	async openChat(ctx: Context, chatId: string): Promise<void> {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
		const chat = await this.prisma.chat.findUnique({
			where: { id: chatId },
			include: {
				user1: true,
				user2: true,
				messages: {
					orderBy: { createdAt: 'desc' },
					take: 10,
				},
			},
		})

		if (!chat) {
			await ctx.reply('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
		if (chat.user1Id !== user.id && chat.user2Id !== user.id) {
			await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É')
			return
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
		const interlocutor = chat.user1Id === user.id ? chat.user2 : chat.user1

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
		let message = `üí¨ <b>–ß–∞—Ç —Å ${interlocutor.name || interlocutor.email}</b>\n\n`

		if (chat.messages.length === 0) {
			message += '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'
		} else {
			// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
			for (const msg of chat.messages.reverse()) {
				const sender =
					msg.senderId === user.id
						? '–í—ã'
						: interlocutor.name || interlocutor.email
				message += `<b>${sender}:</b> ${msg.text}\n\n`
			}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		await ctx.reply(message, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å',
							callback_data: `send_message_${interlocutor.id}`,
						},
					],
					[
						{
							text: '¬´ –ù–∞–∑–∞–¥ –∫ —á–∞—Ç–∞–º',
							callback_data: 'messages',
						},
					],
					[
						{
							text: '¬´ –ú–µ–Ω—é',
							callback_data: 'menu',
						},
					],
				],
			},
		})

		// –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
		await this.prisma.chatMessage.updateMany({
			where: {
				chatId: chatId,
				senderId: interlocutor.id,
				read: false,
			},
			data: {
				read: true,
			},
		})
	}

	async getUnreadMessagesCount(userId: string): Promise<number> {
		try {
			// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const chats = await this.prisma.chat.findMany({
				where: {
					OR: [{ user1Id: userId }, { user2Id: userId }],
				},
				include: {
					messages: {
						where: {
							read: false,
							NOT: {
								senderId: userId, // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
							},
						},
					},
				},
			})

			// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			let unreadCount = 0
			for (const chat of chats) {
				unreadCount += chat.messages.length
			}

			return unreadCount
		} catch (error) {
			console.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:',
				error,
			)
			return 0 // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
		}
	}

	async handleMessages(ctx: Context, page: number = 1): Promise<void> {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const chats = await this.prisma.chat.findMany({
			where: {
				OR: [{ user1Id: user.id }, { user2Id: user.id }],
			},
			include: {
				user1: true,
				user2: true,
				messages: {
					orderBy: { createdAt: 'desc' },
					take: 1,
				},
			},
			orderBy: { updatedAt: 'desc' },
		})

		if (chats.length === 0) {
			await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤
		let message = 'üí¨ <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'
		const keyboard = []

		for (const chat of chats) {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
			const interlocutor = chat.user1Id === user.id ? chat.user2 : chat.user1

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			const lastMessage = chat.messages[0]
			const lastMessageText = lastMessage
				? `${lastMessage.text.substring(0, 30)}${lastMessage.text.length > 30 ? '...' : ''}`
				: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
			message += `üë§ <b>${interlocutor.name || interlocutor.email}</b>\n`
			message += `üìù ${lastMessageText}\n\n`

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç—É
			keyboard.push([
				{
					text: `üí¨ ${interlocutor.name || interlocutor.email}`,
					callback_data: `open_chat_${chat.id}`,
				},
			])
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
		keyboard.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		await ctx.reply(message, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: keyboard,
			},
		})
	}
}
