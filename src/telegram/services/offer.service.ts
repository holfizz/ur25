// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { CattlePurpose, CattleType, PriceType } from '@prisma/client'
import fetch from 'node-fetch'
import { Context, Markup } from 'telegraf'
import { S3Service } from '../../common/services/s3.service'
import { PrismaService } from '../../prisma.service'
import { CozeService } from '../../services/coze.service'
import { TelegramProfileService } from '../services/profile.service'
import { TelegramClient } from '../telegram.client'

interface UploadedFile {
	buffer: Buffer
	originalname: string
	mimetype: string
	fieldname: string
	encoding: string
	size: number
	url?: string
	type?: string
}

interface OfferState {
	photos: Array<{ url: string; key: string }>
	videos: Array<{ url: string }>
	inputType?: string
	title?: string
	quantity?: number
	weight?: number
	age?: number
	price?: number
	location?: string
	description?: string
	mercuryNumber?: string
	contactPerson?: string
	contactPhone?: string
	breed?: string
	cattleType?: CattleType
	purpose?: CattlePurpose
	priceType?: PriceType
	pricePerKg?: number
	pricePerHead?: number
	gktDiscount?: number
	region?: string
	fullAddress?: string
	customsUnion?: boolean
	videoUrl?: string
	addingGutDiscount?: boolean
	aiOfferId?: string
	calculateOfferId?: string
	userId?: string
	address?: string
	offerId?: string // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ offerId
	contactRequestId?: string // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è ID –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	commentText?: string // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
}

interface OfferListResponse {
	topOffers: string[] // –ú–∞—Å—Å–∏–≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	hasMore: boolean
	currentPage: number
	totalPages: number
}

@Injectable()
export class TelegramOfferService {
	private offerStates: Map<number, OfferState> = new Map()

	constructor(
		private prisma: PrismaService,
		private s3Service: S3Service,
		private configService: ConfigService,
		private telegramClient: TelegramClient,
		private profileService: TelegramProfileService,
		private cozeService: CozeService,
	) {}

	// –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
	public getOfferState(userId: number): OfferState | undefined {
		return this.offerStates.get(userId)
	}

	public updateOfferState(userId: number, state: OfferState): void {
		this.offerStates.set(userId, state)
	}

	async handleCreateOffer(ctx: Context) {
		const telegramId = ctx.from.id // –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ number

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const user = await this.prisma.user.findUnique({
			where: { telegramId: telegramId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
			return
		}

		if (!user?.mercuryNumber) {
			// –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
			this.offerStates.set(telegramId, {
				photos: [],
				videos: [],
				inputType: 'mercury_number',
			})
			await ctx.reply(
				'üî¢ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π".\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä:',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury_offer' }],
							[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
						],
					},
				},
			)
			return
		}

		// –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—Å—Ç—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		this.offerStates.set(telegramId, {
			photos: [],
			videos: [],
		})
		await ctx.reply(
			'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ –ö–†–° (–¥–æ 5 —Ñ–∞–π–ª–æ–≤)\n\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –°—ä–µ–º–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –§–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n' +
				'‚Ä¢ –í–∏–¥–µ–æ —Å –æ–±—Ö–æ–¥–æ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö\n\n' +
				'‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ 50MB',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	async handlePhotoUpload(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
			const totalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			if (totalFiles >= 5) {
				await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
			const message = ctx.message
			if (!('photo' in message)) {
				await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
				return
			}

			const photos = message.photo
			const bestPhoto = photos[photos.length - 1]
			const fileId = bestPhoto.file_id

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			const fileInfo = await ctx.telegram.getFile(fileId)
			const fileUrl = `https://api.telegram.org/file/bot${this.configService.get('TELEGRAM_BOT_TOKEN')}/${fileInfo.file_path}`

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
			const response = await fetch(fileUrl)
			const buffer = await response.buffer()

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
			const file: UploadedFile = {
				buffer,
				originalname: `photo_${Date.now()}.jpg`,
				mimetype: 'image/jpeg',
				fieldname: 'photo',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(file)

			// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			if (!state.photos) {
				state.photos = []
			}
			state.photos.push({
				url: uploadedFile.url,
				key: uploadedFile.key,
			})

			this.updateOfferState(userId, state)

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
			const newTotalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			const remainingFiles = 5 - newTotalFiles

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
			await ctx.reply(
				`‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${newTotalFiles}/5)\n\n${
					remainingFiles > 0
						? `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ ${remainingFiles} –º–µ–¥–∏–∞—Ñ–∞–π–ª(–æ–≤) –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
						: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.'
				}`,
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'media_done' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/
		return phoneRegex.test(phone)
	}

	async handleOfferInput(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞:', state.inputType, text)

			switch (state.inputType) {
				case 'title':
					state.title = text
					state.inputType = 'description'
					this.updateOfferState(userId, state)
					await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
					break

				case 'description':
					state.description = text
					state.inputType = 'cattle_type'
					this.offerStates.set(userId, state)
					await ctx.reply('üêÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ö–†–°:', {
						reply_markup: {
							inline_keyboard: [
								[
									{ text: 'üêÑ –¢–µ–ª—è—Ç–∞', callback_data: 'cattle_type_CALVES' },
									{
										text: 'üêÇ –ë—ã—á–∫–∏',
										callback_data: 'cattle_type_BULL_CALVES',
									},
								],
								[
									{ text: 'üêÑ –¢–µ–ª–∫–∏', callback_data: 'cattle_type_HEIFERS' },
									{
										text: 'üêÑ –ù–µ—Ç–µ–ª–∏',
										callback_data: 'cattle_type_BREEDING_HEIFERS',
									},
								],
								[
									{ text: 'üêÇ –ë—ã–∫–∏', callback_data: 'cattle_type_BULLS' },
									{ text: 'üêÑ –ö–æ—Ä–æ–≤—ã', callback_data: 'cattle_type_COWS' },
								],
							],
						},
					})
					break

				case 'breed':
					state.breed = text
					state.inputType = 'purpose'
					this.offerStates.set(userId, state)

					// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
					await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ö–†–°:', {
						reply_markup: {
							inline_keyboard: [
								[
									{ text: 'üè™ –¢–æ–≤–∞—Ä–Ω—ã–π', callback_data: 'purpose_COMMERCIAL' },
									{ text: 'üß¨ –ü–ª–µ–º–µ–Ω–Ω–æ–π', callback_data: 'purpose_BREEDING' },
								],
							],
						},
					})
					break

				case 'price_per_head':
					const pricePerHead = parseFloat(text)
					if (isNaN(pricePerHead) || pricePerHead <= 0) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)')
						return
					}
					state.pricePerHead = pricePerHead
					state.inputType = 'quantity'
					this.updateOfferState(userId, state)
					await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
					break

				case 'price_per_kg':
					const pricePerKg = parseFloat(text)
					if (isNaN(pricePerKg) || pricePerKg <= 0) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)')
						return
					}
					state.pricePerKg = pricePerKg
					state.inputType = 'quantity'
					this.updateOfferState(userId, state)
					await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
					break

				case 'quantity':
					const quantityValue = parseInt(text)
					if (isNaN(quantityValue) || quantityValue <= 0) {
						await ctx.reply(
							'‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)',
						)
						return
					}
					state.quantity = quantityValue
					state.inputType = 'weight'
					this.offerStates.set(userId, state)
					await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ–¥–Ω–æ–π –≥–æ–ª–æ–≤—ã (–∫–≥):')
					break

				case 'weight':
					const weight = parseFloat(text)
					if (isNaN(weight) || weight <= 0) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å')
						return
					}
					state.weight = weight
					state.inputType = 'age'
					this.offerStates.set(userId, state)
					await ctx.reply('üå± –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–º–µ—Å—è—Ü–µ–≤):')
					break

				case 'age':
					const age = parseInt(text)
					if (isNaN(age) || age <= 0) {
						await ctx.reply(
							'‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)',
						)
						return
					}
					state.age = age
					state.inputType = 'ask_gkt_discount'
					this.offerStates.set(userId, state)

					// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–∫–∏–¥–∫—É –ñ–ö–¢ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
					await ctx.reply('–ë—É–¥–µ—Ç –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢?', {
						reply_markup: {
							inline_keyboard: [
								[
									{ text: '‚úÖ –î–∞', callback_data: 'gut_yes' },
									{ text: '‚ùå –ù–µ—Ç', callback_data: 'gut_no' },
								],
							],
						},
					})
					break

				case 'gkt_discount':
					const discountValue = parseFloat(text)
					if (
						isNaN(discountValue) ||
						discountValue < 0 ||
						discountValue > 100
					) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∫–∏–¥–∫—É (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)')
						return
					}
					state.gktDiscount = discountValue
					state.inputType = 'region'
					this.offerStates.set(userId, state)
					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
					break

				case 'region':
					state.region = text
					state.inputType = 'full_address'
					this.offerStates.set(userId, state)

					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
					break

				case 'full_address':
					state.fullAddress = text
					await this.createOffer(ctx, state)
					break

				case 'ai_question':
					try {
						if (!state.offerId) {
							await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
							return
						}

						// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
						const offer = await this.prisma.offer.findUnique({
							where: { id: state.offerId },
							select: {
								title: true,
								description: true,
								cattleType: true,
								breed: true,
								purpose: true,
								priceType: true,
								pricePerHead: true,
								pricePerKg: true,
								quantity: true,
								weight: true,
								age: true,
								region: true,
								gktDiscount: true,
								customsUnion: true,
								status: true,
							},
						})

						if (!offer) {
							await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')
							return
						}

						await ctx.reply('ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...')

						try {
							// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
							const context = `–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ö–†–°:
							–ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}
							–û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
							–¢–∏–ø –ö–†–°: ${offer.cattleType}
							–ü–æ—Ä–æ–¥–∞: ${offer.breed || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
							–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${offer.purpose}
							–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
							–í–µ—Å: ${offer.weight} –∫–≥
							–í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
							–¶–µ–Ω–∞: ${
								offer.priceType === 'PER_HEAD'
									? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª`
									: `${offer.pricePerKg} ‚ÇΩ/–∫–≥`
							}
							–†–µ–≥–∏–æ–Ω: ${offer.region || '–ù–µ —É–∫–∞–∑–∞–Ω'}
							${offer.gktDiscount > 0 ? `–°–∫–∏–¥–∫–∞ –ñ–ö–¢: ${offer.gktDiscount}%` : ''}
							${offer.customsUnion ? '–î–ª—è —Å—Ç—Ä–∞–Ω –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—é–∑–∞' : ''}`

							const answer = await this.cozeService.generateResponse(
								context,
								text,
							)

							await ctx.reply(`ü§ñ ${answer}`, {
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
												callback_data: `view_offer_${state.offerId}`,
											},
										],
									],
								},
							})
						} catch (aiError) {
							console.error('–û—à–∏–±–∫–∞ AI:', aiError)
							await ctx.reply(
								'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.',
							)
						}

						// –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
						state.inputType = 'ai_question'
						this.offerStates.set(userId, state)
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –∑–∞–ø—Ä–æ—Å–∞:', error)
						await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
					}
					break

				case 'calculate_quantity':
					try {
						const calcQuantity = parseFloat(text)
						if (isNaN(calcQuantity) || calcQuantity <= 0) {
							await ctx.reply(
								'‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)',
							)
							return
						}

						if (!state.offerId) {
							await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
							return
						}

						state.quantity = calcQuantity

						// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
						const calcOffer = await this.prisma.offer.findUnique({
							where: { id: state.offerId },
						})

						if (!calcOffer) {
							await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')
							return
						}

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
						const isExceedingQuantity = calcQuantity > calcOffer.quantity

						// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
						const actualQuantity = isExceedingQuantity
							? calcOffer.quantity
							: calcQuantity
						let basePrice = 0
						if (calcOffer.priceType === 'PER_HEAD') {
							basePrice = calcOffer.pricePerHead * actualQuantity
						} else {
							basePrice = calcOffer.pricePerKg * actualQuantity
						}

						// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –ñ–ö–¢, –µ—Å–ª–∏ –µ—Å—Ç—å
						let finalPrice = basePrice
						if (calcOffer.gktDiscount > 0) {
							const discount = (basePrice * calcOffer.gktDiscount) / 100
							finalPrice = basePrice - discount
						}

						// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
						let message = `üí∞ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n\n`

						if (isExceedingQuantity) {
							message +=
								`‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ ${calcOffer.quantity} –≥–æ–ª–æ–≤.\n` +
								`–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.\n` +
								`–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ–≤—ã.\n\n`
						}

						message +=
							`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${actualQuantity} ${calcOffer.priceType === 'PER_HEAD' ? '–≥–æ–ª–æ–≤' : '–∫–≥'}\n` +
							`–¶–µ–Ω–∞ –∑–∞ ${calcOffer.priceType === 'PER_HEAD' ? '–≥–æ–ª–æ–≤—É' : '–∫–≥'}: ${calcOffer.priceType === 'PER_HEAD' ? calcOffer.pricePerHead : calcOffer.pricePerKg} ‚ÇΩ\n` +
							`–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${basePrice.toLocaleString('ru-RU')} ‚ÇΩ\n` +
							(calcOffer.gktDiscount > 0
								? `–°–∫–∏–¥–∫–∞ –ñ–ö–¢ (${calcOffer.gktDiscount}%): ${(basePrice - finalPrice).toLocaleString('ru-RU')} ‚ÇΩ\n`
								: '') +
							`\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${finalPrice.toLocaleString('ru-RU')} ‚ÇΩ</b>`

						const buttons = [
							[
								{
									text: 'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
									callback_data: `request_contacts_${state.offerId}`,
								},
							],
							[
								{
									text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
									callback_data: `view_offer_${state.offerId}`,
								},
							],
						]

						await ctx.reply(message, {
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: buttons,
							},
						})

						// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
						this.offerStates.delete(userId)
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error)
						await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
					}
					break

				case 'contact_request_comment':
					// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ)
					const commentText = text // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏

					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					const buyerUser = await this.prisma.user.findUnique({
						where: { telegramId: userId.toString() },
					})

					if (!buyerUser) {
						await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
						return
					}

					const contactOffer = await this.prisma.offer.findUnique({
						where: { id: state.offerId },
						include: {
							user: true,
						},
					})

					if (!contactOffer) {
						await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')
						return
					}

					// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
					const contactRequest = await this.prisma.contactRequest.create({
						data: {
							status: 'PENDING',
							comment: commentText, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
							offer: { connect: { id: contactOffer.id } },
							buyer: { connect: { id: buyerUser.id } },
							seller: { connect: { id: contactOffer.user.id } },
						},
					})

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
					const adminUsers = await this.prisma.user.findMany({
						where: { role: 'ADMIN' },
					})

					for (const admin of adminUsers) {
						if (admin.telegramId) {
							try {
								await this.telegramClient.sendMessage(
									admin.telegramId,
									`üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã!</b>
									
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyerUser.name} (${buyerUser.phone || '—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'})
–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${contactOffer.title}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${text || '–ù–µ —É–∫–∞–∑–∞–Ω'}

<b>–î–µ–π—Å—Ç–≤–∏—è</b>`,
									{
										parse_mode: 'HTML',
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
														callback_data: `approve_contact_${contactRequest.id}`,
													},
													{
														text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
														callback_data: `reject_contact_${contactRequest.id}`,
													},
												],
												[
													{
														text: 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
														callback_data: `admin_view_offer_${contactOffer.id}`,
													},
												],
											],
										},
									},
								)
							} catch (error) {
								console.error(
									`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.telegramId}:`,
									error,
								)
							}
						}
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					await ctx.reply(
						'üì§ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
											callback_data: `view_offer_${state.offerId}`,
										},
									],
								],
							},
						},
					)

					// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
					this.offerStates.delete(userId)
					break

				case 'waiting_for_comment':
					try {
						if (!state.contactRequestId) {
							await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
							return
						}

						// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
						await this.prisma.contactRequest.update({
							where: { id: state.contactRequestId },
							data: {
								comment: text, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –º–æ–¥–µ–ª—å
								status: 'PENDING',
							},
						})

						// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
						const admins = await this.prisma.user.findMany({
							where: { role: 'ADMIN' },
						})

						for (const admin of admins) {
							if (admin.telegramId) {
								await this.telegramClient.sendMessage(
									admin.telegramId,
									`üìù –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ #${state.contactRequestId}\n\n` +
										`–¢–µ–∫—Å—Ç: ${text}\n\n` +
										`–î–µ–π—Å—Ç–≤–∏—è:`,
									{
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
														callback_data: `approve_comment_${state.contactRequestId}`,
													},
													{
														text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
														callback_data: `reject_comment_${state.contactRequestId}`,
													},
												],
											],
										},
									},
								)
							}
						}

						await ctx.reply(
							'‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ' +
								'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.',
							{
								reply_markup: {
									inline_keyboard: [
										[{ text: '¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }],
									],
								},
							},
						)

						// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
						this.offerStates.delete(userId)
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error)
						await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
					}
					break
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞')
		}
	}

	async createOffer(ctx: Context, state: OfferState) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º enum
			const validCattleTypes = [
				'CALVES',
				'BULL_CALVES',
				'HEIFERS',
				'BREEDING_HEIFERS',
				'BULLS',
				'COWS',
			]
			if (!state.cattleType || !validCattleTypes.includes(state.cattleType)) {
				state.cattleType = 'CALVES'
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			let priceType = 'PER_HEAD'
			if (state.pricePerKg && state.pricePerKg > 0) {
				priceType = 'PER_KG'
			} else if (state.pricePerHead && state.pricePerHead > 0) {
				priceType = 'PER_HEAD'
			}

			// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const offerData = {
				user: { connect: { id: user.id } },
				title: state.title,
				description: state.description,
				quantity: state.quantity,
				age: state.age,
				weight: state.weight,
				breed: state.breed,
				status: 'PENDING' as const,
				mercuryNumber: state.mercuryNumber,
				contactPerson: state.contactPerson,
				contactPhone: state.contactPhone,
				cattleType: state.cattleType as CattleType,
				purpose: state.purpose || 'COMMERCIAL',
				priceType: priceType as PriceType, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤—ã—à–µ —Ç–∏–ø —Ü–µ–Ω—ã
				pricePerKg: state.pricePerKg || 0,
				pricePerHead: state.pricePerHead || 0,
				gktDiscount: state.gktDiscount || 0,
				region: state.region || state.location,
				location: state.region || '',
				fullAddress: state.fullAddress || state.region,
				customsUnion: state.customsUnion || false,
				videoUrl:
					state.videos && state.videos.length > 0 ? state.videos[0].url : '',
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
				price:
					priceType === 'PER_HEAD'
						? state.pricePerHead || 0
						: state.pricePerKg || 0,
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
			if (state.photos && state.photos.length > 0) {
				offerData['images'] = {
					create: state.photos.map(photo => ({
						url: photo.url,
						key: photo.key,
					})),
				}
			}

			console.log(
				'–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:',
				JSON.stringify(offerData, null, 2),
			)

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const offer = await this.prisma.offer.create({
				data: offerData,
				include: {
					images: true,
				},
			})

			this.offerStates.delete(userId)
			await ctx.reply(
				'‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.',
				{
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
			await this.notifyAdmins(offer)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
	private async notifyAdmins(offer: any) {
		const admins = await this.prisma.user.findMany({
			where: { role: 'ADMIN' },
		})

		for (const admin of admins) {
			if (admin.telegramId) {
				const message = `
üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}
üêÆ –¢–∏–ø: ${this.getCattleTypeText(offer.cattleType)}
üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${this.getPurposeText(offer.purpose)}
üí∞ –¶–µ–Ω–∞: ${
					offer.priceType === 'PER_HEAD'
						? `${offer.pricePerHead} —Ä—É–±/–≥–æ–ª–æ–≤—É`
						: `${offer.pricePerKg} —Ä—É–±/–∫–≥`
				}
${offer.gktDiscount > 0 ? `üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢: ${offer.gktDiscount}%\n` : ''}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
üêÆ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üìç –†–µ–≥–∏–æ–Ω: ${offer.region}
üìç –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: ${offer.fullAddress}
${offer.customsUnion ? '‚úÖ –°–æ—Å—Ç–æ–∏—Ç –≤ –†–µ–µ—Å—Ç—Ä–µ –¢–°\n' : '‚ùå –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –†–µ–µ—Å—Ç—Ä–µ –¢–°\n'}
${offer.videoUrl ? `üé• –í–∏–¥–µ–æ: ${offer.videoUrl}\n` : ''}

${offer.description}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify_offer_${offer.id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
`
				await this.telegramClient.sendMessage(admin.telegramId, message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
									callback_data: `verify_offer_${offer.id}`,
								},
								{
									text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
									callback_data: `reject_offer_${offer.id}`,
								},
							],
						],
					},
				})
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async verifyOffer(offerId: string) {
		const offer = await this.prisma.offer.update({
			where: { id: offerId },
			data: { status: 'APPROVED' as const },
			include: { user: true },
		})

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
		if (offer.user.telegramId) {
			await this.telegramClient.sendMessage(
				offer.user.telegramId,
				`‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${offer.title}" –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`,
			)
		}

		return offer
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async rejectOffer(offerId: string) {
		const offer = await this.prisma.offer.update({
			where: { id: offerId },
			data: { status: 'REJECTED' as const },
			include: { user: true },
		})

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
		if (offer.user.telegramId) {
			await this.telegramClient.sendMessage(
				offer.user.telegramId,
				`‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${offer.title}" –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`,
			)
		}

		return offer
	}

	async handlePhoto(ctx) {
		const userId = ctx.from.id
		const offerState = this.offerStates.get(userId)

		if (!offerState) {
			await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
			return
		}

		if (!offerState.photos) {
			offerState.photos = []
		}

		if (offerState.photos.length >= 10) {
			await ctx.reply(
				'‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10 —à—Ç)\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
				{
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				},
			)
			return
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
			const photo = ctx.message.photo[ctx.message.photo.length - 1]
			const file = await ctx.telegram.getFile(photo.file_id)

			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
			const response = await fetch(
				`https://api.telegram.org/file/bot${this.configService.get(
					'BOT_TOKEN',
				)}/${file.file_path}`,
			)
			const buffer = Buffer.from(await response.arrayBuffer())

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è S3
			const s3File: UploadedFile = {
				buffer,
				originalname: `photo_${Date.now()}.jpg`,
				mimetype: 'image/jpeg',
				fieldname: 'file',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(s3File)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –∫–ª—é—á —Ñ–∞–π–ª–∞
			offerState.photos.push({
				url: uploadedFile.url,
				key: uploadedFile.key,
			})

			this.updateOfferState(userId, offerState)

			if (offerState.photos.length === 1) {
				await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
			} else {
				await ctx.reply(
					`–§–æ—Ç–æ ${offerState.photos.length}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`,
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ')
		}
	}

	async handleMyOffers(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						images: true,
						matches: true,
					},
					orderBy: {
						createdAt: 'desc',
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				]),
			)
			return
		}

		const offersList = user.offers
			.map(
				(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
			)
			.join('\n\n')

		await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
			]),
		})
	}

	async handleBrowseOffers(ctx: Context, page = 1) {
		try {
			const offers = await this.prisma.offer.findMany({
				where: { status: 'APPROVED' },
				orderBy: [{ user: { status: 'desc' } }, { createdAt: 'desc' }],
				skip: (page - 1) * 10,
				take: 10,
				include: {
					user: true,
				},
			})

			if (!offers || offers.length === 0) {
				await ctx.reply('üîç –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
				return
			}

			const totalOffers = await this.prisma.offer.count({
				where: { status: 'APPROVED' },
			})

			const totalPages = Math.ceil(totalOffers / 10)

			// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const keyboard = [
				...offers.map(offer => {
					const statusIcon = {
						SUPER_PREMIUM: 'üíé',
						PREMIUM: '‚≠êÔ∏è',
						REGULAR: '',
					}[offer.user?.status || 'REGULAR']

					const cattleType =
						{
							CALVES: 'üêÆ –¢–µ–ª—è—Ç–∞',
							BULL_CALVES: 'üêÇ –ë—ã—á–∫–∏',
							HEIFERS: 'üêÑ –¢–µ–ª–∫–∏',
							BREEDING_HEIFERS: 'üêÑ –ù–µ—Ç–µ–ª–∏',
							BULLS: 'üêÇ –ë—ã–∫–∏',
							COWS: 'üêÑ –ö–æ—Ä–æ–≤—ã',
						}[offer.cattleType] || offer.cattleType

					const price =
						offer.priceType === 'PER_HEAD'
							? `${offer.pricePerHead?.toLocaleString()} ‚ÇΩ/–≥–æ–ª`
							: `${offer.pricePerKg?.toLocaleString()} ‚ÇΩ/–∫–≥`

					return [
						{
							text: `${statusIcon} ${cattleType} ${offer.breed || ''} - ${price}`,
							callback_data: `view_offer_${offer.id}`,
						},
					]
				}),
				[
					// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
					...(page > 1
						? [
								{
									text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
									callback_data: `browse_offers_${page - 1}`,
								},
							]
						: []),
					...(page < totalPages
						? [
								{
									text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
									callback_data: `browse_offers_${page + 1}`,
								},
							]
						: []),
				],
				[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
			]

			const message = `üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}):`

			// –ï—Å–ª–∏ —ç—Ç–æ callback query, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if ('callback_query' in ctx.update) {
				await ctx.editMessageText(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: keyboard,
					},
				})
			} else {
				// –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: keyboard,
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–∞
	private getRegionOnly(location: string): string {
		// –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–µ–≥–∏–æ–Ω)
		return location.split(' ')[0]
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	async handleContactRequest(ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			//@ts-ignore
			const callbackData = ctx.callbackQuery.data
			const offerId = callbackData.replace('request_contact_', '')

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					user: true,
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (offer.userId === user.id) {
				await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–≤–æ–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			const existingRequests = await this.prisma.contactRequest.findMany({
				where: {
					offerId: offerId,
					buyerId: user.id, // –ó–∞–º–µ–Ω–∏–ª–∏ requesterId –Ω–∞ buyerId
					status: 'PENDING',
				},
			})

			if (existingRequests.length > 0) {
				if (existingRequests[0].status === 'APPROVED') {
					// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
					await ctx.reply(
						`üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n` +
							`üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ${offer.contactPerson || offer.user.name}\n` +
							`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${offer.contactPhone || offer.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
							`üìß Email: ${offer.user.email}`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
											callback_data: `send_message_${offer.userId}`,
										},
									],
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥',
											callback_data: `view_offer_${offer.id}`,
										},
									],
								],
							},
						},
					)
				} else if (existingRequests[0].status === 'PENDING') {
					await ctx.reply(
						'‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥',
											callback_data: `view_offer_${offer.id}`,
										},
									],
								],
							},
						},
					)
				} else {
					await ctx.reply(
						'‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥',
											callback_data: `view_offer_${offer.id}`,
										},
									],
								],
							},
						},
					)
				}
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			const contactRequest = await this.prisma.contactRequest.create({
				data: {
					status: 'PENDING',
					offer: { connect: { id: offer.id } },
					buyer: { connect: { id: user.id } }, // –ó–∞–º–µ–Ω–∏–ª–∏ requester –Ω–∞ buyer
					seller: { connect: { id: offer.user.id } }, // –î–æ–±–∞–≤–∏–ª–∏ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
				},
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			const adminUsers = await this.prisma.user.findMany({
				where: { role: 'ADMIN' },
			})

			for (const admin of adminUsers) {
				if (admin.telegramId) {
					try {
						await this.telegramClient.sendMessage(
							admin.telegramId,
							`üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã!</b>
							
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${user.name} (${user.phone || '—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'})
–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${offer.title}

<b>–î–µ–π—Å—Ç–≤–∏—è</b>`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
												callback_data: `approve_contact_${contactRequest.id}`,
											},
											{
												text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
												callback_data: `reject_contact_${contactRequest.id}`,
											},
										],
										[
											{
												text: 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
												callback_data: `admin_view_offer_${offer.id}`,
											},
										],
									],
								},
							},
						)
					} catch (error) {
						console.error(
							`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.telegramId}:`,
							error,
						)
					}
				}
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			await ctx.reply(
				'üì§ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞.',
				{
					reply_markup: {
						inline_keyboard: [
							[
								Markup.button.callback(
									'¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
									`view_offer_${offer.id}`,
								),
								Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
							],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
		}
	}

	async handleViewOffer(ctx: Context, offerId: string) {
		try {
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					user: true,
					images: true,
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			const statusIcon = {
				SUPER_PREMIUM: 'üíé',
				PREMIUM: '‚≠êÔ∏è',
				REGULAR: '',
			}[offer.offerStatus || 'REGULAR']

			const message = `
üü¢ –ê–∫—Ç–∏–≤–Ω–æ

${statusIcon} <b>${offer.title}</b>

${offer.cattleType} - ${offer.breed}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${
				offer.priceType === 'PER_HEAD'
					? `${offer.pricePerHead?.toLocaleString()} ‚ÇΩ/–≥–æ–ª`
					: `${offer.pricePerKg?.toLocaleString()} ‚ÇΩ/–∫–≥`
			}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description}
${offer.gktDiscount ? `\nüéØ –°–∫–∏–¥–∫–∞ –ñ–ö–¢: ${offer.gktDiscount}%` : ''}
${offer.customsUnion ? '\nüåç –î–ª—è —Å—Ç—Ä–∞–Ω –¢–°' : ''}

üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(offer.createdAt).toLocaleDateString('ru-RU')}`

			// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
			if (offer.images && offer.images.length > 0) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
				const imageUrl = offer.images[0].url
				if (!imageUrl.startsWith('http')) {
					// –ï—Å–ª–∏ URL –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
					await ctx.reply(message, {
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
										callback_data: `request_contacts_${offer.id}`,
									},
								],
								[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'browse_offers_1' }],
							],
						},
					})
				} else {
					await ctx.replyWithPhoto(imageUrl, {
						caption: message,
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
										callback_data: `request_contacts_${offer.id}`,
									},
								],
								[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'browse_offers_1' }],
							],
						},
					})
				}
			} else {
				// –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
									callback_data: `request_contacts_${offer.id}`,
								},
							],
							[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'browse_offers_1' }],
						],
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	formatOfferText(offer) {
		return `
üêÆ <b>${offer.title}</b>

üêÑ –¢–∏–ø –ö–†–°: ${this.getCattleTypeText(offer.cattleType)}
üß¨ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${offer.purpose === 'BREEDING' ? '–ü–ª–µ–º–µ–Ω–Ω–æ–π' : '–¢–æ–≤–∞—Ä–Ω—ã–π'}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.

üí∞ –¶–µ–Ω–∞: ${
			offer.priceType === 'PER_HEAD'
				? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ/–≥–æ–ª–æ–≤—É`
				: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
		}
${offer.gktDiscount > 0 ? `üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢: ${offer.gktDiscount}%\n` : ''}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region}
üìù ${offer.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
	}

	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ö–†–°
	getCattleTypeText(cattleType) {
		const types = {
			CALVES: '–¢–µ–ª—è—Ç–∞',
			BULL_CALVES: '–ë—ã—á–∫–∏',
			HEIFERS: '–¢–µ–ª–∫–∏',
			BREEDING_HEIFERS: '–ù–µ—Ç–µ–ª–∏',
			BULLS: '–ë—ã–∫–∏',
			COWS: '–ö–æ—Ä–æ–≤—ã',
		}
		return types[cattleType] || cattleType
	}

	private getPurposeText(purpose: string): string {
		return purpose === 'COMMERCIAL' ? '–¢–æ–≤–∞—Ä–Ω—ã–π' : '–ü–ª–µ–º–µ–Ω–Ω–æ–π'
	}

	async showMyOffers(ctx: Context) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
				include: {
					offers: {
						include: {
							images: true,
							matches: true,
						},
					},
				},
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			if (!user.offers.length) {
				await ctx.reply(
					'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n' +
						'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
					{
						reply_markup: {
							inline_keyboard: [
								[{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' }],
								[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
							],
						},
					},
				)
				return
			}

			for (const offer of user.offers) {
				const statusBadge =
					offer.status === 'PENDING' ? '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n' : ''

				const message = `
${statusBadge}üìã ${offer.title}

üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${
					offer.priceType === 'PER_HEAD'
						? offer.pricePerHead > 0
							? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª`
							: `${offer.pricePerKg} ‚ÇΩ/–∫–≥`
						: `${offer.pricePerKg} ‚ÇΩ/–∫–≥`
				}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region}
üìä –ó–∞—è–≤–æ–∫: ${offer.matches.length}`

				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
									callback_data: `view_offer_${offer.id}`,
								},
							],
							[
								{
									text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
									callback_data: `edit_offer_${offer.id}`,
								},
								{
									text: '‚ùå –£–¥–∞–ª–∏—Ç—å',
									callback_data: `delete_offer_${offer.id}`,
								},
							],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	async handlePhotosDone(ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.inputType = 'title'
			this.updateOfferState(userId, state)
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async startOfferCreation(ctx: Context) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
			return
		}

		if (user.role !== 'SUPPLIER') {
			await ctx.reply(
				'‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏.\n\n' +
					'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
			)
			return
		}

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
		this.offerStates.set(userId, { photos: [], videos: [] })
		await ctx.reply(
			'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ö–†–° (–¥–æ 5 —Ñ–∞–π–ª–æ–≤)\n\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –°—ä–µ–º–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –§–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n' +
				'‚Ä¢ –í–∏–¥–µ–æ —Å –æ–±—Ö–æ–¥–æ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö\n\n' +
				'‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ 50MB',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ handleVideo, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ telegram.service.ts
	async handleVideo(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
			const totalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			if (totalFiles >= 5) {
				await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ
			const message = ctx.message
			if (!('video' in message)) {
				await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ')
				return
			}

			const video = message.video

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
			if (video.file_size > 50 * 1024 * 1024) {
				await ctx.reply(
					'‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.',
				)
				return
			}

			const fileId = video.file_id

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			const fileInfo = await ctx.telegram.getFile(fileId)
			const fileUrl = `https://api.telegram.org/file/bot${this.configService.get('TELEGRAM_BOT_TOKEN')}/${fileInfo.file_path}`

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
			const response = await fetch(fileUrl)
			const buffer = await response.buffer()

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
			const file: UploadedFile = {
				buffer,
				originalname: `video_${Date.now()}.mp4`,
				mimetype: 'video/mp4',
				fieldname: 'video',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(file)

			// –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			if (!state.videos) {
				state.videos = []
			}
			state.videos.push({
				url: uploadedFile.url,
			})

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			state.videoUrl = uploadedFile.url

			this.updateOfferState(userId, state)

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
			const newTotalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			const remainingFiles = 5 - newTotalFiles

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
			await ctx.reply(
				`‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (${newTotalFiles}/5)\n\n${
					remainingFiles > 0
						? `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ ${remainingFiles} –º–µ–¥–∏–∞—Ñ–∞–π–ª(–æ–≤) –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
						: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.'
				}`,
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'media_done' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
	async handleVideoUpload(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
			const totalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			if (totalFiles >= 5) {
				await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ
			const message = ctx.message
			if (!('video' in message)) {
				await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ')
				return
			}

			const video = message.video

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
			if (video.file_size > 50 * 1024 * 1024) {
				await ctx.reply(
					'‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.',
				)
				return
			}

			const fileId = video.file_id

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			const fileInfo = await ctx.telegram.getFile(fileId)
			const fileUrl = `https://api.telegram.org/file/bot${this.configService.get('TELEGRAM_BOT_TOKEN')}/${fileInfo.file_path}`

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
			const response = await fetch(fileUrl)
			const buffer = await response.buffer()

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
			const file: UploadedFile = {
				buffer,
				originalname: `video_${Date.now()}.mp4`,
				mimetype: 'video/mp4',
				fieldname: 'video',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(file)

			// –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			if (!state.videos) {
				state.videos = []
			}
			state.videos.push({
				url: uploadedFile.url,
			})

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			state.videoUrl = uploadedFile.url

			this.updateOfferState(userId, state)

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
			const newTotalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			const remainingFiles = 5 - newTotalFiles

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
			await ctx.reply(
				`‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (${newTotalFiles}/5)\n\n${
					remainingFiles > 0
						? `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ ${remainingFiles} –º–µ–¥–∏–∞—Ñ–∞–π–ª(–æ–≤) –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
						: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.'
				}`,
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'media_done' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async showOfferDetails(ctx: Context, offerId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					images: true,
					user: true,
					matches: true,
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const message = this.formatOfferText(offer)

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
			const buttons = []

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (offer.userId === user.id) {
				buttons.push([
					Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_offer_${offer.id}`),
					Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', `delete_offer_${offer.id}`),
				])

				// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
				if (offer.matches && offer.matches.length > 0) {
					buttons.push([
						Markup.button.callback(
							`üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (${offer.matches.length})`,
							`view_matches_${offer.id}`,
						),
					])
				}
			}
			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
			else if (user.role === 'BUYER') {
				buttons.push([
					Markup.button.callback(
						'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
						`request_contacts_${offer.id}`,
					),
					Markup.button.callback(
						'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
						`send_message_${offer.userId}`,
					),
				])

				buttons.push([
					Markup.button.callback(
						'üõí –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
						`create_request_for_${offer.id}`,
					),
				])
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
			buttons.push([
				Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º', 'my_ads'),
				Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
			])

			// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
			if (offer.images && offer.images.length > 0) {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
				const firstImage = offer.images[0]
				await ctx.replyWithPhoto(
					{ url: firstImage.url },
					{
						caption: message,
						parse_mode: 'HTML',
						reply_markup: { inline_keyboard: buttons },
					},
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
				for (let i = 1; i < offer.images.length; i++) {
					await ctx.replyWithPhoto({ url: offer.images[i].url })
				}

				// –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
				if (offer.videoUrl) {
					await ctx.replyWithVideo({ url: offer.videoUrl })
				}
			} else if (offer.videoUrl) {
				// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
				await ctx.replyWithVideo(
					{ url: offer.videoUrl },
					{
						caption: message,
						parse_mode: 'HTML',
						reply_markup: { inline_keyboard: buttons },
					},
				)
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∏ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: { inline_keyboard: buttons },
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
	async showOffersList(ctx: Context, page: number = 1) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			const pageSize = 5 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
			const skip = (page - 1) * pageSize

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
			const [offers, totalCount] = await Promise.all([
				this.prisma.offer.findMany({
					where: { status: 'APPROVED' as const },
					include: {
						images: true,
						user: true,
					},
					orderBy: { createdAt: 'desc' },
					skip,
					take: pageSize,
				}),
				this.prisma.offer.count({
					where: { status: 'APPROVED' as const },
				}),
			])

			if (offers.length === 0) {
				await ctx.reply('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			let message = `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (${page}/${Math.ceil(totalCount / pageSize)}):</b>\n\n`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const offerButtons = offers.map(offer => [
				Markup.button.callback(
					`${offer.title} - ${offer.price}‚ÇΩ - ${offer.location}`,
					`view_offer_${offer.id}`,
				),
			])

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
			const paginationButtons = []

			if (page > 1) {
				paginationButtons.push(
					Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', `browse_offers_${page - 1}`),
				)
			}

			if (page * pageSize < totalCount) {
				paginationButtons.push(
					Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', `browse_offers_${page + 1}`),
				)
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
			const navigationButtons = [Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]

			// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
			const keyboard = [
				...offerButtons,
				paginationButtons.length > 0 ? paginationButtons : [],
				navigationButtons,
			]

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: keyboard },
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	async canCreateOffer(ctx: Context): Promise<boolean> {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
				return false
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
			if (user.role !== 'SUPPLIER') {
				await ctx.reply(
					'‚ùå –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n' +
						'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
				)
				return false
			}

			return true
		} catch (error) {
			console.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
				error,
			)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤')
			return false
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async startEditOffer(ctx: Context, offerId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (offer.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é')
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			await ctx.reply('‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ',
								callback_data: `edit_offer_title_${offerId}`,
							},
							{
								text: 'üìã –û–ø–∏—Å–∞–Ω–∏–µ',
								callback_data: `edit_offer_description_${offerId}`,
							},
						],
						[
							{
								text: 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
								callback_data: `edit_offer_quantity_${offerId}`,
							},
							{ text: '‚öñÔ∏è –í–µ—Å', callback_data: `edit_offer_weight_${offerId}` },
						],
						[
							{
								text: 'üå± –í–æ–∑—Ä–∞—Å—Ç',
								callback_data: `edit_offer_age_${offerId}`,
							},
							{ text: 'üí∞ –¶–µ–Ω–∞', callback_data: `edit_offer_price_${offerId}` },
						],
						[
							{
								text: 'üåç –õ–æ–∫–∞—Ü–∏—è',
								callback_data: `edit_offer_location_${offerId}`,
							},
							{
								text: 'üêÆ –ü–æ—Ä–æ–¥–∞',
								callback_data: `edit_offer_breed_${offerId}`,
							},
						],
						[
							{
								text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
								callback_data: `view_offer_${offerId}`,
							},
							{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async confirmDeleteOffer(ctx: Context, offerId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (offer.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é')
				return
			}

			// –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
			// @ts-ignore
			if (offer.images && offer.images.length > 0) {
				// @ts-ignore

				for (const image of offer.images) {
					if (image.key) {
						await this.s3Service.deleteFile(image.key)
					}
				}
			}

			// –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			await this.prisma.offer.delete({
				where: { id: offerId },
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
			await ctx.reply('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_ads' },
							{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
	async showOfferMatches(ctx: Context, offerId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					matches: {
						include: {
							request: {
								include: {
									user: true,
								},
							},
						},
					},
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (offer.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é')
				return
			}

			if (!offer.matches || offer.matches.length === 0) {
				await ctx.reply('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', {
					reply_markup: {
						inline_keyboard: [
							[
								Markup.button.callback(
									'¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
									`view_offer_${offerId}`,
								),
								Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
							],
						],
					},
				})
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
			let message = `üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${offer.title}":</b>\n\n`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
			const matchButtons = offer.matches.map((match, index) => {
				const request = match.request
				const buyer = request.user

				return [
					Markup.button.callback(
						`${index + 1}. ${request.title} - ${buyer.name || buyer.email}`,
						`view_match_details_${match.id}`,
					),
				]
			})

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
			matchButtons.push([
				Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é', `view_offer_${offerId}`),
				Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
			])

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: matchButtons },
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	async showMatchDetails(ctx: Context, matchId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
			const match = await this.prisma.match.findUnique({
				where: { id: parseInt(matchId) },
				include: {
					request: {
						include: {
							user: true,
						},
					},
					offer: {
						include: {
							user: true,
						},
					},
				},
			})

			if (!match) {
				await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if (match.offer.userId !== user.id) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ')
				return
			}

			const request = match.request
			const buyer = request.user

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
			let message = `üîç <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</b>\n\n`
			message += `üêÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${request.title}\n`
			message += `üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${request.quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è <b>–í–µ—Å:</b> ${request.weight} –∫–≥\n`
			message += `üóìÔ∏è <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${request.age} –º–µ—Å.\n`
			message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${request.price} ‚ÇΩ/–≥–æ–ª\n`
			message += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${request.location}\n\n`

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
			message += `üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> ${buyer.name || buyer.email}\n`
			message += `üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${request.createdAt.toLocaleDateString()}\n\n`

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
			const buttons = [
				[
					Markup.button.callback(
						'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
						`send_message_${buyer.id}`,
					),
					Markup.button.callback('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', `show_contacts_${buyer.id}`),
				],
				[
					Markup.button.callback(
						'¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º',
						`view_matches_${match.offer.id}`,
					),
					Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
				],
			]

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: buttons },
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	async requestContacts(ctx: Context, offerId: string) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					user: true,
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (offer.userId === user.id) {
				await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–≤–æ–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			const existingRequest = await this.prisma.contactRequest.findFirst({
				where: {
					offerId,
					buyerId: user.id, // –ó–∞–º–µ–Ω–∏–ª–∏ requesterId –Ω–∞ buyerId
					status: 'PENDING',
				},
			})

			if (existingRequest) {
				if (existingRequest.status === 'APPROVED') {
					// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
					await this.profileService.showContacts(ctx, offer.user.id)
				} else if (existingRequest.status === 'PENDING') {
					await ctx.reply(
						'‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
					)
				} else {
					await ctx.reply('‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω')
				}
				return
			}

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			await this.prisma.contactRequest.create({
				data: {
					status: 'PENDING',
					offer: { connect: { id: offerId } },
					buyer: { connect: { id: user.id } }, // –ó–∞–º–µ–Ω–∏–ª–∏ requester –Ω–∞ buyer
					seller: { connect: { id: offer.user.id } }, // –î–æ–±–∞–≤–∏–ª–∏ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
				},
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (offer.user.telegramId) {
				await this.telegramClient.sendMessage(
					offer.user.telegramId,
					`üëã <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n` +
						`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name || user.email} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${offer.title}".\n\n` +
						`–í—ã –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
										callback_data: `approve_contact_request_${existingRequest.id}`,
									},
									{
										text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
										callback_data: `reject_contact_request_${existingRequest.id}`,
									},
								],
							],
						},
					},
				)
			}

			await ctx.reply(
				'‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n' +
					'–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å.',
				{
					reply_markup: {
						inline_keyboard: [
							[
								Markup.button.callback(
									'¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
									`view_offer_${offerId}`,
								),
								Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu'),
							],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
	async handleAskAI(ctx: Context, offerId: string) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI
			const aiState = {
				offerId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
				inputType: 'ai_question',
				photos: [],
				videos: [],
			}
			this.updateOfferState(userId, aiState)

			await ctx.reply(
				'ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –∏ AI –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ:',
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò
	async handleAIQuestion(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state || !state.aiOfferId) {
				await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
				return
			}

			const offerId = state.aiOfferId

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: {
					images: true,
					user: true,
				},
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				this.offerStates.delete(userId)
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
			const loadingMessage = await ctx.reply('ü§ñ –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...')

			// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const aiContext = `
–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ö–†–°:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}
- –¢–∏–ø –ö–†–°: ${this.getCattleTypeText(offer.cattleType)}
- –ü–æ—Ä–æ–¥–∞: ${offer.breed}
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${offer.purpose === 'BREEDING' ? '–ü–ª–µ–º–µ–Ω–Ω–æ–π' : '–¢–æ–≤–∞—Ä–Ω—ã–π'}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
- –í–µ—Å –æ–¥–Ω–æ–π –≥–æ–ª–æ–≤—ã: ${offer.weight} –∫–≥
- –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å—è—Ü–µ–≤
- –¶–µ–Ω–∞: ${offer.priceType === 'PER_HEAD' ? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª` : `${offer.pricePerKg} ‚ÇΩ/–∫–≥`}
- –†–µ–≥–∏–æ–Ω: ${offer.region}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
${offer.gktDiscount > 0 ? `- –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢: ${offer.gktDiscount}%` : ''}
${offer.customsUnion ? '- –í–≤–æ–∑ –∏–∑ —Å—Ç—Ä–∞–Ω –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—é–∑–∞: –î–∞' : '- –í–≤–æ–∑ –∏–∑ —Å—Ç—Ä–∞–Ω –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—é–∑–∞: –ù–µ—Ç'}`

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Coze
			const aiResponse = await this.cozeService.generateResponse(
				aiContext,
				text,
			)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
			await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
			await ctx.reply(`ü§ñ <b>–û—Ç–≤–µ—Ç –ò–ò:</b>\n\n${aiResponse}`, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
								callback_data: `view_offer_${offerId}`,
							},
						],
					],
				},
			})

			// –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
			state.inputType = 'ai_question'
			this.offerStates.set(userId, state)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
	async handleCalculatePrice(ctx: Context, offerId: string) {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
			const userId = ctx.from.id
			this.offerStates.set(userId, {
				photos: [],
				videos: [],
				inputType: 'calculate_quantity',
				offerId: offerId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º offerId –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			await ctx.reply(
				`üí∞ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n` +
					`–í –Ω–∞–ª–∏—á–∏–∏: ${offer.quantity} –≥–æ–ª–æ–≤\n` +
					`–í–µ—Å –æ–¥–Ω–æ–π –≥–æ–ª–æ–≤—ã: ${offer.weight} –∫–≥\n\n` +
					`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–æ—Ç 1 –¥–æ ${offer.quantity}):`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '¬´ –û—Ç–º–µ–Ω–∞',
									callback_data: `view_offer_${offerId}`,
								},
							],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	async handleCalculateQuantity(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state || !state.calculateOfferId) {
				await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
				return
			}

			const offerId = state.calculateOfferId

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				this.offerStates.delete(userId)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			const quantity = parseInt(text)
			if (isNaN(quantity) || quantity <= 0) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
				return
			}

			if (quantity > offer.quantity) {
				await ctx.reply(
					`‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (${quantity}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ (${offer.quantity}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${offer.quantity}.`,
				)
				return
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
			let totalPrice = 0
			let pricePerUnit = 0
			let totalWeight = 0

			if (offer.priceType === 'PER_HEAD') {
				pricePerUnit = offer.pricePerHead
				totalPrice = quantity * pricePerUnit
				totalWeight = quantity * offer.weight
			} else {
				pricePerUnit = offer.pricePerKg
				totalWeight = quantity * offer.weight
				totalPrice = totalWeight * pricePerUnit
			}

			// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –Ω–∞ –ñ–ö–¢, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
			let discountAmount = 0
			if (offer.gktDiscount > 0) {
				discountAmount = (totalPrice * offer.gktDiscount) / 100
				totalPrice -= discountAmount
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const formattedTotalPrice = totalPrice.toLocaleString('ru-RU')
			const formattedPricePerUnit = pricePerUnit.toLocaleString('ru-RU')
			const formattedDiscountAmount = discountAmount.toLocaleString('ru-RU')

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º
			let message = `üí∞ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n`
			message += `üêÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} –≥–æ–ª–æ–≤\n`
			message += `‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: ${totalWeight} –∫–≥\n\n`

			if (offer.priceType === 'PER_HEAD') {
				message += `üíµ –¶–µ–Ω–∞ –∑–∞ –≥–æ–ª–æ–≤—É: ${formattedPricePerUnit} ‚ÇΩ\n`
			} else {
				message += `üíµ –¶–µ–Ω–∞ –∑–∞ –∫–≥: ${formattedPricePerUnit} ‚ÇΩ\n`
			}

			if (offer.gktDiscount > 0) {
				message += `üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢ (${offer.gktDiscount}%): ${formattedDiscountAmount} ‚ÇΩ\n`
			}

			message += `\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formattedTotalPrice} ‚ÇΩ</b>`

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç',
								callback_data: `calculate_price_${offerId}`,
							},
						],
						[
							{
								text: 'üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
								callback_data: `request_contacts_${offerId}`,
							},
						],
						[
							{
								text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
								callback_data: `view_offer_${offerId}`,
							},
						],
					],
				},
			})

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			this.offerStates.delete(userId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
		}
	}

	async getOffersForBuyer(buyerId: string, requestId: number) {
		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		const request = await this.prisma.request.findUnique({
			where: { id: requestId },
		})

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'APPROVED' as const,
				quantity: { gte: request.quantity },
			},
			include: {
				user: true,
			},
			orderBy: [
				{ createdAt: 'desc' }, // –£–±–∏—Ä–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ–ª–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ —Å—Ö–µ–º–µ
			],
		})

		return offers
	}

	async handleOfferTitle(ctx: Context, title: string) {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply(
					'‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
					{
						reply_markup: {
							inline_keyboard: [
								[
									{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
									{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
								],
							],
						},
					},
				)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (user.role !== 'SUPPLIER') {
				await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
				return
			}

			const state = this.offerStates.get(userId)
			if (!state) {
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ',
				)
				return
			}

			state.title = title
			state.userId = user.id // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
			this.offerStates.set(userId, state)

			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è...
			await ctx.reply('üêÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ö–†–°:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üêÑ –ö–æ—Ä–æ–≤—ã', callback_data: 'offer_cattle_COWS' },
							{ text: 'üêÇ –ë—ã–∫–∏', callback_data: 'offer_cattle_BULLS' },
						],
						[
							{ text: 'üêÆ –¢–µ–ª–∫–∏', callback_data: 'offer_cattle_HEIFERS' },
							{
								text: 'üêÑ –ù–µ—Ç–µ–ª–∏',
								callback_data: 'offer_cattle_BREEDING_HEIFERS',
							},
						],
						[
							{ text: 'üêÆ –¢–µ–ª—è—Ç–∞', callback_data: 'offer_cattle_CALVES' },
							{ text: 'üêÇ –ë—ã—á–∫–∏', callback_data: 'offer_cattle_BULL_CALVES' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
		}
	}

	async handleMediaDone(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
			const totalFiles =
				(state.photos?.length || 0) + (state.videos?.length || 0)
			if (totalFiles === 0) {
				await ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ')
				return
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			state.inputType = 'title'
			this.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	async finalizeOffer(ctx: Context) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const offer = await this.prisma.offer.create({
				data: {
					title: state.title,
					description: state.description,
					cattleType: state.cattleType,
					breed: state.breed,
					purpose: state.purpose,
					priceType: state.priceType,
					pricePerHead: state.pricePerHead,
					pricePerKg: state.pricePerKg,
					quantity: state.quantity,
					weight: state.weight,
					age: state.age,
					region: state.region,
					location: state.location,
					gktDiscount: state.gktDiscount || 0,
					customsUnion: state.customsUnion || false,
					status: 'PENDING' as const, // –°—Ç–∞—Ç—É—Å "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
					userId: user.id,
				},
			})

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			if (state.photos && state.photos.length > 0) {
				for (const photo of state.photos) {
					await this.prisma.image.create({
						data: {
							url: photo.url,
							key: photo.key, // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
							offer: { connect: { id: offer.id } },
						},
					})
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
			if (state.videoUrl) {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–∏–¥–µ–æ –≤ –ø–æ–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
				await this.prisma.offer.update({
					where: { id: offer.id },
					data: { videoUrl: state.videoUrl },
				})
			}

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			this.offerStates.delete(userId)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			await ctx.reply(
				'‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n' +
					'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ. ' +
					'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–æ.',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	async showCattleTypeSelection(ctx: Context) {
		await ctx.reply('üêÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ö–†–°:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üêÑ –¢–µ–ª—è—Ç–∞', callback_data: 'cattle_type_CALVES' },
						{ text: 'üêÇ –ë—ã—á–∫–∏', callback_data: 'cattle_type_BULL_CALVES' },
					],
					[
						{ text: 'üêÑ –¢–µ–ª–∫–∏', callback_data: 'cattle_type_HEIFERS' },
						{
							text: 'üêÑ –ù–µ—Ç–µ–ª–∏',
							callback_data: 'cattle_type_BREEDING_HEIFERS',
						},
					],
					[
						{ text: 'üêÇ –ë—ã–∫–∏', callback_data: 'cattle_type_BULLS' },
						{ text: 'üêÑ –ö–æ—Ä–æ–≤—ã', callback_data: 'cattle_type_COWS' },
					],
				],
			},
		})
	}

	async handleCattleTypeSelection(ctx: Context, cattleType: CattleType) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.cattleType = cattleType
			state.inputType = 'breed'
			this.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–¥—É
			await ctx.reply('üêÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ö–†–°:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async handlePurposeSelection(ctx: Context, purpose: CattlePurpose) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.purpose = purpose
			state.inputType = 'price_type'
			this.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ü–µ–Ω—ã
			await ctx.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–Ω—ã:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üíµ –ó–∞ –≥–æ–ª–æ–≤—É', callback_data: 'price_type_PER_HEAD' },
							{ text: '‚öñÔ∏è –ó–∞ –∫–≥', callback_data: 'price_type_PER_KG' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async handlePriceTypeSelection(ctx: Context, priceType: PriceType) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.priceType = priceType
			state.inputType =
				priceType === 'PER_HEAD' ? 'price_per_head' : 'price_per_kg'
			this.updateOfferState(userId, state)

			await ctx.reply(
				priceType === 'PER_HEAD'
					? 'üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):'
					: '‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º (–≤ —Ä—É–±–ª—è—Ö):',
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Ü–µ–Ω—ã:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async handleCustomsUnionSelection(ctx: Context, isCustomsUnion: boolean) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.customsUnion = isCustomsUnion
			state.inputType = 'region' // –ú–µ–Ω—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞ –≤–º–µ—Å—Ç–æ gut_discount
			this.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω
			await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—é–∑–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async handleGutDiscountSelection(ctx: Context, hasDiscount: boolean) {
		try {
			const userId = ctx.from.id
			const state = this.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			if (hasDiscount) {
				state.inputType = 'gkt_discount'
				this.updateOfferState(userId, state)
				await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–∞ –ñ–ö–¢ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):')
			} else {
				state.gktDiscount = 0
				state.inputType = 'region'
				this.updateOfferState(userId, state)
				await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–∏–¥–∫–∏ –ñ–ö–¢:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	async handleMyAds(ctx: Context) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const offers = await this.prisma.offer.findMany({
				where: { userId: user.id },
				orderBy: { createdAt: 'desc' },
				include: { images: true },
			})

			if (offers.length === 0) {
				await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', {
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' }],
							[{ text: '¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				})
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			await ctx.reply('üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
								callback_data: 'create_ad',
							},
						],
					],
				},
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			for (const offer of offers) {
				const statusText = {
					PENDING: 'üü° –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
					APPROVED: 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ',
					REJECTED: 'üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
					ARCHIVED: '‚ö™Ô∏è –í –∞—Ä—Ö–∏–≤–µ',
				}[offer.status]

				const message = `
${statusText}

üìã <b>${offer.title}</b>
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üí∞ –¶–µ–Ω–∞: ${offer.priceType === 'PER_HEAD' ? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª` : `${offer.pricePerKg} ‚ÇΩ/–∫–≥`}
üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(offer.createdAt).toLocaleDateString('ru-RU')}`

				await ctx.reply(message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
									callback_data: `view_offer_${offer.id}`,
								},
							],
							[
								{
									text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
									callback_data: `edit_offer_${offer.id}`,
								},
								{
									text: '‚ùå –£–¥–∞–ª–∏—Ç—å',
									callback_data: `delete_offer_${offer.id}`,
								},
							],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	async getRecommendedOffers(userId: string) {
		const user = await this.prisma.user.findUnique({
			where: { id: userId },
		})

		// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'APPROVED',
			},
			orderBy: [
				{ user: { status: 'desc' } }, // –°–Ω–∞—á–∞–ª–∞ SUPER_PREMIUM, –ø–æ—Ç–æ–º PREMIUM
				{ aiScore: 'desc' }, // –ó–∞—Ç–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É AI
				{ createdAt: 'desc' }, // –ò –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
			],
			include: {
				user: true,
				images: true,
			},
			take: 10, // –ë–µ—Ä–µ–º —Ç–æ–ø-10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
		})

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const formattedOffers = offers.map(offer => {
			const statusIcon = {
				SUPER_PREMIUM: 'üíé', // –ê–ª–º–∞–∑ –¥–ª—è SUPER_PREMIUM
				PREMIUM: '‚≠êÔ∏è', // –ó–≤–µ–∑–¥–∞ –¥–ª—è PREMIUM
				REGULAR: '', // –ù–∏—á–µ–≥–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
			}[offer.user.status]

			return `${statusIcon} <b>${offer.title}</b>
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üí∞ –¶–µ–Ω–∞: ${offer.priceType === 'PER_HEAD' ? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª` : `${offer.pricePerKg} ‚ÇΩ/–∫–≥`}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${offer.gktDiscount ? `\nüéØ –°–∫–∏–¥–∫–∞ –ñ–ö–¢: ${offer.gktDiscount}%` : ''}
${offer.customsUnion ? '\nüåç –î–ª—è —Å—Ç—Ä–∞–Ω –¢–°' : ''}`
		})

		return formattedOffers
	}

	async getOffersList(ctx: Context, page = 1): Promise<OfferListResponse> {
		const userId = ctx.from.id
		const ITEMS_PER_PAGE = 10

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const lastRequest = await this.prisma.request.findFirst({
			where: { userId: userId.toString() },
			orderBy: { createdAt: 'desc' },
		})

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userContext = {
			region: lastRequest?.region?.toLowerCase() || '',
			price: lastRequest?.price || 0,
			cattleType: lastRequest?.cattleType || '',
			breed: lastRequest?.breed || '',
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –±–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
		let offers = await this.prisma.offer.findMany({
			where: {
				status: 'APPROVED',
			},
			include: {
				images: true,
				user: true,
			},
			orderBy: { createdAt: 'desc' },
		})

		// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
		offers = offers
			.filter(offer => {
				const offerRegion = (offer.region || '').toLowerCase()
				const requestRegion = userContext.region.toLowerCase()
				return !requestRegion || offerRegion.includes(requestRegion)
			})
			.sort((a, b) => {
				const priceA =
					a.priceType === 'PER_HEAD' ? a.pricePerHead : a.pricePerKg
				const priceB =
					b.priceType === 'PER_HEAD' ? b.pricePerHead : b.pricePerKg
				const diffA = Math.abs(priceA - userContext.price)
				const diffB = Math.abs(priceB - userContext.price)
				return diffA - diffB
			})

		// –ë–µ—Ä–µ–º —Ç–æ–ø-20 –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
		let offersForAnalysis = offers.slice(0, 20)
		if (offersForAnalysis.length < 20) {
			const remaining = await this.prisma.offer.findMany({
				where: {
					status: 'APPROVED',
					id: { notIn: offersForAnalysis.map(o => o.id) },
				},
				take: 20 - offersForAnalysis.length,
				orderBy: { createdAt: 'desc' },
				include: {
					// –î–æ–±–∞–≤–ª—è–µ–º include
					images: true,
					user: true,
				},
			})
			offersForAnalysis = [...offersForAnalysis, ...remaining]
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Coze
		const analysis = await this.cozeService.generateResponse(
			JSON.stringify({
				userContext,
				offers: offersForAnalysis.map(o => ({
					id: o.id,
					title: o.title,
					description: o.description,
					price: o.priceType === 'PER_HEAD' ? o.pricePerHead : o.pricePerKg,
					priceType: o.priceType,
					quantity: o.quantity,
					weight: o.weight,
					age: o.age,
					breed: o.breed,
					region: o.region,
					imagesCount: o.images.length,
					gktDiscount: o.gktDiscount,
					customsUnion: o.customsUnion,
				})),
			}),
			'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ø-10 —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
		)

		try {
			const result = JSON.parse(analysis)
			const analyzedOffers = await Promise.all(
				result.topOffers.map(async item => {
					const offer = await this.prisma.offer.findUnique({
						where: { id: item.id },
						include: { user: true },
					})
					return {
						...offer,
						user: {
							...offer.user,
							status: item.status,
						},
					}
				}),
			)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const formattedOffers = analyzedOffers.map(offer =>
				this.formatOffer(offer),
			)

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
			const regularOffers = await this.prisma.offer.findMany({
				where: {
					status: 'APPROVED',
					id: { notIn: analyzedOffers.map(o => o.id) },
				},
				orderBy: { createdAt: 'desc' },
				skip: (page - 1) * ITEMS_PER_PAGE,
				take: ITEMS_PER_PAGE,
				include: { user: true },
			})

			const totalRegularOffers = await this.prisma.offer.count({
				where: {
					status: 'APPROVED',
					id: { notIn: analyzedOffers.map(o => o.id) },
				},
			})

			return {
				topOffers: [...formattedOffers],
				hasMore: page * ITEMS_PER_PAGE < totalRegularOffers,
				currentPage: page,
				totalPages: Math.ceil(totalRegularOffers / ITEMS_PER_PAGE),
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error)
			return {
				topOffers: [],
				hasMore: false,
				currentPage: page,
				totalPages: 0,
			}
		}
	}

	private formatOffer(offer: any): string {
		const statusIcon = {
			SUPER_PREMIUM: 'üíé',
			PREMIUM: '‚≠êÔ∏è',
			REGULAR: '',
		}[offer.user?.status || 'REGULAR']

		return `${statusIcon} <b>${offer.title}</b>
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üí∞ –¶–µ–Ω–∞: ${offer.priceType === 'PER_HEAD' ? `${offer.pricePerHead} ‚ÇΩ/–≥–æ–ª` : `${offer.pricePerKg} ‚ÇΩ/–∫–≥`}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${offer.gktDiscount ? `\nüéØ –°–∫–∏–¥–∫–∞ –ñ–ö–¢: ${offer.gktDiscount}%` : ''}
${offer.customsUnion ? '\nüåç –î–ª—è —Å—Ç—Ä–∞–Ω –¢–°' : ''}`
	}
}
