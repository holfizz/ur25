// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import fetch from 'node-fetch'
import { Context, Markup } from 'telegraf'
import { S3Service } from '../../common/services/s3.service'
import { PrismaService } from '../../prisma.service'

interface OfferState {
	title?: string
	description?: string
	price?: number
	quantity?: number
	breed?: string
	age?: number
	weight?: number
	location?: string
	photos?: Array<{ url: string; key: string }>
}

interface UploadedFile {
	buffer: Buffer
	originalname: string
	mimetype: string
	fieldname: string
	encoding: string
	size: number
}

@Injectable()
export class TelegramOfferService {
	private offerStates: Map<number, OfferState> = new Map()

	constructor(
		private prisma: PrismaService,
		private s3Service: S3Service,
		private configService: ConfigService,
	) {}

	// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
	async handleCreateOffer(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
			return
		}

		if (user.role !== 'SUPPLIER') {
			await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
			return
		}

		this.offerStates.set(userId, { photos: [] })
		await ctx.reply(
			'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ö–†–°\n\n' +
				'‚ùóÔ∏è –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 10 —à—Ç—É–∫)\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –° —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤',
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'menu')],
				]),
			},
		)
	}

	async handleOfferState(ctx, userId: number, text: string): Promise<boolean> {
		const offerState = this.offerStates.get(userId)
		if (!offerState) return false

		if (!offerState.title && offerState.photos?.length > 0) {
			offerState.title = text
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.description && offerState.title) {
			offerState.description = text
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (–≤ —Ä—É–±–ª—è—Ö):', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.price && offerState.description) {
			const price = parseFloat(text)
			if (isNaN(price) || price <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', {
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				})
				return true
			}
			offerState.price = price
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.quantity && offerState.price) {
			const quantity = parseInt(text)
			if (isNaN(quantity) || quantity <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', {
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				})
				return true
			}
			offerState.quantity = quantity
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.breed && offerState.quantity) {
			offerState.breed = text
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ö–†–° –≤ –º–µ—Å—è—Ü–∞—Ö:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.age && offerState.breed) {
			const age = parseInt(text)
			if (isNaN(age) || age <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç', {
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				})
				return true
			}
			offerState.age = age
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ö–†–° –≤ –∫–≥:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.weight && offerState.age) {
			const weight = parseFloat(text)
			if (isNaN(weight) || weight <= 0) {
				await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å', {
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				})
				return true
			}
			offerState.weight = weight
			this.offerStates.set(userId, offerState)
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ö–†–°:', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
				]),
			})
			return true
		}

		if (!offerState.location && offerState.weight) {
			offerState.location = text

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			const offer = await this.prisma.offer.create({
				data: {
					title: offerState.title,
					description: offerState.description,
					price: offerState.price,
					quantity: offerState.quantity,
					breed: offerState.breed,
					age: offerState.age,
					weight: offerState.weight,
					location: offerState.location,
					user: {
						connect: {
							id: user.id,
						},
					},
					images: {
						create: offerState.photos.map(photo => ({
							url: photo.url,
							key: photo.key,
						})),
					},
				},
				include: {
					images: true,
				},
			})

			this.offerStates.delete(userId)

			await ctx.reply(
				`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!

üìù ${offer.title}
üí∞ –¶–µ–Ω–∞: ${offer.price} —Ä—É–±/–≥–æ–ª–æ–≤—É
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
üêÆ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üìç –õ–æ–∫–∞—Ü–∏—è: ${offer.location}

${offer.description}

–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:
${offer.images.map(img => img.url).join('\n')}`,
				{ parse_mode: 'HTML' },
			)
			return true
		}

		return false
	}

	async handlePhoto(ctx) {
		const userId = ctx.from.id
		const offerState = this.offerStates.get(userId)

		if (!offerState) {
			await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
			return
		}

		if (!offerState.photos) {
			offerState.photos = []
		}

		if (offerState.photos.length >= 10) {
			await ctx.reply(
				'‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10 —à—Ç)\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
				{
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				},
			)
			return
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
			const photo = ctx.message.photo[ctx.message.photo.length - 1]
			const file = await ctx.telegram.getFile(photo.file_id)

			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
			const response = await fetch(
				`https://api.telegram.org/file/bot${this.configService.get(
					'BOT_TOKEN',
				)}/${file.file_path}`,
			)
			const buffer = Buffer.from(await response.arrayBuffer())

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è S3
			const s3File: UploadedFile = {
				buffer,
				originalname: `photo_${Date.now()}.jpg`,
				mimetype: 'image/jpeg',
				fieldname: 'file',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(s3File)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –∫–ª—é—á —Ñ–∞–π–ª–∞
			offerState.photos.push({
				url: uploadedFile.url,
				key: uploadedFile.key,
			})

			this.offerStates.set(userId, offerState)

			if (offerState.photos.length === 1) {
				await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
			} else {
				await ctx.reply(
					`–§–æ—Ç–æ ${offerState.photos.length}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`,
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ')
		}
	}

	async handleMyOffers(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						images: true,
						matches: true,
					},
					orderBy: {
						createdAt: 'desc',
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				]),
			)
			return
		}

		const offersList = user.offers
			.map(
				(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
			)
			.join('\n\n')

		await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
			]),
		})
	}

	async handleBrowseOffers(ctx) {
		console.log('handleBrowseOffers –≤—ã–∑–≤–∞–Ω')
		const userId = ctx.from.id

		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
		console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)

		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'ACTIVE',
			},
			include: {
				user: true,
				images: true,
			},
			orderBy: {
				createdAt: 'desc',
			},
			take: 10,
		})
		console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', offers)

		if (!offers.length) {
			console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
			await ctx.reply('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π', {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')]]),
			})
			return
		}

		const buttons = offers.map(offer => {
			const buttonText = `${
				offer.title || offer.breed
			} - ${offer.price.toLocaleString('ru-RU')}‚ÇΩ (${offer.user.name})`
			const callbackData = `view_offer_${offer.id}`
			console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', { buttonText, callbackData })
			return [Markup.button.callback(buttonText, callbackData)]
		})

		buttons.push([Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')])
		console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', buttons)

		await ctx.reply(
			`üêÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –ö–†–°:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:`,
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			},
		)
	}

	async handleViewOffer(ctx) {
		console.log('handleViewOffer –≤—ã–∑–≤–∞–Ω')
		console.log('Callback query:', ctx.callbackQuery)

		const offerId = ctx.callbackQuery.data.split('_')[2]
		console.log('ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', offerId)

		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
		console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)

		try {
			const offer = await this.prisma.offer.findUnique({
				where: {
					id: offerId,
				},
				include: {
					user: true,
					images: true,
				},
			})
			console.log('–ù–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', offer)

			if (!offer) {
				console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ', {
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'browse_offers')],
					]),
				})
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
			if (offer.images && offer.images.length > 0) {
				console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', offer.images)
				try {
					const mediaGroup = offer.images.map(image => ({
						type: 'photo',
						media: image.url,
						caption:
							image === offer.images[0] ? `${offer.title || '–ö–†–°'}` : undefined,
					}))
					await ctx.replyWithMediaGroup(mediaGroup)
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error)
					await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
				}
			}

			const offerDetails = `
üì¶ <b>${offer.title || '–ö–†–°'}</b>

üêÆ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${offer.price.toLocaleString('ru-RU')} ‚ÇΩ/–≥–æ–ª
üìç –†–µ–≥–∏–æ–Ω: ${offer.location.split(' ')[0]}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
${offer.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`

			const buttons = [
				[
					Markup.button.callback(
						'üí¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
						`request_info_${offer.id}`,
					),
				],
				[
					Markup.button.callback(
						'ü§ù –ó–∞—è–≤–∏—Ç—å –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –∫—É–ø–∏—Ç—å',
						`express_interest_${offer.id}`,
					),
				],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'browse_offers')],
				[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
			]

			await ctx.reply(offerDetails, {
				parse_mode: 'HTML',
				...Markup.inlineKeyboard(buttons),
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', {
				reply_markup: Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'browse_offers')],
				]),
			})
		}
	}

	async showMyOffers(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						images: true,
						matches: true,
					},
					orderBy: {
						createdAt: 'desc',
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				]),
			)
			return
		}

		const offersList = user.offers
			.map(
				(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
			)
			.join('\n\n')

		await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
			]),
		})
	}
}
