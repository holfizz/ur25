// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { CattlePurpose, CattleType, PriceType } from '@prisma/client'
import fetch from 'node-fetch'
import { Context, Markup } from 'telegraf'
import {
	CallbackQuery,
	InputMediaPhoto,
} from 'telegraf/typings/core/types/typegram'
import { S3Service } from '../../common/services/s3.service'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

interface UploadedFile {
	buffer: Buffer
	originalname: string
	mimetype: string
	fieldname: string
	encoding: string
	size: number
	url?: string
	type?: string
}

interface OfferState {
	photos: Array<{ url: string; key: string }>
	videos: Array<{ url: string }>
	inputType?: string
	title?: string
	quantity?: number
	weight?: number
	age?: number
	price?: number
	location?: string
	description?: string
	mercuryNumber?: string
	contactPerson?: string
	contactPhone?: string
	breed?: string
	cattleType?: CattleType
	purpose?: CattlePurpose
	priceType?: PriceType
	pricePerKg?: number
	pricePerHead?: number
	gktDiscount?: number
	region?: string
	fullAddress?: string
	customsUnion?: boolean
	videoUrl?: string
	addingGktDiscount?: boolean
}

@Injectable()
export class TelegramOfferService {
	private offerStates: Map<number, OfferState> = new Map()

	constructor(
		private prisma: PrismaService,
		private s3Service: S3Service,
		private configService: ConfigService,
		private telegramClient: TelegramClient,
	) {}

	async handleCreateOffer(ctx: Context) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –ú–µ—Ä–∫—É—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user?.mercuryNumber) {
			// –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
			this.offerStates.set(userId, {
				photos: [],
				videos: [],
				inputType: 'mercury_number',
			})
			await ctx.reply(
				'üî¢ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π".\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä:',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury' }],
							[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
						],
					},
				},
			)
			return
		}

		// –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—Å—Ç—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		this.offerStates.set(userId, {
			photos: [],
			videos: [],
		})
		await ctx.reply(
			'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ –ö–†–° (–¥–æ 5 —Ñ–∞–π–ª–æ–≤)\n\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –°—ä–µ–º–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –§–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n' +
				'‚Ä¢ –í–∏–¥–µ–æ —Å –æ–±—Ö–æ–¥–æ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö\n\n' +
				'‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ 50MB',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	async handlePhotoUpload(ctx: Context, fileUrl: string, userId: number) {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || user.role !== 'SUPPLIER') {
			await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')
			return
		}

		const state = this.offerStates.get(userId)
		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		const totalFiles = state.photos.length + state.videos.length
		if (totalFiles >= 5) {
			await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)')
			return
		}

		try {
			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ S3
			const uploadResult = await this.s3Service.uploadFile({
				buffer: Buffer.from(await (await fetch(fileUrl)).arrayBuffer()),
				originalname: `photo_${Date.now()}.jpg`,
				mimetype: 'image/jpeg',
				fieldname: 'file',
				encoding: '7bit',
				size: 0,
			})

			state.photos.push({
				url: uploadResult.url,
				key: uploadResult.key,
			})

			this.offerStates.set(userId, state)

			await ctx.reply(
				`‚úÖ –§–æ—Ç–æ ${totalFiles + 1}/5 –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"`,
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
							[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
						],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/
		return phoneRegex.test(phone)
	}

	async handleOfferInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const state = this.offerStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		switch (state.inputType) {
			case 'mercury_number':
				await this.prisma.user.update({
					where: { telegramId: userId.toString() },
					data: { mercuryNumber: text },
				})
				await this.handleCreateOffer(ctx)
				break

			case 'title':
				state.title = text
				state.inputType = 'quantity'
				this.offerStates.set(userId, state)
				await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤:')
				break

			case 'quantity':
				const quantity = parseInt(text)
				if (isNaN(quantity) || quantity <= 0) {
					await ctx.reply(
						'‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)',
					)
					return
				}
				state.quantity = quantity
				state.inputType = 'weight'
				this.offerStates.set(userId, state)
				await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ–¥–Ω–æ–π –≥–æ–ª–æ–≤—ã (–∫–≥):')
				break

			case 'weight':
				const weight = parseFloat(text)
				if (isNaN(weight) || weight <= 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å')
					return
				}
				state.weight = weight
				state.inputType = 'age'
				this.offerStates.set(userId, state)
				await ctx.reply('üå± –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–º–µ—Å—è—Ü–µ–≤):')
				break

			case 'age':
				const age = parseInt(text)
				if (isNaN(age) || age <= 0) {
					await ctx.reply(
						'‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)',
					)
					return
				}
				state.age = age
				state.inputType = 'cattle_type'
				this.offerStates.set(userId, state)

				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –ö–†–° —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
				await ctx.reply('üêÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ö–†–°:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'ü•õ –¢–µ–ª—è—Ç–∞', callback_data: 'cattle_type_CALVES' },
								{ text: 'üêÇ –ë—ã—á–∫–∏', callback_data: 'cattle_type_BULL_CALVES' },
							],
							[
								{ text: 'üêÑ –¢–µ–ª–∫–∏', callback_data: 'cattle_type_HEIFERS' },
								{
									text: 'ÔøΩÔøΩ –ù–µ—Ç–µ–ª–∏',
									callback_data: 'cattle_type_BREEDING_HEIFERS',
								},
							],
							[
								{ text: 'ü¶¨ –ë—ã–∫–∏', callback_data: 'cattle_type_BULLS' },
								{ text: 'üêÑ –ö–æ—Ä–æ–≤—ã', callback_data: 'cattle_type_COWS' },
							],
						],
					},
				})
				break

			case 'breed':
				state.breed = text
				state.inputType = 'purpose'
				this.offerStates.set(userId, state)

				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
				await ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ö–†–°:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üè™ –¢–æ–≤–∞—Ä–Ω—ã–π', callback_data: 'purpose_COMMERCIAL' },
								{ text: 'üß¨ –ü–ª–µ–º–µ–Ω–Ω–æ–π', callback_data: 'purpose_BREEDING' },
							],
						],
					},
				})
				break

			case 'region':
				state.region = text
				state.inputType = 'description'
				this.offerStates.set(userId, state)
				await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')
				break

			case 'description':
				state.description = text
				await this.createOffer(ctx, state)
				break

			case 'price_per_head':
				const pricePerHead = parseFloat(text)
				if (isNaN(pricePerHead) || pricePerHead <= 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)')
					return
				}
				state.pricePerHead = pricePerHead
				state.inputType = 'ask_gkt_discount'
				this.offerStates.set(userId, state)

				// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–∫–∏–¥–∫—É –ñ–ö–¢ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
				await ctx.reply('–ë—É–¥–µ—Ç –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úÖ –î–∞', callback_data: 'gkt_yes' },
								{ text: '‚ùå –ù–µ—Ç', callback_data: 'gkt_no' },
							],
						],
					},
				})
				break

			case 'gkt_discount':
				const discount = parseFloat(text)
				if (isNaN(discount) || discount < 0 || discount > 100) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∫–∏–¥–∫—É (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)')
					return
				}
				state.gktDiscount = discount
				state.inputType = 'region'
				this.offerStates.set(userId, state)
				await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
				break

			case 'full_address':
				state.fullAddress = text
				state.inputType = 'customs_union'
				await ctx.reply('–°–æ—Å—Ç–æ–∏—Ç –ª–∏ –≤ –†–µ–µ—Å—Ç—Ä–µ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –°–æ—é–∑–∞?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '–î–∞', callback_data: 'customs_yes' },
								{ text: '–ù–µ—Ç', callback_data: 'customs_no' },
							],
						],
					},
				})
				break

			case 'video_url':
				state.videoUrl = text
				state.inputType = 'description'
				await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')
				break
		}

		this.offerStates.set(userId, state)
	}

	async createOffer(ctx: Context, state: OfferState) {
		try {
			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			const offer = await this.prisma.offer.create({
				data: {
					user: { connect: { id: user.id } },
					title: state.title,
					description: state.description,
					price: state.price,
					quantity: state.quantity,
					age: state.age,
					weight: state.weight,
					location: state.location,
					breed: state.breed,
					status: 'PENDING',
					mercuryNumber: state.mercuryNumber,
					contactPerson: state.contactPerson,
					contactPhone: state.contactPhone,
					cattleType: state.cattleType || CattleType.CALVES,
					purpose: state.purpose || CattlePurpose.COMMERCIAL,
					priceType: state.priceType || PriceType.PER_HEAD,
					pricePerKg: state.pricePerKg || 0,
					pricePerHead: state.pricePerHead || 0,
					gktDiscount: state.gktDiscount || 0,
					region: state.region || state.location,
					fullAddress: state.fullAddress || state.location,
					customsUnion: false,
					videoUrl: state.videoUrl,
					images: {
						create: state.photos.map(photo => ({
							url: photo.url,
							key: photo.key,
						})),
					},
				},
			})

			this.offerStates.delete(userId)
			await ctx.reply(
				'‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.',
				{
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
			await this.notifyAdmins(offer)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
	private async notifyAdmins(offer: any) {
		const admins = await this.prisma.user.findMany({
			where: { role: 'ADMIN' },
		})

		for (const admin of admins) {
			if (admin.telegramId) {
				const message = `
üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}
üêÆ –¢–∏–ø: ${this.getCattleTypeText(offer.cattleType)}
üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${this.getPurposeText(offer.purpose)}
üí∞ –¶–µ–Ω–∞: ${
					offer.priceType === 'PER_HEAD'
						? `${offer.pricePerHead} —Ä—É–±/–≥–æ–ª–æ–≤—É`
						: `${offer.pricePerKg} —Ä—É–±/–∫–≥`
				}
${offer.gktDiscount > 0 ? `üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢: ${offer.gktDiscount}%\n` : ''}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
üêÆ –ü–æ—Ä–æ–¥–∞: ${offer.breed}
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üìç –†–µ–≥–∏–æ–Ω: ${offer.region}
üìç –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: ${offer.fullAddress}
${offer.customsUnion ? '‚úÖ –°–æ—Å—Ç–æ–∏—Ç –≤ –†–µ–µ—Å—Ç—Ä–µ –¢–°\n' : '‚ùå –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –†–µ–µ—Å—Ç—Ä–µ –¢–°\n'}
${offer.videoUrl ? `üé• –í–∏–¥–µ–æ: ${offer.videoUrl}\n` : ''}

${offer.description}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify_offer_${offer.id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
`
				await this.telegramClient.sendMessage(admin.telegramId, message, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
									callback_data: `verify_offer_${offer.id}`,
								},
								{
									text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
									callback_data: `reject_offer_${offer.id}`,
								},
							],
						],
					},
				})
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async verifyOffer(offerId: string) {
		const offer = await this.prisma.offer.update({
			where: { id: offerId },
			data: { status: 'ACTIVE' },
			include: { user: true },
		})

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
		if (offer.user.telegramId) {
			await this.telegramClient.sendMessage(
				offer.user.telegramId,
				`‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${offer.title}" –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`,
			)
		}

		return offer
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	async rejectOffer(offerId: string) {
		const offer = await this.prisma.offer.update({
			where: { id: offerId },
			data: { status: 'REJECTED' },
			include: { user: true },
		})

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
		if (offer.user.telegramId) {
			await this.telegramClient.sendMessage(
				offer.user.telegramId,
				`‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${offer.title}" –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`,
			)
		}

		return offer
	}

	async handlePhoto(ctx) {
		const userId = ctx.from.id
		const offerState = this.offerStates.get(userId)

		if (!offerState) {
			await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
			return
		}

		if (!offerState.photos) {
			offerState.photos = []
		}

		if (offerState.photos.length >= 10) {
			await ctx.reply(
				'‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10 —à—Ç)\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
				{
					reply_markup: Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'create_offer')],
					]),
				},
			)
			return
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
			const photo = ctx.message.photo[ctx.message.photo.length - 1]
			const file = await ctx.telegram.getFile(photo.file_id)

			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
			const response = await fetch(
				`https://api.telegram.org/file/bot${this.configService.get(
					'BOT_TOKEN',
				)}/${file.file_path}`,
			)
			const buffer = Buffer.from(await response.arrayBuffer())

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è S3
			const s3File: UploadedFile = {
				buffer,
				originalname: `photo_${Date.now()}.jpg`,
				mimetype: 'image/jpeg',
				fieldname: 'file',
				encoding: '7bit',
				size: buffer.length,
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
			const uploadedFile = await this.s3Service.uploadFile(s3File)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –∫–ª—é—á —Ñ–∞–π–ª–∞
			offerState.photos.push({
				url: uploadedFile.url,
				key: uploadedFile.key,
			})

			this.offerStates.set(userId, offerState)

			if (offerState.photos.length === 1) {
				await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
			} else {
				await ctx.reply(
					`–§–æ—Ç–æ ${offerState.photos.length}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`,
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ')
		}
	}

	async handleMyOffers(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						images: true,
						matches: true,
					},
					orderBy: {
						createdAt: 'desc',
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				]),
			)
			return
		}

		const offersList = user.offers
			.map(
				(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.matches.length > 0
		? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
		: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...'
}`,
			)
			.join('\n\n')

		await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
			]),
		})
	}

	async handleBrowseOffers(ctx: Context, page: number = 1) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply('‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
						],
					],
				},
			})
			return
		}

		const ITEMS_PER_PAGE = 10
		const skip = (page - 1) * ITEMS_PER_PAGE

		const totalOffers = await this.prisma.offer.count({
			where: {
				status: 'ACTIVE',
			},
		})

		const totalPages = Math.ceil(totalOffers / ITEMS_PER_PAGE)

		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'ACTIVE',
			},
			include: {
				images: true,
			},
			orderBy: {
				createdAt: 'desc',
			},
			take: ITEMS_PER_PAGE,
			skip: skip,
		})

		if (!offers.length) {
			await ctx.reply('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π', {
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
				},
			})
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		const offerButtons = offers.map(offer => [
			{
				text: `${offer.price.toLocaleString('ru-RU')}‚ÇΩ - ${offer.breed || '–ö–†–°'}`,
				callback_data: `view_offer_${offer.id}`,
			},
		])

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		const paginationButtons = []
		if (totalPages > 1) {
			const buttons = []
			if (page > 1) {
				buttons.push({
					text: '¬´ –ü—Ä–µ–¥—ã–¥—É—â–∞—è',
					callback_data: `browse_offers_${page - 1}`,
				})
			}
			if (page < totalPages) {
				buttons.push({
					text: '–°–ª–µ–¥—É—é—â–∞—è ¬ª',
					callback_data: `browse_offers_${page + 1}`,
				})
			}
			if (buttons.length > 0) {
				paginationButtons.push(buttons)
			}
		}

		await ctx.reply('üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>', {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					...offerButtons,
					...paginationButtons,
					[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
				],
			},
		})
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–∞
	private getRegionOnly(location: string): string {
		// –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–µ–≥–∏–æ–Ω)
		return location.split(' ')[0]
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	async handleContactRequest(ctx: Context) {
		const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
		const offerId = callbackQuery.data.split('_')[2]
		const userId = ctx.from.id

		const [user, offer] = await Promise.all([
			this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			}),
			this.prisma.offer.findUnique({
				where: { id: offerId },
				include: { user: true },
			}),
		])

		await ctx.reply(
			'üì± –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `view_offer_${offerId}` }],
						[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
					],
				},
			},
		)

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
		const admins = await this.prisma.user.findMany({
			where: { role: 'ADMIN' },
		})

		const approveUrl = `${process.env.API_URL}/api/approve-contacts?offerId=${offerId}&userId=${user.id}`

		const adminMessage = `
üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã

–û—Ç –∫–æ–≥–æ:
üë§ ${user.name}
üìß ${user.email}
üì± ${user.phone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}

–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é:
üêÆ ${offer.breed || '–ö–†–°'}
üí∞ ${offer.price.toLocaleString('ru-RU')}‚ÇΩ/–≥–æ–ª
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
üìç ${this.getRegionOnly(offer.location)}

<a href="${approveUrl}">üîó –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º</a>`

		for (const admin of admins) {
			if (admin.telegramId) {
				await this.telegramClient.sendMessage(admin.telegramId, adminMessage, {
					parse_mode: 'HTML',
					disable_web_page_preview: true,
				})
			}
		}
	}

	async handleViewOffer(ctx: Context) {
		const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
		const offerId = callbackQuery.data.split('_')[2]

		const offer = await this.prisma.offer.findUnique({
			where: { id: offerId },
			include: { images: true },
		})

		if (!offer) {
			await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ', {
				reply_markup: {
					inline_keyboard: [
						[{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'browse_offers' }],
					],
				},
			})
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		if (offer.images && offer.images.length > 0) {
			const mediaGroup: InputMediaPhoto[] = offer.images.map(
				(image, index) => ({
					type: 'photo',
					media: image.url,
					caption: index === 0 ? `üêÆ <b>–ö–†–°</b>` : undefined,
					parse_mode: index === 0 ? 'HTML' : undefined,
				}),
			)

			await ctx.replyWithMediaGroup(mediaGroup)
		}

		const offerDetails = `
üêÆ <b>${this.getCattleTypeText(offer.cattleType)}</b>
${offer.breed ? `üêÑ –ü–æ—Ä–æ–¥–∞: ${offer.breed}\n` : ''}
üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${this.getPurposeText(offer.purpose)}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è –í–µ—Å: ${offer.weight} –∫–≥
üå± –í–æ–∑—Ä–∞—Å—Ç: ${offer.age} –º–µ—Å.
üí∞ –¶–µ–Ω–∞: ${
			offer.priceType === 'PER_HEAD'
				? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ/–≥–æ–ª`
				: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
		}
${offer.gktDiscount > 0 ? `üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –ñ–ö–¢: ${offer.gktDiscount}%\n` : ''}
üìç –†–µ–≥–∏–æ–Ω: ${offer.region}
${offer.videoUrl ? `üé• <a href="${offer.videoUrl}">–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n` : ''}
üìù ${offer.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`

		await ctx.reply(offerDetails, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
							callback_data: `request_contacts_${offer.id}`,
						},
					],
					[{ text: '¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'browse_offers' }],
					[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
				],
			},
		})
	}

	private getCattleTypeText(type: string): string {
		const types = {
			CALVES: '–¢–µ–ª—è—Ç–∞',
			BULL_CALVES: '–ë—ã—á–∫–∏',
			HEIFERS: '–¢–µ–ª–∫–∏',
			BREEDING_HEIFERS: '–ù–µ—Ç–µ–ª–∏',
			BULLS: '–ë—ã–∫–∏',
			COWS: '–ö–æ—Ä–æ–≤—ã',
		}
		return types[type] || type
	}

	private getPurposeText(purpose: string): string {
		return purpose === 'COMMERCIAL' ? '–¢–æ–≤–∞—Ä–Ω—ã–π' : '–ü–ª–µ–º–µ–Ω–Ω–æ–π'
	}

	async showMyOffers(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
			include: {
				offers: {
					include: {
						images: true,
						matches: true,
					},
					orderBy: {
						createdAt: 'desc',
					},
				},
			},
		})

		if (!user.offers.length) {
			await ctx.reply(
				'‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
				Markup.inlineKeyboard([
					[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				]),
			)
			return
		}

		const offersList = user.offers
			.map(
				(offer, index) => `
${index + 1}. <b>${offer.title}</b>
üî¢ ${offer.quantity} –≥–æ–ª–æ–≤
‚öñÔ∏è ${offer.weight} –∫–≥
üå± ${offer.age} –º–µ—Å.
üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª
üìç ${offer.location}
${
	offer.status === 'PENDING'
		? '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
		: offer.matches.length > 0
			? `‚úÖ –ó–∞—è–≤–æ–∫: ${offer.matches.length}`
			: ''
}`,
			)
			.join('\n\n')

		await ctx.reply(`üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n${offersList}`, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'create_offer')],
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'menu')],
			]),
		})
	}

	getOfferState(userId: number): OfferState | undefined {
		return this.offerStates.get(userId)
	}

	async handlePhotosDone(ctx: Context) {
		const userId = ctx.from.id
		const state = this.offerStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
		if (state.photos.length === 0 && state.videos.length === 0) {
			await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª')
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
		state.inputType = 'title'
		this.offerStates.set(userId, state)

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
		await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
	}

	async startOfferCreation(ctx: Context) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
			return
		}

		if (user.role !== 'SUPPLIER') {
			await ctx.reply(
				'‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏.\n\n' +
					'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
			)
			return
		}

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
		this.offerStates.set(userId, { photos: [], videos: [] })
		await ctx.reply(
			'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ö–†–° (–¥–æ 5 —Ñ–∞–π–ª–æ–≤)\n\n' +
				'‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n' +
				'‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n' +
				'‚Ä¢ –°—ä–µ–º–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n' +
				'‚Ä¢ –§–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n' +
				'‚Ä¢ –í–∏–¥–µ–æ —Å –æ–±—Ö–æ–¥–æ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö\n\n' +
				'‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ 50MB',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
	async handleVideo(ctx: Context) {
		const userId = ctx.from.id
		const state = this.offerStates.get(userId)
		//@ts-ignore
		const video = ctx.message.video

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		const totalFiles = state.photos.length + state.videos.length
		if (totalFiles >= 5) {
			await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)')
			return
		}

		if (video.file_size > 50 * 1024 * 1024) {
			await ctx.reply(
				'‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.',
			)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
		const fileLink = await ctx.telegram.getFile(video.file_id)
		const videoUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${fileLink.file_path}`

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
		state.videos.push({ url: videoUrl })
		this.offerStates.set(userId, state)

		await ctx.reply(
			`‚úÖ –í–∏–¥–µ–æ ${totalFiles + 1}/5 –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"`,
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'media_done' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	updateOfferState(userId: number, state: OfferState): void {
		this.offerStates.set(userId, state)
	}
}
