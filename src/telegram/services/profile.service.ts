// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
import { PrismaService } from '@/prisma.service'
import { Injectable } from '@nestjs/common'
import { BuyerType, Role } from '@prisma/client'
import { Context, Markup } from 'telegraf'

@Injectable()
export class TelegramProfileService {
	private editStates: Map<number, { field: 'phone' | 'address' }> = new Map()

	constructor(private prisma: PrismaService) {}

	getRoleEmoji(role: Role): string {
		const roleEmoji = {
			BUYER: 'üõí',
			SUPPLIER: 'üì¶',
			CARRIER: 'üöõ',
			ADMIN: 'üëë',
		}
		return roleEmoji[role] || 'üë§'
	}

	private getRoleText(role: Role): string {
		const roleTexts = {
			BUYER: '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å',
			SUPPLIER: '–ø–æ—Å—Ç–∞–≤—â–∏–∫',
			CARRIER: '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫',
			ADMIN: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
		}
		return roleTexts[role] || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
	}

	async handleProfile(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		const buyerTypes = {
			PRIVATE: 'üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
			FARM: 'üåæ –ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
			AGRICULTURAL: 'üè≠ –°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
			MEAT_FACTORY: 'ü•© –ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç',
			FEEDLOT: 'üêÆ –û—Ç–∫–æ—Ä–º–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
			GRANT_MEMBER: 'üìã –£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä–∞–Ω—Ç–∞',
		}

		const profileText = `
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}
üìß Email: ${user.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: ${user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${this.getRoleEmoji(user.role)} –†–æ–ª—å: ${this.getRoleText(user.role)}
${user.role === 'BUYER' ? `üè¢ –¢–∏–ø: ${buyerTypes[user.buyerType]}` : ''}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`

		const buttons = [
			[
				Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'edit_name'),
				Markup.button.callback('üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'edit_phone'),
			],
			[
				Markup.button.callback('üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', 'edit_address'),
				Markup.button.callback('üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'edit_password'),
			],
			[
				Markup.button.callback(
					`${user.notificationsEnabled ? 'üîï' : 'üîî'} ${
						user.notificationsEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'
					} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
					'toggle_notifications',
				),
			],
			[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
		]

		await ctx.reply(profileText, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}

	async handleEditCallback(ctx) {
		const action = ctx.callbackQuery.data.split('_')[1]
		const editMessages = {
			name: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:',
			phone: 'üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
			address: 'üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:',
			password: 'üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
		}

		await ctx.reply(editMessages[action], {
			reply_markup: Markup.inlineKeyboard([
				[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'profile')],
			]),
		})
	}

	private formatPhoneNumber(phone: string): string | null {
		// –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
		const digits = phone.replace(/\D/g, '')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –†–æ—Å—Å–∏–∏: 11 —Ü–∏—Ñ—Ä)
		if (digits.length !== 11) {
			return null
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –≤–∏–¥: +7 (XXX) XXX-XX-XX
		return `+7 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(
			7,
			9,
		)}-${digits.slice(9)}`
	}

	async handleEditPhone(ctx) {
		const userId = ctx.from.id
		this.editStates.set(userId, { field: 'phone' })
		await ctx.reply(
			'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n' +
				'üì± –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n' +
				'‚úÖ –ü—Ä–∏–º–µ—Ä: +79991234567',
		)
	}

	async handleEditAddress(ctx) {
		const userId = ctx.from.id
		this.editStates.set(userId, { field: 'address' })
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
	}

	async handleEditState(ctx, userId: number, text: string): Promise<boolean> {
		const editState = this.editStates.get(userId)
		if (!editState) return false

		try {
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (editState.field === 'phone') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
				const formattedPhone = this.formatPhoneNumber(text)
				if (!formattedPhone) {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n' +
							'üì± –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n' +
							'‚úÖ –ü—Ä–∏–º–µ—Ä: +79991234567\n\n' +
							'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return true
				}

				await this.prisma.user.update({
					where: { id: user.id },
					data: { phone: formattedPhone },
				})
				await ctx.reply('‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
			} else if (editState.field === 'address') {
				if (text.length < 5) {
					await ctx.reply('‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
					return true
				}

				await this.prisma.user.update({
					where: { id: user.id },
					data: { address: text },
				})
				await ctx.reply('‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
			}

			this.editStates.delete(userId)
			await this.handleProfile(ctx)
			return true
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
			this.editStates.delete(userId)
			return true
		}
	}

	async handleToggleNotifications(ctx) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		await this.prisma.user.update({
			where: { id: user.id },
			data: { notificationsEnabled: !user.notificationsEnabled },
		})

		await ctx.reply(
			`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${
				!user.notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
			}!\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å...`,
		)
		await this.handleProfile(ctx)
	}

	async showContacts(ctx, userId: string) {
		const user = await this.prisma.user.findUnique({
			where: { id: userId },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		const contactsText = `
üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã ${user.name}:</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${user.email}
üìç –ê–¥—Ä–µ—Å: ${user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${this.getRoleEmoji(user.role)} –†–æ–ª—å: ${this.getRoleText(user.role)}
${
	user.role === 'BUYER'
		? `üè¢ –¢–∏–ø: ${this.getBuyerTypeText(user.buyerType)}`
		: ''
}

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`

		await ctx.reply(contactsText, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([
				[Markup.button.callback('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', `chat_${user.id}`)],
				[
					Markup.button.callback(
						'¬´ –ù–∞–∑–∞–¥',
						ctx.callbackQuery.data.replace('contacts_', 'view_offer_'),
					),
				],
				[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
			]),
		})
	}

	private getBuyerTypeText(type: BuyerType): string {
		const types = {
			PRIVATE: '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
			FARM: '–ö–§–•',
			AGRICULTURAL: '–°/—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
			MEAT_FACTORY: '–ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç',
			FEEDLOT: '–û—Ç–∫–æ—Ä–º–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
			GRANT_MEMBER: '–£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä–∞–Ω—Ç–∞',
		}
		return types[type] || type
	}

	async showProfile(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return
		}

		const profileText = `
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.name}
üìß Email: ${user.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: ${user.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${this.getRoleEmoji(user.role)} –†–æ–ª—å: ${this.getRoleText(user.role)}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`

		const buttons = [
			[
				Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'edit_name'),
				Markup.button.callback('üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'edit_phone'),
			],
			[
				Markup.button.callback('üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', 'edit_address'),
				Markup.button.callback('üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'edit_password'),
			],
			[
				Markup.button.callback(
					`${user.notificationsEnabled ? 'üîï' : 'üîî'} ${
						user.notificationsEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'
					} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
					'toggle_notifications',
				),
			],
			[Markup.button.callback('¬´ –ú–µ–Ω—é', 'menu')],
		]

		await ctx.reply(profileText, {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard(buttons),
		})
	}
}
