import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { JwtService } from '@nestjs/jwt'
import { Role } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

@Injectable()
export class TelegramAuthService {
	public registrationStates: Map<number, any> = new Map()
	private loginStates: Map<number, { email?: string; password?: string }> =
		new Map()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
		private telegramClient: TelegramClient,
		private configService: ConfigService,
	) {}

	async handleTextInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const state = this.getRegistrationState(userId)

		if (!state) {
			console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ä–æ–ª—å
		if (!state.role) {
			await ctx.reply('‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'role_buyer' },
							{ text: 'üõ†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'role_supplier' },
							{ text: 'üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'role_carrier' },
						],
					],
				},
			})
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù
		if (state.inputType === 'inn') {
			const isValid = await this.checkInn(text)
			if (!isValid) {
				await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
				return
			}
			state.inn = text
			state.inputType = 'email' // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
			console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –ò–ù–ù: ${text}`)
			await ctx.reply('‚úÖ –ò–ù–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			this.registrationStates.set(userId, state)
			return
		}

		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
		if (state.inputType === 'email') {
			if (!(await this.validateEmail(text))) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
			const existingUser = await this.prisma.user.findUnique({
				where: { email: text },
			})

			if (existingUser) {
				await ctx.reply(
					'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:',
				)
				return
			}

			state.email = text
			state.inputType = 'password'
			await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
			this.registrationStates.set(userId, state)
			return
		}

		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
		if (state.inputType === 'password') {
			if (text.length < 6) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
				return
			}
			state.password = text
			state.inputType = 'confirmPassword'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
			return
		}

		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
		if (state.inputType === 'confirmPassword') {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:')
				state.inputType = 'password'
				state.password = null
				this.registrationStates.set(userId, state)
				return
			}
			state.inputType = 'name'
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
			return
		}

		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û
		if (state.inputType === 'name') {
			await this.handleNameInput(ctx, text, state)
			this.registrationStates.set(userId, state)
			return
		}

		if (state.inputType === 'phone') {
			await this.handlePhoneInput(ctx, text, state)
			this.registrationStates.set(userId, state)
			return
		}

		if (state.inputType === 'mercury') {
			await this.handleMercuryInput(ctx, text, state)
			this.registrationStates.set(userId, state)
			return
		}

		if (state.inputType === 'address') {
			await this.handleAddressInput(ctx, text, state)
			this.registrationStates.set(userId, state)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù/–û–ì–†–ù
		if (state.entityType === 'ORGANIZATION') {
			if (state.inputType === 'inn') {
				const isValid = await this.checkInn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
				state.inn = text
				state.inputType = 'email'
				await ctx.reply('‚úÖ –ò–ù–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			} else if (state.inputType === 'ogrn') {
				const isValid = await this.checkOgrn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –û–ì–†–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
				state.ogrn = text
				state.inputType = 'email'
				await ctx.reply('‚úÖ –û–ì–†–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			}
		}

		this.registrationStates.set(userId, state)
	}

	private async handleEmailInput(ctx: Context, text: string, state: any) {
		if (!(await this.validateEmail(text))) {
			await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
			return
		}
		state.email = text
		state.inputType = 'password'
		await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
	}

	private async handleNameInput(ctx: Context, text: string, state: any) {
		state.name = text
		state.inputType = 'phone'
		await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
	}

	private async handlePhoneInput(ctx: Context, text: string, state: any) {
		if (!this.validatePhone(text)) {
			await ctx.reply(
				'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
			)
			return
		}
		state.phone = text
		state.inputType = 'mercury'
		await ctx.reply(
			'üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à RU-–Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury' }],
					],
				},
			},
		)
	}

	private async handleMercuryInput(ctx: Context, text: string, state: any) {
		state.mercuryNumber = text
		state.inputType = 'address'
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
	}

	private async handleAddressInput(ctx: Context, text: string, state: any) {
		state.address = text
		await this.completeRegistration(ctx, state)
	}

	private async completeRegistration(ctx: Context, state: any) {
		const userId = ctx.from.id

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º email –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const existingUser = await this.prisma.user.findUnique({
				where: { email: state.email },
			})

			if (existingUser) {
				await ctx.reply(
					'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
				)
				this.registrationStates.delete(userId)
				return
			}

			const user = await this.prisma.user.create({
				data: {
					email: state.email,
					password: state.password,
					phone: state.phone,
					inn: state.inn,
					ogrn: state.ogrn,
					role: state.role.toUpperCase(),
					name: state.name,
					telegramId: userId.toString(),
					mercuryNumber: state.mercuryNumber,
				},
			})

			await ctx.reply(
				'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–¥–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.',
			)

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			this.registrationStates.delete(userId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
			await ctx.reply(
				'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			)
		}
	}

	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/
		return phoneRegex.test(phone)
	}

	private async checkInn(inn: string): Promise<boolean> {
		const apiKey = this.configService.get('DATANEWTON_API_KEY')
		const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&inn=${inn}`

		const response = await fetch(url)
		const data = await response.json()

		if (data.code === 1) {
			console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
			return false
		}

		if (data && data.company && data.company.company_names) {
			return data.company.status && data.company.status.active_status
		} else {
			console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
			return false
		}
	}

	private async checkOgrn(ogrn: string): Promise<boolean> {
		const apiKey = this.configService.get('DATANEWTON_API_KEY')
		const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&ogrn=${ogrn}`

		const response = await fetch(url)
		const data = await response.json()

		if (data.code === 1) {
			console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
			return false
		}

		if (data && data.company && data.company.company_names) {
			return data.company.status && data.company.status.active_status
		} else {
			console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
			return false
		}
	}

	public getRegistrationState(userId: number) {
		const state = this.registrationStates.get(userId)
		console.log(
			`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${JSON.stringify(state)}`,
		)
		return state
	}

	public setRole(userId: number, role: string) {
		const state = this.getRegistrationState(userId)
		state.role = role
		this.registrationStates.set(userId, state)
	}

	async handleRegister(ctx: Context) {
		const userId = ctx.from.id
		this.registrationStates.set(userId, {})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
	}

	async validateEmail(email: string): Promise<boolean> {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	async handleRegisterWithEmail(ctx: Context, email: string, role: Role) {
		const hashedPassword = await bcrypt.hash('defaultPassword', 10)
		const user = await this.prisma.user.create({
			data: {
				email,
				password: hashedPassword,
				role,
				name: email.split('@')[0],
			},
		})

		const token = this.jwtService.sign({ id: user.id })
		await ctx.reply(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
	}

	async startRegistration(userId: number) {
		this.registrationStates.set(userId, {
			inputType: null,
			userType: null,
			inn: null,
			ogrn: null,
			role: null,
			entityType: null,
			email: null,
			password: null,
			name: null,
			phone: null,
			mercuryNumber: null,
			address: null,
		})
	}

	public getLoginState(userId: number) {
		return this.loginStates.get(userId)
	}

	public setLoginState(
		userId: number,
		state: { email?: string; password?: string },
	) {
		this.loginStates.set(userId, state)
	}

	public deleteLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	async login(loginDto: { email: string; password: string }) {
		console.log('Login attempt:', loginDto)

		if (!loginDto.email || !loginDto.password) {
			return { success: false, message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
		}

		const user = await this.prisma.user.findUnique({
			where: { email: loginDto.email },
		})

		if (!user) {
			return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
		}

		const isPasswordValid = await bcrypt.compare(
			loginDto.password,
			user.password,
		)
		if (!isPasswordValid) {
			return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }
		}

		if (!user.isVerified) {
			return { success: false, message: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' }
		}

		return { success: true, user }
	}

	async handleLogout(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.getActiveUser(userId)
		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		await this.prisma.user.update({
			where: { id: user.id },
			data: { telegramId: null },
		})

		await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
		await ctx.reply(
			'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
		)
	}

	async getActiveUser(userId: number) {
		return this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
	}

	async handleRoleSelection(ctx: Context, role: string) {
		const userId = ctx.from.id
		const state = this.getRegistrationState(userId)
		state.role = role.toUpperCase()

		await ctx.reply('‚úÖ –†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', callback_data: 'type_organization' },
						{ text: 'üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ', callback_data: 'type_individual' },
					],
				],
			},
		})

		this.registrationStates.set(userId, state)
	}

	async handleUserTypeSelection(ctx: Context, userType: string) {
		const userId = ctx.from.id
		const state = this.getRegistrationState(userId)
		state.entityType = userType

		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù –∏–ª–∏ –û–ì–†–ù:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üìù –í–≤–µ—Å—Ç–∏ –ò–ù–ù', callback_data: 'input_inn' },
						{ text: 'üìã –í–≤–µ—Å—Ç–∏ –û–ì–†–ù', callback_data: 'input_ogrn' },
					],
				],
			},
		})

		this.registrationStates.set(userId, state)
	}

	public setBuyerType(userId: number, buyerType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.buyerType = buyerType
			this.registrationStates.set(userId, state)
		}
	}

	public async isUserLoggedIn(userId: number): Promise<boolean> {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
		return user !== null // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
	}

	public setEntityType(userId: number, entityType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.entityType = entityType
			this.registrationStates.set(userId, state)
		}
	}

	async handleStart(ctx: Context) {
		await ctx.reply(' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'role_buyer' },
						{ text: 'üõ†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'role_supplier' },
					],
					[{ text: 'üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'role_carrier' }],
				],
			},
		})
	}

	async handleRegisterCommand(ctx: Context) {
		const userId = ctx.from.id
		await this.startRegistration(userId)
		await this.handleStart(ctx)
	}

	async setInputType(ctx: Context, inputType: string) {
		const userId = ctx.from.id
		const state = this.getRegistrationState(userId)

		if (!state) return

		state.inputType = inputType
		this.registrationStates.set(userId, state)

		if (inputType === 'inn') {
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
		} else if (inputType === 'ogrn') {
			await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù:')
		}
	}

	async handleSkipMercury(ctx: Context) {
		const userId = ctx.from.id
		const state = this.getRegistrationState(userId)

		if (!state) {
			await ctx.reply(
				'‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
			)
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π" –ø—Ä–æ–ø—É—â–µ–Ω
		state.mercuryNumber = null // –ò–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
		state.inputType = 'address' // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
		this.registrationStates.set(userId, state)

		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
	}

	async handleLoginInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const loginState = this.loginStates.get(userId)
		console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { userId, text, loginState })

		if (!loginState) {
			await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –≤—Ö–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
			return
		}

		if (!loginState.email) {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
			if (!this.validateEmail(text)) {
				await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const user = await this.prisma.user.findUnique({
				where: { email: text },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email.')
				return
			}

			loginState.email = text
			this.loginStates.set(userId, loginState)
			await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
			return
		}

		if (!loginState.password) {
			try {
				const user = await this.prisma.user.findUnique({
					where: { email: loginState.email },
				})

				if (!user) {
					throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				}

				const isPasswordValid = await bcrypt.compare(text, user.password)
				if (!isPasswordValid) {
					throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				await this.prisma.user.update({
					where: { email: loginState.email },
					data: { telegramId: userId.toString() },
				})

				await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

				// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
				await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' },
								{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_ads' },
							],
							[
								{ text: 'üì± –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
								{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
							],
							[
								{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
								{ text: 'üö™ –í—ã–π—Ç–∏', callback_data: 'logout' },
							],
							[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				})
			} catch (error) {
				await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
			} finally {
				this.loginStates.delete(userId)
			}
		}
	}

	async initLoginState(userId: number) {
		console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
		this.loginStates.set(userId, {})
	}
}
