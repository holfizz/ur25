import { Injectable, NotFoundException } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { JwtService } from '@nestjs/jwt'
import { BuyerType, Role } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

interface RegistrationState {
	role: string | null
	userType: string | null
	entityType: string | null
	inputType: string | null
	email: string | null
	name: string | null
	phone: string | null
	address: string | null
	inn: string | null
	ogrn: string | null
	mercuryNumber: string | null
	password: string | null
	buyerType: string | null
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
	step?: string
	role?: 'BUYER' | 'SUPPLIER' | 'CARRIER'
	inputType?: string
	email?: string
	password?: string
	name?: string
	phone?: string
	address?: string
	buyerType?: string
}

interface LoginState {
	email: string | null
	password: string | null
	step: 'email' | 'password'
}

@Injectable()
export class TelegramAuthService {
	private registrationStates: Map<number, RegistrationState> = new Map()
	private loginStates: Map<number, LoginState> = new Map()
	private authStates = new Map<number, AuthState>()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
		private telegramClient: TelegramClient,
		private configService: ConfigService,
	) {}

	async handleTextInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù
		if (state.inputType === 'inn') {
			try {
				// –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
				if (text.length !== 10 && text.length !== 12) {
					await ctx.reply(
						'‚ùå –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù —á–µ—Ä–µ–∑ API Newton
				const isValid = await this.checkInn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}

				state.inn = text
				state.inputType = 'email'
				this.registrationStates.set(userId, state)
				await ctx.reply(
					'‚úÖ –ò–ù–ù –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
				)
				return
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù:', error)
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
				)
				return
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –û–ì–†–ù
		if (state.inputType === 'ogrn') {
			try {
				// –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –û–ì–†–ù
				if (text.length !== 13 && text.length !== 15) {
					await ctx.reply(
						'‚ùå –û–ì–†–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–ì–†–ù —á–µ—Ä–µ–∑ API Newton
				const isValid = await this.checkOgrn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –û–ì–†–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}

				state.ogrn = text
				state.inputType = 'email'
				this.registrationStates.set(userId, state)
				await ctx.reply(
					'‚úÖ –û–ì–†–ù –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
				)
				return
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù:', error)
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
				)
				return
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
		if (state.inputType === 'email') {
			if (!this.validateEmail(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return
			}

			state.email = text
			state.inputType = 'password'
			await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
			this.registrationStates.set(userId, state)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
		if (state.inputType === 'password') {
			if (text.length < 6) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
				return
			}

			state.password = text
			state.inputType = 'confirmPassword'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
		if (state.inputType === 'confirmPassword') {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:')
				state.inputType = 'password'
				state.password = null
				this.registrationStates.set(userId, state)
				return
			}
			state.inputType = 'name'
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
		if (state.inputType === 'name') {
			state.name = text
			state.inputType = 'phone'
			await ctx.reply(
				'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
			)
			this.registrationStates.set(userId, state)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		if (state.inputType === 'phone') {
			if (!this.validatePhone(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
				)
				return
			}

			state.phone = text
			state.inputType = 'mercury'
			await ctx.reply(
				'üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à RU-–Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury_reg' }],
							[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
						],
					},
				},
			)
			this.registrationStates.set(userId, state)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ú–µ—Ä–∫—É—Ä–∏–π
		if (state.inputType === 'mercury') {
			state.mercuryNumber = text
			state.inputType = 'address'
			await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:')
			this.registrationStates.set(userId, state)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
		if (state.inputType === 'address') {
			if (text.length < 5) {
				await ctx.reply('‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤')
				return
			}

			state.address = text

			try {
				// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
				const hashedPassword = await bcrypt.hash(state.password, 10)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ buyerType —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º BuyerType
				let buyerType = state.buyerType as BuyerType

				// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
				await this.prisma.user.create({
					data: {
						email: state.email,
						password: hashedPassword,
						name: state.name,
						phone: state.phone,
						address: state.address,
						role: state.role as Role,
						telegramId: userId.toString(),
						mercuryNumber: state.mercuryNumber,
						buyerType: buyerType,
						isVerified: false, // –í–∞–∂–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isVerified –≤ false
					},
				})

				// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
				this.registrationStates.delete(userId)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
				await ctx.reply(
					'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
						'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ' +
						'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
					{
						reply_markup: {
							inline_keyboard: [
								[{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' }],
								[{ text: '¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'start' }],
							],
						},
					},
				)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
				)
			}
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù/–û–ì–†–ù
		if (state.entityType === 'ORGANIZATION') {
			if (state.inputType === 'inn') {
				const isValid = await this.checkInn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
				state.inn = text
				state.inputType = 'email'
				await ctx.reply('‚úÖ –ò–ù–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			} else if (state.inputType === 'ogrn') {
				const isValid = await this.checkOgrn(text)
				if (!isValid) {
					await ctx.reply(
						'‚ùå –û–ì–†–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
				state.ogrn = text
				state.inputType = 'email'
				await ctx.reply('‚úÖ –û–ì–†–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			}
		}

		this.registrationStates.set(userId, state)
	}

	private async handleEmailInput(ctx: Context, text: string, state: any) {
		if (!(await this.validateEmail(text))) {
			await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
			return
		}
		state.email = text
		state.inputType = 'password'
		await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
	}

	private async handleNameInput(ctx: Context, text: string, state: any) {
		state.name = text
		state.inputType = 'phone'
		await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
	}

	private async handlePhoneInput(ctx: Context, text: string, state: any) {
		if (!this.validatePhone(text)) {
			await ctx.reply(
				'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
			)
			return
		}
		state.phone = text
		state.inputType = 'mercury'
		await ctx.reply(
			'üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à RU-–Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury_reg' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	private async handleMercuryInput(ctx: Context, text: string, state: any) {
		state.mercuryNumber = text
		state.inputType = 'address'
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
	}

	private async handleAddressInput(ctx: Context, text: string, state: any) {
		state.address = text
		await this.completeRegistration(ctx, state)
	}

	private async completeRegistration(ctx: Context, state: any) {
		const userId = ctx.from.id

		try {
			// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
			const hashedPassword = await bcrypt.hash(state.password, 10)

			// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
			const user = await this.prisma.user.create({
				data: {
					email: state.email,
					password: hashedPassword,
					name: state.name,
					phone: state.phone,
					address: state.address,
					role: state.role.toUpperCase(),
					telegramId: userId.toString(),
					mercuryNumber: state.mercuryNumber,
					buyerType: state.buyerType as BuyerType,
					isVerified: false,
				},
			})

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			this.registrationStates.delete(userId)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			await ctx.reply(
				'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
					'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ' +
					'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' }],
							[{ text: '¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'start' }],
						],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			await this.notifyAdminsAboutRegistration(user)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	}

	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/
		return phoneRegex.test(phone)
	}

	private async checkInn(inn: string): Promise<boolean> {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù
			const innRegex = /^\d{10}$|^\d{12}$/
			if (!innRegex.test(inn)) {
				return false
			}

			const apiKey = this.configService.get('DATANEWTON_API_KEY')
			const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&inn=${inn}`

			const response = await fetch(url)
			const data = await response.json()

			if (data.code === 1) {
				console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
				return false
			}

			if (data && data.company && data.company.company_names) {
				return data.company.status && data.company.status.active_status
			} else {
				console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
				return false
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù —á–µ—Ä–µ–∑ API:', error)
			throw error
		}
	}

	private async checkOgrn(ogrn: string): Promise<boolean> {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –û–ì–†–ù
			const ogrnRegex = /^\d{13}$|^\d{15}$/
			if (!ogrnRegex.test(ogrn)) {
				return false
			}

			const apiKey = this.configService.get('DATANEWTON_API_KEY')
			const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&ogrn=${ogrn}`

			const response = await fetch(url)
			const data = await response.json()

			if (data.code === 1) {
				console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
				return false
			}

			if (data && data.company && data.company.company_names) {
				return data.company.status && data.company.status.active_status
			} else {
				console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
				return false
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù —á–µ—Ä–µ–∑ API:', error)
			throw error
		}
	}

	public getRegistrationState(userId: number) {
		const state = this.registrationStates.get(userId)
		console.log(
			`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${JSON.stringify(state)}`,
		)
		return state
	}

	public setRole(userId: number, role: string) {
		const state = this.getRegistrationState(userId)
		state.role = role
		this.registrationStates.set(userId, state)
	}

	async handleRegister(ctx: Context) {
		const userId = ctx.from.id
		this.registrationStates.set(userId, {
			role: null,
			userType: null,
			entityType: null,
			inputType: null,
			email: null,
			name: null,
			phone: null,
			address: null,
			inn: null,
			ogrn: null,
			mercuryNumber: null,
			password: null,
			buyerType: null,
		})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
	}

	async validateEmail(email: string): Promise<boolean> {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	async handleRegisterWithEmail(ctx: Context, email: string, role: Role) {
		const hashedPassword = await bcrypt.hash('defaultPassword', 10)
		const user = await this.prisma.user.create({
			data: {
				email,
				password: hashedPassword,
				role,
				name: email.split('@')[0],
			},
		})

		const token = this.jwtService.sign({ id: user.id })
		await ctx.reply(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
	}

	async startRegistration(userId: number) {
		const initialState: AuthState = {
			step: 'role',
			inputType: null,
			email: null,
			password: null,
			name: null,
			phone: null,
			address: null,
			role: null,
			buyerType: null,
		}
		this.authStates.set(userId, initialState)
		return initialState
	}

	public getLoginState(userId: number) {
		return this.loginStates.get(userId)
	}

	public setLoginState(userId: number, state: Partial<LoginState>) {
		const currentState = this.loginStates.get(userId) || {
			email: null,
			password: null,
			step: 'email',
		}

		this.loginStates.set(userId, {
			...currentState,
			...state,
		})
	}

	public deleteLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	async login(loginDto: { email: string; password: string }) {
		console.log('Login attempt:', loginDto)

		if (!loginDto.email || !loginDto.password) {
			return { success: false, message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
		}

		const user = await this.prisma.user.findUnique({
			where: { email: loginDto.email },
		})

		if (!user) {
			return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
		}

		const isPasswordValid = await bcrypt.compare(
			loginDto.password,
			user.password,
		)
		if (!isPasswordValid) {
			return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }
		}

		if (!user.isVerified) {
			return { success: false, message: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' }
		}

		return { success: true, user }
	}

	async handleLogout(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.getActiveUser(userId)
		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		await this.prisma.user.update({
			where: { id: user.id },
			data: { telegramId: null },
		})

		await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
		await ctx.reply(
			'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
		)
	}

	async getActiveUser(userId: number) {
		return this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
	}

	async handleRoleSelection(ctx: Context, role: string) {
		try {
			const userId = ctx.from.id

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
			if (!this.registrationStates.has(userId)) {
				this.registrationStates.set(userId, {
					role: null,
					userType: null,
					entityType: null,
					inputType: null,
					email: null,
					name: null,
					phone: null,
					address: null,
					inn: null,
					ogrn: null,
					mercuryNumber: null,
					password: null,
					buyerType: null,
				})
			}

			const state = this.registrationStates.get(userId)
			console.log('Current state:', state) // –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
			let userRole: 'BUYER' | 'SUPPLIER' | 'CARRIER'
			switch (role.toUpperCase()) {
				case 'BUYER':
					userRole = 'BUYER'
					break
				case 'SUPPLIER':
					userRole = 'SUPPLIER'
					break
				case 'CARRIER':
					userRole = 'CARRIER'
					break
				default:
					await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å')
					return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
			state.role = userRole
			this.registrationStates.set(userId, state)
			console.log('Updated state:', this.registrationStates.get(userId)) // –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
			if (userRole === 'BUYER') {
				await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ', callback_data: 'user_type_PRIVATE' },
								{ text: 'üè° –ö–§–•', callback_data: 'user_type_FARM' },
							],
							[
								{
									text: 'üè≠ –°/—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
									callback_data: 'user_type_AGRICULTURAL',
								},
								{
									text: 'üè¢ –ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç',
									callback_data: 'user_type_MEAT_FACTORY',
								},
							],
							[
								{
									text: 'üêÑ –û—Ç–∫–æ—Ä–º–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
									callback_data: 'user_type_FEEDLOT',
								},
								{
									text: 'üìã –£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä–∞–Ω—Ç–∞',
									callback_data: 'user_type_GRANT_MEMBER',
								},
							],
						],
					},
				})
			} else if (userRole === 'SUPPLIER') {
				await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ',
									callback_data: 'supplier_type_individual',
								},
								{
									text: 'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
									callback_data: 'supplier_type_organization',
								},
							],
						],
					},
				})
			} else {
				// –î–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
				state.inputType = 'email'
				this.registrationStates.set(userId, state)
				await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏')
		}
	}

	// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
	async handleSupplierTypeSelection(ctx: Context, type: string) {
		try {
			const userId = ctx.from.id
			const state = this.registrationStates.get(userId)

			if (!state) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.entityType = type
			this.registrationStates.set(userId, state)

			if (type === 'INDIVIDUAL') {
				// –î–ª—è —Ñ–∏–∑.–ª–∏—Ü —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ò–ù–ù
				state.inputType = 'inn'
				await ctx.reply(
					'üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:\n\n' +
						'–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä\n' +
						'–ü—Ä–∏–º–µ—Ä: 500100732259',
				)
			} else if (type === 'ORGANIZATION') {
				// –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–∞–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É –ò–ù–ù –∏ –û–ì–†–ù
				await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìù –ò–ù–ù', callback_data: 'input_inn' },
								{ text: 'üìã –û–ì–†–ù', callback_data: 'input_ogrn' },
							],
						],
					},
				})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	public setBuyerType(userId: number, buyerType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.buyerType = buyerType
			this.registrationStates.set(userId, state)
		}
	}

	public async isUserLoggedIn(userId: number): Promise<boolean> {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
		return user !== null // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
	}

	public setEntityType(userId: number, entityType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.entityType = entityType
			this.registrationStates.set(userId, state)
		}
	}

	async handleLoginInput(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const loginState = this.getLoginState(userId)

			if (!loginState) return

			if (loginState.step === 'email') {
				if (!this.validateEmail(text)) {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
					)
					return
				}

				const user = await this.prisma.user.findUnique({
					where: { email: text },
				})

				if (!user) {
					await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω')
					this.clearLoginState(userId)
					return
				}

				this.setLoginState(userId, { email: text, step: 'password' })
				await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
				return
			}

			if (loginState.step === 'password') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
				const user = await this.prisma.user.findUnique({
					where: { email: loginState.email },
				})

				if (!user) {
					await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
					this.clearLoginState(userId)
					return
				}

				const isPasswordValid = await bcrypt.compare(text, user.password)

				if (!isPasswordValid) {
					await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
					this.clearLoginState(userId)
					return
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º telegramId, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
				const existingUser = await this.prisma.user.findUnique({
					where: { telegramId: userId.toString() },
				})

				if (existingUser && existingUser.id !== user.id) {
					// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
					await this.prisma.user.update({
						where: { id: existingUser.id },
						data: { telegramId: null },
					})
				}

				// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π telegramId
				await this.prisma.user.update({
					where: { id: user.id },
					data: { telegramId: userId.toString() },
				})

				await this.showMainMenu(ctx) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
				this.clearLoginState(userId)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
			this.clearLoginState(ctx.from.id)
		}
	}

	async initLoginState(userId: number) {
		console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
		this.loginStates.set(userId, {
			email: null,
			password: null,
			step: 'email', // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–≤–æ–¥–∞ email
		})
	}

	async notifyAdminsAboutRegistration(registrationRequest: any) {
		// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
	}

	async approveRegistration(registrationId: string) {
		const registration = await this.prisma.registrationRequest.findUnique({
			where: { id: registrationId },
		})

		if (!registration) {
			throw new NotFoundException('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
		}

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –∏–∑ –∑–∞—è–≤–∫–∏
		const user = await this.prisma.user.create({
			data: {
				email: registration.email,
				name: registration.name,
				phone: registration.phone,
				address: registration.address,
				password: registration.password, // –ü–∞—Ä–æ–ª—å —É–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
				role: registration.role,
				isVerified: true,
				inn: registration.inn,
				ogrn: registration.ogrn,
				mercuryNumber: registration.mercuryNumber,
			},
		})

		// –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
		await this.prisma.registrationRequest.update({
			where: { id: registrationId },
			data: { isProcessed: true },
		})

		return user
	}

	async setInputType(ctx: Context, inputType: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.inputType = inputType
		this.registrationStates.set(userId, state)

		if (inputType === 'inn') {
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
		} else if (inputType === 'ogrn') {
			await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù:')
		}
	}

	async handleSkipMercury(ctx: Context) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä –ú–µ—Ä–∫—É—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		state.mercuryNumber = null
		state.inputType = 'address'
		this.registrationStates.set(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:')
	}

	getAuthState(userId: number): AuthState | undefined {
		return this.authStates.get(userId)
	}

	async handleAuthInput(ctx: Context, text: string) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞
		const loginState = this.loginStates.get(userId)
		if (loginState) {
			await this.handleLoginInput(ctx, text)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		const registerState = this.registrationStates.get(userId)
		if (registerState) {
			await this.handleTextInput(ctx, text)
			return
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		await this.handleTextInput(ctx, text)
	}

	async updateAuthState(userId: number, state: AuthState): Promise<void> {
		this.authStates.set(userId, state)
	}

	async handleUserTypeSelection(ctx: Context, userType: string) {
		const userId = ctx.from.id
		const state = await this.getAuthState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state.buyerType = userType
		await this.updateAuthState(userId, state)

		// –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
		state.inputType = 'email'
		await this.updateAuthState(userId, state)
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
	}

	// –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	async updateRegistrationState(userId: number, state: RegistrationState) {
		this.registrationStates.set(userId, state)
	}

	private clearLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	private async showMainMenu(ctx: Context) {
		await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', {
			reply_markup: {
				inline_keyboard: [[{ text: 'üì± –ú–µ–Ω—é', callback_data: 'menu' }]],
			},
		})
	}
}
