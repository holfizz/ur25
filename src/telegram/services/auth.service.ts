import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { JwtService } from '@nestjs/jwt'
import { Role } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { Message } from 'telegraf/types'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

@Injectable()
export class TelegramAuthService {
	private registrationStates: Map<number, any> = new Map()
	private loginStates: Map<number, { email?: string; password?: string }> =
		new Map()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
		private telegramClient: TelegramClient,
		private configService: ConfigService,
	) {}

	async handleRegistration(
		ctx: Context,
		userId: number,
		text: string,
	): Promise<boolean> {
		const state = this.registrationStates.get(userId)
		if (!state) return false

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (state.userType && !state.inn) {
			if (!/^\d{10}$|^\d{12}$/.test(text)) {
				await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.')
				return true
			}

			try {
				const isValid = await this.checkInn(text)
				if (!isValid) {
					await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
					return true
				}

				state.inn = text
				state.currentStep = 'email'
				this.registrationStates.set(userId, state)

				// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
				await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
				return true
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù:', error)
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				)
				return true
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ email
		if (state.currentStep === 'email' && !state.email) {
			if (!(await this.validateEmail(text))) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return true
			}
			state.email = text
			state.currentStep = 'password'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
			return true
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
		if (state.currentStep === 'password' && !state.password) {
			if (text.length < 6) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
				return true
			}
			state.password = text
			state.currentStep = 'confirmPassword'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
			return true
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
		if (state.currentStep === 'confirmPassword') {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:')
				state.password = null
				state.currentStep = 'password'
				this.registrationStates.set(userId, state)
				return
			}

			state.currentStep = 'name'
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
			return true
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
		if (state.currentStep === 'name' && !state.name) {
			state.name = text
			state.currentStep = 'phone'
			this.registrationStates.set(userId, state)
			await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
			return true
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		if (state.currentStep === 'phone' && !state.phone) {
			if (!this.validatePhone(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
				)
				return true
			}
			state.phone = text
			state.currentStep = 'address'
			this.registrationStates.set(userId, state)
			await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
			return true
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
		if (state.currentStep === 'address' && !state.address) {
			state.address = text

			try {
				// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
				await this.prisma.registrationRequest.create({
					data: {
						email: state.email,
						name: state.name,
						phone: state.phone,
						address: state.address,
						inn: state.inn,
						role: state.role as Role,
						userType: state.userType,
						ogrn: null, // –î–æ–±–∞–≤–ª—è–µ–º null –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
						mercuryNumber: null, // –î–æ–±–∞–≤–ª—è–µ–º null –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
					},
				})

				await ctx.reply(
					'‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
				)
				this.registrationStates.delete(userId)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
			}
			return true
		}

		return false
	}

	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/ // –ü—Ä–∏–º–µ—Ä: +79991234567
		return phoneRegex.test(phone)
	}

	private async checkInn(inn: string): Promise<boolean> {
		const apiKey = this.configService.get('DATANEWTON_API_KEY')
		const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&inn=${inn}`

		const response = await fetch(url)
		const data = await response.json()

		if (data.code === 1) {
			console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
			return false
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏
		if (data && data.company && data.company.company_names) {
			if (data.company.status && data.company.status.active_status) {
				return true // –ò–ù–ù –≤–∞–ª–∏–¥–µ–Ω
			} else {
				console.error('–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞:', data.company.status)
				return false // –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
			}
		} else {
			console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
			return false
		}
	}

	private async checkOgrn(ogrn: string): Promise<boolean> {
		const apiKey = this.configService.get('DATANEWTON_API_KEY')
		const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&ogrn=${ogrn}`

		const response = await fetch(url)
		const data = await response.json()
		if (data.code === 1) {
			console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
			return false
		}

		if (data && data.company && data.company.company_names) {
			return data.company.status && data.company.status.active_status
		} else {
			console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
			return false
		}
	}

	async isUserLoggedIn(userId: number): Promise<boolean> {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		return !!user // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
	}

	async getActiveUser(userId: number) {
		return this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
	}

	async handleLogin(ctx: Context) {
		const userId = ctx.from.id
		const loginState = this.loginStates.get(userId)

		if (!loginState) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
			)
			return
		}

		const message = ctx.message as Message.TextMessage

		if (!loginState.email) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º email
			loginState.email = message.text
			this.loginStates.set(userId, loginState)
			await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
			return
		}

		if (!loginState.password) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
			loginState.password = message.text

			const loginResult = await this.login({
				email: loginState.email,
				password: loginState.password,
			})

			if (loginResult.success) {
				await this.telegramClient.handleMenu(ctx)
				this.deleteLoginState(userId)
			} else {
				await ctx.reply(`‚ùå ${loginResult.message}`)
				this.deleteLoginState(userId)
			}
			return
		}
	}

	async handleLogout(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.getActiveUser(userId)
		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		await this.prisma.user.update({
			where: { id: user.id },
			data: { telegramId: null },
		})

		await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
	}

	async handleRegister(ctx: Context) {
		const userId = ctx.from.id
		this.registrationStates.set(userId, {})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
	}

	async validateEmail(email: string): Promise<boolean> {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	async handleRegisterWithEmail(ctx: Context, email: string, role: Role) {
		const hashedPassword = await bcrypt.hash('defaultPassword', 10)
		const user = await this.prisma.user.create({
			data: {
				email,
				password: hashedPassword,
				role,
				name: email.split('@')[0],
			},
		})

		const token = this.jwtService.sign({ id: user.id })
		await ctx.reply(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
	}

	async startRegistration(userId: number) {
		this.registrationStates.set(userId, {
			inputType: null,
			userType: null,
			inn: null,
			ogrn: null,
		})
	}

	public async getRegistrationState(userId: number) {
		return this.registrationStates.get(userId)
	}

	async handleRoleSelection(ctx: Context, role: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId) || {}
		state.role = role
		this.registrationStates.set(userId, state)
	}

	async handleUserTypeSelection(ctx: Context, userType: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId) || {}
		state.userType = userType
		this.registrationStates.set(userId, state)

		if (userType === 'individual') {
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
		} else {
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –ò–ù–ù', callback_data: 'input_inn' },
							{ text: 'üìã –û–ì–†–ù', callback_data: 'input_ogrn' },
						],
					],
				},
			})
		}
	}

	async handleTextInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const loginState = this.loginStates.get(userId)

		if (loginState) {
			await this.handleLogin(ctx)
			return
		}

		const state = this.registrationStates.get(userId)

		if (!state) {
			return
		}

		// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ò–ù–ù/–û–ì–†–ù
		if (state.userType && !state.inn && !state.ogrn) {
			if (state.inputType === 'inn') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù
				const innPattern =
					state.userType === 'individual' ? /^\d{12}$/ : /^\d{10}$/
				if (!innPattern.test(text)) {
					await ctx.reply(
						state.userType === 'individual'
							? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü —Ç—Ä–µ–±—É–µ—Ç—Å—è 12 —Ü–∏—Ñ—Ä.'
							: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è 10 —Ü–∏—Ñ—Ä.',
					)
					return
				}

				try {
					const isValidInn = await this.checkInn(text)
					if (!isValidInn) {
						await ctx.reply(
							'‚ùå –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
						)
						return
					}

					state.inn = text
					state.currentStep = 'email'
					this.registrationStates.set(userId, state)
					console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –ò–ù–ù: ${text}`)

					await ctx.reply('‚úÖ –ò–ù–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
					await ctx.reply(
						'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
					)
					return
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù:', error)
					await ctx.reply(
						'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
			} else if (state.inputType === 'ogrn') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –û–ì–†–ù (13 —Ü–∏—Ñ—Ä)
				if (!/^\d{13}$/.test(text)) {
					await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –û–ì–†–ù. –¢—Ä–µ–±—É–µ—Ç—Å—è 13 —Ü–∏—Ñ—Ä.')
					return
				}

				try {
					const isValidOgrn = await this.checkOgrn(text)
					if (!isValidOgrn) {
						await ctx.reply(
							'‚ùå –û–ì–†–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
						)
						return
					}

					state.ogrn = text
					state.currentStep = 'email'
					this.registrationStates.set(userId, state)
					console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –û–ì–†–ù: ${text}`)

					await ctx.reply('‚úÖ –û–ì–†–ù –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
					await ctx.reply(
						'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
					)
					return
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù:', error)
					await ctx.reply(
						'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
					)
					return
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ email
		if (state.currentStep === 'email' && !state.email) {
			if (!(await this.validateEmail(text))) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return
			}
			state.email = text
			state.currentStep = 'password'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
		if (state.currentStep === 'password' && !state.password) {
			if (text.length < 6) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
				return
			}
			state.password = text
			state.currentStep = 'confirmPassword'
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
		if (state.currentStep === 'confirmPassword') {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:')
				state.password = null
				state.currentStep = 'password'
				this.registrationStates.set(userId, state)
				return
			}

			state.currentStep = 'name'
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
		if (state.currentStep === 'name' && !state.name) {
			state.name = text
			state.currentStep = 'phone'
			this.registrationStates.set(userId, state)
			await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		if (state.currentStep === 'phone' && !state.phone) {
			if (!this.validatePhone(text)) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX',
				)
				return
			}
			state.phone = text
			state.currentStep = 'mercury'
			this.registrationStates.set(userId, state)
			await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à RU-–Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π":')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π"
		if (state.currentStep === 'mercury' && !state.mercuryNumber) {
			state.mercuryNumber = text
			state.currentStep = 'location'
			this.registrationStates.set(userId, state)
			await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ñ–µ—Ä–º—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–∫–æ—Ç–∞:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ñ–µ—Ä–º—ã
		if (state.currentStep === 'location' && !state.location) {
			state.location = text
			state.currentStep = 'complete'
			this.registrationStates.set(userId, state)

			// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			try {
				await this.completeRegistration(ctx, state)
				this.registrationStates.delete(userId) // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
				await ctx.reply(
					'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				)
			}
			return
		}
	}

	private async completeRegistration(ctx: Context, state: any) {
		try {
			const user = await this.prisma.user.create({
				data: {
					email: state.email,
					password: await bcrypt.hash(state.password, 10),
					phone: state.phone,
					mercuryNumber: state.mercuryNumber,
					address: state.location,
					inn: state.inn,
					ogrn: state.ogrn,
					role: state.role,
					name: state.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
					telegramId: ctx.from.id.toString(),
				},
			})

			await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
			await ctx.reply(
				'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			)
		}
	}

	public getLoginState(userId: number) {
		return this.loginStates.get(userId)
	}

	public setLoginState(
		userId: number,
		state: { email?: string; password?: string },
	) {
		this.loginStates.set(userId, state)
	}

	public deleteLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	async login(loginDto: { email: string; password: string }) {
		console.log('Login attempt:', loginDto)

		if (!loginDto.email || !loginDto.password) {
			return { success: false, message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
		}

		const user = await this.prisma.user.findUnique({
			where: { email: loginDto.email },
		})

		if (!user) {
			return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
		}

		const isPasswordValid = await bcrypt.compare(
			loginDto.password,
			user.password,
		)
		if (!isPasswordValid) {
			return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }
		}

		if (!user.isVerified) {
			return { success: false, message: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' }
		}

		return { success: true, user }
	}
}
