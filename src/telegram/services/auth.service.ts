import { Injectable, NotFoundException } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { JwtService } from '@nestjs/jwt'
import { BuyerType, Equipment, Role, VehicleType } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Action, Ctx } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { TelegramClient } from '../telegram.client'

interface RegistrationState {
	role: string | null
	userType: string | null
	entityType: string | null
	inputType: string | null
	email: string | null
	name: string | null
	phone: string | null
	address: string | null
	inn: string | null
	ogrn: string | null
	mercuryNumber: string | null
	password: string | null
	buyerType: string | null
	vehicleType?: VehicleType
	vehicleBrand?: string
	vehicleModel?: string
	vehicleYear?: number
	vehicleCapacity?: number
	vehicleLicensePlate?: string
	vehicleVin?: string
	companyType?: string
	confirmPassword?: string
	hasCattleExp?: boolean
	cattleExpYears?: number
	equipment?: Equipment[]
	workingRegions?: string[]
	sanitaryPassport?: boolean
	sanitaryExpDate?: Date
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
	step?: string
	role?: 'BUYER' | 'SUPPLIER' | 'CARRIER'
	inputType?: string
	email?: string
	password?: string
	name?: string
	phone?: string
	address?: string
	buyerType?: string
}

interface LoginState {
	email: string | null
	password: string | null
	step: 'email' | 'password'
}

@Injectable()
export class TelegramAuthService {
	private registrationStates: Map<number, RegistrationState> = new Map()
	private loginStates: Map<number, LoginState> = new Map()
	private authStates = new Map<number, AuthState>()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
		private telegramClient: TelegramClient,
		private configService: ConfigService,
	) {}

	async handleTextInput(ctx: Context, text: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		switch (state.inputType) {
			case 'inn':
				try {
					const isValid = await this.checkInn(text)
					if (isValid) {
						state.inn = text
						state.inputType = 'email'
						await ctx.reply(
							'‚úÖ –ò–ù–ù –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
						)
					} else {
						await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞')
					}
				} catch (error) {
					await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù')
				}
				break

			case 'ogrn':
				try {
					const isValid = await this.checkOgrn(text)
					if (isValid) {
						state.ogrn = text
						state.inputType = 'email'
						await ctx.reply(
							'‚úÖ –û–ì–†–ù –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
						)
					} else {
						await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –û–ì–†–ù –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞')
					}
				} catch (error) {
					await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù')
				}
				break

			case 'email':
				if (await this.validateEmail(text)) {
					state.email = text
					state.inputType = 'password'
					await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
				} else {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
					)
				}
				break

			case 'password':
				if (text.length < 6) {
					await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
					return
				}
				state.password = text
				state.inputType = 'confirm_password'
				await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
				break

			case 'confirm_password':
				if (text !== state.password) {
					await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
					return
				}
				state.inputType = 'name'
				await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
				break

			case 'name':
				state.name = text
				state.inputType = 'phone'
				await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
				break

			case 'phone':
				if (this.validatePhone(text)) {
					state.phone = text
					state.inputType = 'address'
					await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:')
				} else {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
					)
				}
				break

			case 'address':
				state.address = text
				// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
				if (state.role === 'CARRIER') {
					state.inputType = 'vehicle_type'
					await ctx.reply('üöõ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:', {
						reply_markup: {
							inline_keyboard: [
								[
									{ text: 'üöõ –ì—Ä—É–∑–æ–≤–∏–∫', callback_data: 'vehicle_type_TRUCK' },
									{
										text: 'üöê –°–∫–æ—Ç–æ–≤–æ–∑',
										callback_data: 'vehicle_type_CATTLE_TRUCK',
									},
								],
							],
						},
					})
				} else {
					// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
					await this.completeRegistration(ctx, state)
				}
				break

			case 'vehicle_type':
				state.vehicleType = text as VehicleType
				state.inputType = 'vehicle_brand'
				await ctx.reply('üöõ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:')
				break

			case 'vehicle_brand':
				state.vehicleBrand = text
				state.inputType = 'vehicle_model'
				await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:')
				break

			case 'vehicle_model':
				state.vehicleModel = text
				state.inputType = 'vehicle_year'
				await ctx.reply('üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:')
				break

			case 'vehicle_year':
				const year = parseInt(text)
				if (isNaN(year) || year < 1970 || year > new Date().getFullYear()) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞')
					return
				}
				state.vehicleYear = year
				state.inputType = 'vehicle_capacity'
				await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –ö–†–°):')
				break

			case 'vehicle_capacity':
				const capacity = parseInt(text)
				if (isNaN(capacity) || capacity <= 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
					return
				}
				state.vehicleCapacity = capacity
				state.inputType = 'vehicle_license'
				await ctx.reply('üöó –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:')
				break

			case 'vehicle_license':
				state.vehicleLicensePlate = text
				state.inputType = 'vehicle_vin'
				await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):', {
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_vin' }],
						],
					},
				})
				break

			case 'vehicle_vin':
				if (text !== 'skip') {
					state.vehicleVin = text
				}
				state.inputType = 'cattle_exp'
				await ctx.reply('üöõ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ö–†–°?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úÖ –î–∞', callback_data: 'cattle_exp_yes' },
								{ text: '‚ùå –ù–µ—Ç', callback_data: 'cattle_exp_no' },
							],
						],
					},
				})
				break

			case 'cattle_exp_years':
				const years = parseInt(text)
				if (isNaN(years) || years < 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç')
					return
				}
				state.cattleExpYears = years
				state.inputType = 'equipment'
				await ctx.reply('üîß –í—ã–±–µ—Ä–∏—Ç–µ –∏–º–µ—é—â–µ–µ—Å—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üíß –ü–æ–∏–ª–∫–∏', callback_data: 'eq_water' },
								{ text: 'üí® –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è', callback_data: 'eq_vent' },
							],
							[
								{ text: 'üå°Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data: 'eq_temp' },
								{ text: 'üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', callback_data: 'eq_cctv' },
							],
							[
								{ text: 'üìç GPS-—Ç—Ä–µ–∫–µ—Ä', callback_data: 'eq_gps' },
								{ text: 'üõó –ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ä–∞–º–ø–∞', callback_data: 'eq_ramp' },
							],
							[{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'equipment_done' }],
						],
					},
				})
				break

			case 'working_regions':
				state.workingRegions = text.split(',').map(r => r.trim())
				state.inputType = 'sanitary'
				await ctx.reply('üìã –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úÖ –î–∞', callback_data: 'sanitary_yes' },
								{ text: '‚ùå –ù–µ—Ç', callback_data: 'sanitary_no' },
							],
						],
					},
				})
				break

			case 'sanitary':
				state.sanitaryPassport = text === 'sanitary_yes'
				state.sanitaryExpDate = text === 'sanitary_yes' ? new Date() : null
				state.inputType = 'sanitary_exp_date'
				await ctx.reply(
					'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):',
				)
				break

			case 'sanitary_exp_date':
				try {
					const [day, month, year] = text.split('.').map(Number)
					const date = new Date(year, month - 1, day)

					if (isNaN(date.getTime())) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
						return
					}

					state.sanitaryExpDate = date
					// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
					await this.completeRegistration(ctx, state)
				} catch (error) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
				}
				break

			case 'address':
				state.address = text
				await this.completeRegistration(ctx, state)
				break
		}

		this.registrationStates.set(userId, state)
	}

	private async handleEmailInput(ctx: Context, text: string, state: any) {
		if (!(await this.validateEmail(text))) {
			await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
			return
		}
		state.email = text
		state.inputType = 'password'
		await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
	}

	private async handleNameInput(ctx: Context, text: string, state: any) {
		state.name = text
		state.inputType = 'phone'
		await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
	}

	private async handlePhoneInput(ctx: Context, text: string, state: any) {
		if (!this.validatePhone(text)) {
			await ctx.reply(
				'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüìù –ü—Ä–∏–º–µ—Ä: +79991234567',
			)
			return
		}
		state.phone = text
		state.inputType = 'mercury'
		await ctx.reply(
			'üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à RU-–Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ "–ú–µ—Ä–∫—É—Ä–∏–π" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_mercury_reg' }],
						[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	private async handleMercuryInput(ctx: Context, text: string, state: any) {
		state.mercuryNumber = text
		state.inputType = 'address'
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
	}

	private async handleAddressInput(ctx: Context, text: string, state: any) {
		state.address = text
		await this.completeRegistration(ctx, state)
	}

	public async completeRegistration(ctx: Context, state: RegistrationState) {
		try {
			const hashedPassword = await bcrypt.hash(state.password, 10)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			const existingUser = await this.prisma.user.findUnique({
				where: { telegramId: ctx.from.id.toString() },
			})

			if (existingUser) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
				const user = await this.prisma.user.update({
					where: { telegramId: ctx.from.id.toString() },
					data: {
						email: state.email,
						password: hashedPassword,
						name: state.name,
						phone: state.phone,
						address: state.address,
						role: state.role as Role,
						buyerType: state.buyerType as BuyerType,
						inn: state.inn,
						ogrn: state.ogrn,
						mercuryNumber: state.mercuryNumber,
						// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫
						...(state.role === 'CARRIER' && {
							vehicles: {
								create: {
									type: state.vehicleType,
									brand: state.vehicleBrand,
									model: state.vehicleModel,
									year: state.vehicleYear,
									capacity: state.vehicleCapacity,
									licensePlate: state.vehicleLicensePlate,
									vin: state.vehicleVin || null,
									hasCattleExp: state.hasCattleExp || false,
									cattleExpYears: state.cattleExpYears || 0,
									equipment: state.equipment || [],
									workingRegions: state.workingRegions || [],
									sanitaryPassport: state.sanitaryPassport || false,
									sanitaryExpDate: state.sanitaryExpDate || null,
								},
							},
						}),
					},
				})
			} else {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
				const user = await this.prisma.user.create({
					data: {
						email: state.email,
						password: hashedPassword,
						name: state.name,
						phone: state.phone,
						address: state.address,
						role: state.role as Role,
						telegramId: ctx.from.id.toString(),
						buyerType: state.buyerType as BuyerType,
						inn: state.inn,
						ogrn: state.ogrn,
						mercuryNumber: state.mercuryNumber,
						...(state.role === 'CARRIER' && {
							vehicles: {
								create: {
									type: state.vehicleType,
									brand: state.vehicleBrand,
									model: state.vehicleModel,
									year: state.vehicleYear,
									capacity: state.vehicleCapacity,
									licensePlate: state.vehicleLicensePlate,
									vin: state.vehicleVin || null,
									hasCattleExp: state.hasCattleExp || false,
									cattleExpYears: state.cattleExpYears || 0,
									equipment: state.equipment || [],
									workingRegions: state.workingRegions || [],
									sanitaryPassport: state.sanitaryPassport || false,
									sanitaryExpDate: state.sanitaryExpDate || null,
								},
							},
						}),
					},
				})
			}

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			this.registrationStates.delete(ctx.from.id)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
			await this.showMainMenu(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
			await ctx.reply(
				'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			)
			throw error
		}
	}

	private validatePhone(phone: string): boolean {
		const phoneRegex = /^\+?[0-9]{10,15}$/
		return phoneRegex.test(phone)
	}

	private async checkInn(inn: string): Promise<boolean> {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù
			const innRegex = /^\d{10}$|^\d{12}$/
			if (!innRegex.test(inn)) {
				return false
			}

			const apiKey = this.configService.get('DATANEWTON_API_KEY')
			const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&inn=${inn}`

			const response = await fetch(url)
			const data = await response.json()

			if (data.code === 1) {
				console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
				return false
			}

			if (data && data.company && data.company.company_names) {
				return data.company.status && data.company.status.active_status
			} else {
				console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
				return false
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù —á–µ—Ä–µ–∑ API:', error)
			throw error
		}
	}

	private async checkOgrn(ogrn: string): Promise<boolean> {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –û–ì–†–ù
			const ogrnRegex = /^\d{13}$/
			if (!ogrnRegex.test(ogrn)) {
				return false
			}

			const apiKey = this.configService.get('DATANEWTON_API_KEY')
			const url = `https://api.datanewton.ru/v1/counterparty?key=${apiKey}&ogrn=${ogrn}`

			const response = await fetch(url)
			const data = await response.json()

			if (data.code === 1) {
				console.error('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.message)
				return false
			}

			if (data && data.company && data.company.company_names) {
				return data.company.status && data.company.status.active_status
			} else {
				console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', data)
				return false
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–ì–†–ù —á–µ—Ä–µ–∑ API:', error)
			throw error
		}
	}

	public getRegistrationState(userId: number) {
		const state = this.registrationStates.get(userId)
		console.log(
			`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${JSON.stringify(state)}`,
		)
		return state
	}

	public setRole(userId: number, role: string) {
		const state = this.getRegistrationState(userId)
		state.role = role
		this.registrationStates.set(userId, state)
	}

	async handleRegister(ctx: Context) {
		const userId = ctx.from.id
		this.registrationStates.set(userId, {
			role: null,
			userType: null,
			entityType: null,
			inputType: null,
			email: null,
			name: null,
			phone: null,
			address: null,
			inn: null,
			ogrn: null,
			mercuryNumber: null,
			password: null,
			buyerType: null,
		})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
	}

	async validateEmail(email: string): Promise<boolean> {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	async handleRegisterWithEmail(ctx: Context, email: string, role: Role) {
		const hashedPassword = await bcrypt.hash('defaultPassword', 10)
		const user = await this.prisma.user.create({
			data: {
				email,
				password: hashedPassword,
				role,
				name: email.split('@')[0],
			},
		})

		const token = this.jwtService.sign({ id: user.id })
		await ctx.reply(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
	}

	async startRegistration(userId: number) {
		const initialState: AuthState = {
			step: 'role',
			inputType: null,
			email: null,
			password: null,
			name: null,
			phone: null,
			address: null,
			role: null,
			buyerType: null,
		}
		this.authStates.set(userId, initialState)
		return initialState
	}

	public getLoginState(userId: number) {
		return this.loginStates.get(userId)
	}

	public setLoginState(userId: number, state: Partial<LoginState>) {
		const currentState = this.loginStates.get(userId) || {
			email: null,
			password: null,
			step: 'email',
		}

		this.loginStates.set(userId, {
			...currentState,
			...state,
		})
	}

	public deleteLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	async login(loginDto: { email: string; password: string }) {
		console.log('Login attempt:', loginDto)

		if (!loginDto.email || !loginDto.password) {
			return { success: false, message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
		}

		const user = await this.prisma.user.findUnique({
			where: { email: loginDto.email },
		})

		if (!user) {
			return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
		}

		const isPasswordValid = await bcrypt.compare(
			loginDto.password,
			user.password,
		)
		if (!isPasswordValid) {
			return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }
		}

		if (!user.isVerified) {
			return { success: false, message: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' }
		}

		return { success: true, user }
	}

	async handleLogout(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.getActiveUser(userId)
		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		await this.prisma.user.update({
			where: { id: user.id },
			data: { telegramId: null },
		})

		await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
		await ctx.reply(
			'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
		)
	}

	async getActiveUser(userId: number) {
		return this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
	}

	async handleRoleSelection(ctx: Context, role: string) {
		const userId = ctx.from.id
		const state: RegistrationState = {
			role: role,
			userType: null,
			entityType: null,
			inputType: null,
			email: null,
			name: null,
			phone: null,
			address: null,
			inn: null,
			ogrn: null,
			mercuryNumber: null,
			password: null,
			buyerType: null,
		}

		if (role === 'CARRIER') {
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ',
								callback_data: 'carrier_type_PRIVATE',
							},
							{
								text: 'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
								callback_data: 'carrier_type_ORGANIZATION',
							},
						],
					],
				},
			})
		} else if (role === 'BUYER') {
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
								callback_data: 'buyer_type_PRIVATE',
							},
							{
								text: 'üåæ –ö–§–•',
								callback_data: 'buyer_type_FARM',
							},
						],
						[
							{
								text: 'üè≠ –°/—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
								callback_data: 'buyer_type_AGRICULTURAL',
							},
							{
								text: 'ü•© –ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç',
								callback_data: 'buyer_type_MEAT_FACTORY',
							},
						],
						[
							{
								text: 'üêÆ –û—Ç–∫–æ—Ä–º–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
								callback_data: 'buyer_type_FEEDLOT',
							},
							{
								text: 'üìã –£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä–∞–Ω—Ç–∞',
								callback_data: 'buyer_type_GRANT_MEMBER',
							},
						],
					],
				},
			})
		} else if (role === 'SUPPLIER') {
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ',
								callback_data: 'supplier_type_INDIVIDUAL',
							},
							{
								text: 'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
								callback_data: 'supplier_type_ORGANIZATION',
							},
						],
					],
				},
			})
		}

		this.registrationStates.set(userId, state)
	}

	async handleUserTypeSelection(ctx: Context, type: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.userType = type

		// –¢–æ–ª—å–∫–æ —á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ –∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä–∞–Ω—Ç–∞ –∏–¥—É—Ç —Å—Ä–∞–∑—É –∫ email
		if (type === 'PRIVATE' || type === 'GRANT_MEMBER') {
			state.inputType = 'email'
			await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
		} else {
			// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–ö–§–•, –°/—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, –ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç, –û—Ç–∫–æ—Ä–º–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –ò–ù–ù', callback_data: 'input_inn' },
							{ text: 'üìã –û–ì–†–ù', callback_data: 'input_ogrn' },
						],
					],
				},
			})
		}

		this.registrationStates.set(userId, state)
	}

	async handleVehicleInput(
		ctx: Context,
		text: string,
		state: RegistrationState,
	) {
		switch (state.inputType) {
			case 'vehicle_type':
				state.vehicleType = text as VehicleType
				state.inputType = 'vehicle_brand'
				await ctx.reply('üöõ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:')
				break

			case 'vehicle_brand':
				state.vehicleBrand = text
				state.inputType = 'vehicle_model'
				await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:')
				break

			case 'vehicle_model':
				state.vehicleModel = text
				state.inputType = 'vehicle_year'
				await ctx.reply('üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:')
				break

			case 'vehicle_year':
				const year = parseInt(text)
				if (isNaN(year) || year < 1970 || year > new Date().getFullYear()) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞')
					return
				}
				state.vehicleYear = year
				state.inputType = 'vehicle_capacity'
				await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –ö–†–°):')
				break

			case 'vehicle_capacity':
				const capacity = parseInt(text)
				if (isNaN(capacity) || capacity <= 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
					return
				}
				state.vehicleCapacity = capacity
				state.inputType = 'vehicle_license'
				await ctx.reply('üöó –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:')
				break

			case 'vehicle_license':
				state.vehicleLicensePlate = text
				state.inputType = 'vehicle_vin'
				await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):', {
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_vin' }],
						],
					},
				})
				break

			case 'vehicle_vin':
				if (text !== 'skip') {
					state.vehicleVin = text
				}
				state.inputType = 'cattle_exp'
				await ctx.reply('üöõ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ö–†–°?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úÖ –î–∞', callback_data: 'cattle_exp_yes' },
								{ text: '‚ùå –ù–µ—Ç', callback_data: 'cattle_exp_no' },
							],
						],
					},
				})
				break

			case 'cattle_exp_years':
				const years = parseInt(text)
				if (isNaN(years) || years < 0) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç')
					return
				}
				state.cattleExpYears = years
				state.inputType = 'equipment'
				await ctx.reply('üîß –í—ã–±–µ—Ä–∏—Ç–µ –∏–º–µ—é—â–µ–µ—Å—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üíß –ü–æ–∏–ª–∫–∏', callback_data: 'eq_water' },
								{ text: 'üí® –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è', callback_data: 'eq_vent' },
							],
							[
								{ text: 'üå°Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data: 'eq_temp' },
								{ text: 'üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', callback_data: 'eq_cctv' },
							],
							[
								{ text: 'üìç GPS-—Ç—Ä–µ–∫–µ—Ä', callback_data: 'eq_gps' },
								{ text: 'üõó –ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ä–∞–º–ø–∞', callback_data: 'eq_ramp' },
							],
							[{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'equipment_done' }],
						],
					},
				})
				break

			case 'working_regions':
				state.workingRegions = text.split(',').map(r => r.trim())
				state.inputType = 'sanitary'
				await ctx.reply('üìã –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?', {
					reply_markup: {
						inline_keyboard: [
							[
								{ text: '‚úÖ –î–∞', callback_data: 'sanitary_yes' },
								{ text: '‚ùå –ù–µ—Ç', callback_data: 'sanitary_no' },
							],
						],
					},
				})
				break

			case 'sanitary':
				state.sanitaryPassport = text === 'sanitary_yes'
				state.sanitaryExpDate = text === 'sanitary_yes' ? new Date() : null
				state.inputType = 'sanitary_exp_date'
				await ctx.reply(
					'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):',
				)
				break

			case 'sanitary_exp_date':
				try {
					const [day, month, year] = text.split('.').map(Number)
					const date = new Date(year, month - 1, day)

					if (isNaN(date.getTime())) {
						await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
						return
					}

					state.sanitaryExpDate = date
					// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
					await this.completeRegistration(ctx, state)
				} catch (error) {
					await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
				}
				break

			case 'address':
				state.address = text
				await this.completeRegistration(ctx, state)
				break

			// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ case
		}
	}

	public setBuyerType(userId: number, buyerType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.buyerType = buyerType
			this.registrationStates.set(userId, state)
		}
	}

	public async isUserLoggedIn(userId: number): Promise<boolean> {
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
		return user !== null // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
	}

	public setEntityType(userId: number, entityType: string) {
		const state = this.getRegistrationState(userId)
		if (state) {
			state.entityType = entityType
			this.registrationStates.set(userId, state)
		}
	}

	async handleLoginInput(ctx: Context, text: string) {
		try {
			const userId = ctx.from.id
			const loginState = this.getLoginState(userId)

			if (!loginState) return

			if (loginState.step === 'email') {
				if (!this.validateEmail(text)) {
					await ctx.reply(
						'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
					)
					return
				}

				const user = await this.prisma.user.findUnique({
					where: { email: text },
				})

				if (!user) {
					await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω')
					this.clearLoginState(userId)
					return
				}

				this.setLoginState(userId, { email: text, step: 'password' })
				await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
				return
			}

			if (loginState.step === 'password') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
				const user = await this.prisma.user.findUnique({
					where: { email: loginState.email },
				})

				if (!user) {
					await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
					this.clearLoginState(userId)
					return
				}

				const isPasswordValid = await bcrypt.compare(text, user.password)

				if (!isPasswordValid) {
					await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
					this.clearLoginState(userId)
					return
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º telegramId, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
				const existingUser = await this.prisma.user.findUnique({
					where: { telegramId: userId.toString() },
				})

				if (existingUser && existingUser.id !== user.id) {
					// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
					await this.prisma.user.update({
						where: { id: existingUser.id },
						data: { telegramId: null },
					})
				}

				// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π telegramId
				await this.prisma.user.update({
					where: { id: user.id },
					data: { telegramId: userId.toString() },
				})

				await this.showMainMenu(ctx) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
				this.clearLoginState(userId)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
			this.clearLoginState(ctx.from.id)
		}
	}

	async initLoginState(userId: number) {
		console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
		this.loginStates.set(userId, {
			email: null,
			password: null,
			step: 'email', // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–≤–æ–¥–∞ email
		})
	}

	async notifyAdminsAboutRegistration(registrationRequest: any) {
		// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
	}

	async approveRegistration(registrationId: string) {
		const registration = await this.prisma.registrationRequest.findUnique({
			where: { id: registrationId },
		})

		if (!registration) {
			throw new NotFoundException('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
		}

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –∏–∑ –∑–∞—è–≤–∫–∏
		const user = await this.prisma.user.create({
			data: {
				email: registration.email,
				name: registration.name,
				phone: registration.phone,
				address: registration.address,
				password: registration.password, // –ü–∞—Ä–æ–ª—å —É–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
				role: registration.role,
				isVerified: true,
				inn: registration.inn,
				ogrn: registration.ogrn,
				mercuryNumber: registration.mercuryNumber,
			},
		})

		// –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
		await this.prisma.registrationRequest.update({
			where: { id: registrationId },
			data: { isProcessed: true },
		})

		return user
	}

	async setInputType(ctx: Context, inputType: string) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.inputType = inputType
		this.registrationStates.set(userId, state)

		if (inputType === 'inn') {
			await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
		} else if (inputType === 'ogrn') {
			await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù:')
		}
	}

	async handleSkipMercury(ctx: Context) {
		const userId = ctx.from.id
		const state = this.registrationStates.get(userId)

		if (!state) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä –ú–µ—Ä–∫—É—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		state.mercuryNumber = null
		state.inputType = 'address'
		this.registrationStates.set(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:')
	}

	getAuthState(userId: number): AuthState | undefined {
		return this.authStates.get(userId)
	}

	async handleAuthInput(ctx: Context, text: string) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞
		const loginState = this.loginStates.get(userId)
		if (loginState) {
			await this.handleLoginInput(ctx, text)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		const registerState = this.registrationStates.get(userId)
		if (registerState) {
			await this.handleTextInput(ctx, text)
			return
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		await this.handleTextInput(ctx, text)
	}

	async updateAuthState(userId: number, state: AuthState): Promise<void> {
		this.authStates.set(userId, state)
	}

	// –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	async updateRegistrationState(userId: number, state: RegistrationState) {
		this.registrationStates.set(userId, state)
	}

	private clearLoginState(userId: number) {
		this.loginStates.delete(userId)
	}

	private async showMainMenu(ctx: Context) {
		await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', {
			reply_markup: {
				inline_keyboard: [[{ text: 'üì± –ú–µ–Ω—é', callback_data: 'menu' }]],
			},
		})
	}

	@Action(/eq_.*/)
	async handleEquipmentSelection(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const callbackQuery = ctx.callbackQuery as any
			const equipment = callbackQuery.data.replace('eq_', '')
			const userId = ctx.from.id
			const state = await this.getRegistrationState(userId)

			if (state) {
				state.equipment = state.equipment || []

				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback –≤ enum
				const equipmentMap = {
					water: Equipment.WATER_SYSTEM,
					vent: Equipment.VENTILATION,
					temp: Equipment.TEMPERATURE_CONTROL,
					cctv: Equipment.CCTV,
					gps: Equipment.GPS_TRACKER,
					ramp: Equipment.LOADING_RAMP,
				}

				const equipmentEnum =
					equipmentMap[equipment as keyof typeof equipmentMap]
				if (!equipmentEnum) return

				const equipmentIndex = state.equipment.indexOf(equipmentEnum)
				if (equipmentIndex === -1) {
					state.equipment.push(equipmentEnum)
				} else {
					state.equipment.splice(equipmentIndex, 1)
				}

				await this.updateRegistrationState(userId, state)

				const keyboard = [
					[
						{
							text: `${state.equipment.includes(Equipment.WATER_SYSTEM) ? '‚úÖ' : 'üíß'} –ü–æ–∏–ª–∫–∏`,
							callback_data: 'eq_water',
						},
						{
							text: `${state.equipment.includes(Equipment.VENTILATION) ? '‚úÖ' : 'üí®'} –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è`,
							callback_data: 'eq_vent',
						},
					],
					[
						{
							text: `${state.equipment.includes(Equipment.TEMPERATURE_CONTROL) ? '‚úÖ' : 'üå°Ô∏è'} –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã`,
							callback_data: 'eq_temp',
						},
						{
							text: `${state.equipment.includes(Equipment.CCTV) ? '‚úÖ' : 'üìπ'} –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ`,
							callback_data: 'eq_cctv',
						},
					],
					[
						{
							text: `${state.equipment.includes(Equipment.GPS_TRACKER) ? '‚úÖ' : 'üìç'} GPS-—Ç—Ä–µ–∫–µ—Ä`,
							callback_data: 'eq_gps',
						},
						{
							text: `${state.equipment.includes(Equipment.LOADING_RAMP) ? '‚úÖ' : 'üõó'} –ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ä–∞–º–ø–∞`,
							callback_data: 'eq_ramp',
						},
					],
					[{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'equipment_done' }],
				]

				await ctx.editMessageReplyMarkup({ inline_keyboard: keyboard })
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}
}
