import { Injectable } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { Role } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { Context } from 'telegraf'
import { PrismaService } from '../../prisma.service'
import { RegistrationState } from './registration-state.interface'

@Injectable()
export class TelegramAuthService {
	private registrationStates: Map<number, RegistrationState> = new Map()
	private loginStates: Map<number, { email?: string; password?: string }> =
		new Map()

	constructor(
		private prisma: PrismaService,
		private jwtService: JwtService,
	) {}

	async handleRegistration(
		ctx: Context,
		userId: number,
		text: string,
	): Promise<boolean> {
		const state = this.registrationStates.get(userId) || {
			role: null,
			email: null,
			password: null,
			confirmPassword: null,
			name: null,
			phone: null,
			address: null,
			inn: null,
		}

		if (!state.role) {
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')
			return true
		}

		if (!state.email) {
			if (!(await this.validateEmail(text))) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return true
			}
			state.email = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):')
			return true
		}

		if (!state.password) {
			if (text.length < 6) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
				return true
			}
			state.password = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
			return true
		}

		if (!state.confirmPassword) {
			if (text !== state.password) {
				await ctx.reply('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
				return true
			}
			state.confirmPassword = text
			this.registrationStates.set(userId, state)

			if (state.role === 'BUYER') {
				await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ñ–µ—Ä–º—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–∫–æ—Ç–∞:')
			} else if (state.role === 'SUPPLIER') {
				await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:')
			} else if (state.role === 'CARRIER') {
				await ctx.reply('üöõ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:')
			}
			return true
		}

		if (state.role === 'BUYER' && !state.address) {
			state.address = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:')
			return true
		}

		if (state.role === 'SUPPLIER' && !state.inn) {
			state.inn = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:')
			return true
		}

		if (!state.name) {
			state.name = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
			return true
		}

		if (!state.phone) {
			state.phone = text
			this.registrationStates.set(userId, state)
			await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
			return true
		}

		if (!state.address) {
			state.address = text
			this.registrationStates.set(userId, state)

			try {
				const hashedPassword = await bcrypt.hash(state.password, 10)
				const user = await this.prisma.user.create({
					data: {
						email: state.email,
						password: hashedPassword,
						name: state.name,
						phone: state.phone,
						address: state.address,
						role: state.role as Role,
						telegramId: userId.toString(),
					},
				})

				const token = this.jwtService.sign({ id: user.id })
				this.registrationStates.delete(userId)
				await ctx.reply(
					`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\nüìß Email: ${state.email}\nüë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${state.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}\nüìç –ê–¥—Ä–µ—Å: ${state.address}\n\n–í–∞—à —Ç–æ–∫–µ–Ω: ${token}`,
				)
				return true
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
				return true
			}
		}

		console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', state)
		return false
	}

	async isUserLoggedIn(userId: number): Promise<boolean> {
		const user = await this.getActiveUser(userId)
		return !!user
	}

	async getActiveUser(userId: number) {
		return this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})
	}

	async handleLogin(ctx: Context) {
		const userId = ctx.from.id
		if (await this.isUserLoggedIn(userId)) {
			await ctx.reply('‚ùóÔ∏è –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
			return
		}
		this.loginStates.set(userId, {})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
	}

	async handleLoginState(
		ctx: Context,
		userId: number,
		text: string,
	): Promise<boolean> {
		const state = this.loginStates.get(userId)
		if (!state) return false

		if (!state.email) {
			if (!(await this.validateEmail(text))) {
				await ctx.reply(
					'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com',
				)
				return true
			}
			state.email = text
			this.loginStates.set(userId, state)
			await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
			return true
		}

		if (!state.password) {
			try {
				const user = await this.prisma.user.findUnique({
					where: { email: state.email },
				})
				if (!user) {
					await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
					this.loginStates.delete(userId)
					return true
				}

				const isValidPassword = await bcrypt.compare(text, user.password)
				if (!isValidPassword) {
					await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
					this.loginStates.delete(userId)
					return true
				}

				await this.prisma.user.update({
					where: { id: user.id },
					data: { telegramId: userId.toString() },
				})

				this.loginStates.delete(userId)
				const token = this.jwtService.sign({ id: user.id })
				await ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
				return true
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
				return true
			}
		}
		return false
	}

	async handleLogout(ctx: Context) {
		const userId = ctx.from.id
		const user = await this.getActiveUser(userId)
		if (!user) {
			await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
			return
		}

		await this.prisma.user.update({
			where: { id: user.id },
			data: { telegramId: null },
		})

		await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
	}

	async handleRegister(ctx: Context) {
		const userId = ctx.from.id
		this.registrationStates.set(userId, {})
		await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\nüìù –ü—Ä–∏–º–µ—Ä: example@mail.com')
	}

	async validateEmail(email: string): Promise<boolean> {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		return emailRegex.test(email)
	}

	async handleRegisterWithEmail(ctx: Context, email: string, role: Role) {
		const hashedPassword = await bcrypt.hash('defaultPassword', 10)
		const user = await this.prisma.user.create({
			data: {
				email,
				password: hashedPassword,
				role,
				name: email.split('@')[0],
			},
		})

		const token = this.jwtService.sign({ id: user.id })
		await ctx.reply(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`)
	}

	async startRegistration(userId: number, role: Role) {
		console.log(`–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å —Ä–æ–ª—å—é ${role}`)
		this.registrationStates.set(userId, { role } as RegistrationState)
	}

	getRegistrationState(userId: number) {
		return this.registrationStates.get(userId)
	}
}
