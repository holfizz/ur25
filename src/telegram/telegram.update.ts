import { Command, Ctx, On, Start, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { CallbackQuery, Message } from 'telegraf/typings/core/types/typegram'
import { TelegramAuthService } from './services/auth.service'
import { TelegramMessageService } from './services/message.service'
import { TelegramOfferService } from './services/offer.service'
import { TelegramProfileService } from './services/profile.service'
import { TelegramRequestService } from './services/request.service'
import { TelegramService } from './telegram.service'

@Update()
export class TelegramUpdate {
	constructor(
		private readonly telegramService: TelegramService,
		private readonly authService: TelegramAuthService,
		private readonly offerService: TelegramOfferService,
		private readonly requestService: TelegramRequestService,
		private readonly messageService: TelegramMessageService,
		private readonly profileService: TelegramProfileService,
	) {}

	@Start()
	async start(@Ctx() ctx: Context) {
		await ctx.reply(
			'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
						],
					],
				},
			},
		)
	}

	@Command('register')
	async handleRegisterCommand(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		await this.authService.startRegistration(userId)
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'role_BUYER' },
						{ text: 'üõ† –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'role_SUPPLIER' },
					],
					[{ text: 'üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'role_CARRIER' }],
				],
			},
		})
	}

	@On('text')
	async onText(@Ctx() ctx: Context) {
		const message = ctx.message as Message.TextMessage
		const userId = ctx.from.id

		const loginState = this.authService.getLoginState(userId)

		if (loginState) {
			const loginResult = await this.authService.login({
				email: loginState.email,
				password: message.text,
			})

			if (loginResult.success) {
				await this.telegramService.handleMenu(ctx) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
				this.authService.deleteLoginState(userId) // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞
			} else {
				await ctx.reply(`‚ùå ${loginResult.message}`)
			}
			return
		}

		await this.authService.handleTextInput(ctx, message.text)
	}

	@On('callback_query')
	async handleCallbackQuery(@Ctx() ctx: Context) {
		const query = ctx.callbackQuery as CallbackQuery.DataQuery
		await ctx.answerCbQuery()

		const userId = ctx.from.id

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
		if (query.data === 'login') {
			const isLoggedIn = await this.authService.isUserLoggedIn(userId)
			if (isLoggedIn) {
				await ctx.reply('‚ùå –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
				await this.telegramService.handleMenu(ctx)
				return
			}

			this.authService.setLoginState(userId, {})
			await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
		if (query.data === 'logout') {
			await this.authService.handleLogout(ctx)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
		switch (query.data) {
			case 'create_ad':
				await this.offerService.handleCreateOffer(ctx)
				break
			case 'my_ads':
				await this.offerService.showMyOffers(ctx)
				break
			case 'requests':
				await this.requestService.handleRequest(ctx)
				break
			case 'messages':
				await this.messageService.handleMessages(ctx, 1)
				break
			case 'profile':
				await this.profileService.showProfile(ctx)
				break
			case 'help':
				await ctx.reply('‚ÑπÔ∏è –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏.')
				break
			case 'menu':
				await this.telegramService.handleMenu(ctx)
				break
		}
	}
}
