import { CattlePurpose, CattleType } from '@prisma/client'
import { Action, Ctx, On, Start, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { CallbackQuery } from 'telegraf/typings/core/types/typegram'
import { PrismaService } from '../prisma.service'
import { TelegramAuthService } from './services/auth.service'
import { TelegramMessageService } from './services/message.service'
import { TelegramOfferService } from './services/offer.service'
import { TelegramProfileService } from './services/profile.service'
import { TelegramRequestService } from './services/request.service'
import { TelegramService } from './telegram.service'

@Update()
export class TelegramUpdate {
	constructor(
		private readonly telegramService: TelegramService,
		private readonly authService: TelegramAuthService,
		private readonly offerService: TelegramOfferService,
		private readonly requestService: TelegramRequestService,
		private readonly messageService: TelegramMessageService,
		private readonly profileService: TelegramProfileService,
		private readonly prisma: PrismaService,
	) {}

	@Start()
	async start(@Ctx() ctx: Context) {
		await ctx.reply(
			'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
						],
					],
				},
			},
		)
	}

	@Action('register')
	async handleRegisterCommand(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		await this.authService.startRegistration(userId)

		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'role_buyer' },
						{ text: 'üõ†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'role_supplier' },
					],
					[{ text: 'üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'role_carrier' }],
				],
			},
		})
	}
	@Action('skip_mercury')
	async handleSkipMercury(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ú–µ—Ä–∫—É—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
		await this.offerService.handleCreateOffer(ctx)
	}
	@Action(/role_.*/)
	async handleRoleSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const role = callbackQuery.data.split('_')[1]
		await this.authService.handleRoleSelection(ctx, role)
	}

	@Action(/user_type_.*/)
	async handleUserTypeSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const userType = callbackQuery.data.split('_')[2]
		await this.authService.handleUserTypeSelection(ctx, userType)
	}

	@Action(/input_.*/)
	async handleInputTypeSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const inputType = callbackQuery.data.split('_')[1]
		await this.authService.setInputType(ctx, inputType)
	}

	@Action('create_ad')
	async handleCreateOffer(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
			return
		}

		if (user.role !== 'SUPPLIER') {
			await ctx.reply(
				'‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏.\n\n' +
					'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
			)
			return
		}

		await this.offerService.startOfferCreation(ctx)
	}

	@Action('media_done')
	async handleMediaDone(@Ctx() ctx: Context) {
		await this.offerService.handlePhotosDone(ctx)
	}

	@On('text')
	async handleText(@Ctx() ctx: Context) {
		const userId = ctx.from.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞
		const loginState = this.authService.getLoginState(userId)
		if (loginState) {
			if (ctx.message && 'text' in ctx.message) {
				await this.authService.handleLoginInput(ctx, ctx.message.text)
			}
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		const offerState = await this.offerService.getOfferState(userId)
		if (offerState && ctx.message && 'text' in ctx.message) {
			await this.offerService.handleOfferInput(ctx, ctx.message.text)
			return
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if (ctx.message && 'text' in ctx.message) {
			await this.authService.handleTextInput(ctx, ctx.message.text)
		}
	}

	@On('callback_query')
	async handleCallbackQuery(@Ctx() ctx: Context) {
		const query = ctx.callbackQuery as CallbackQuery.DataQuery

		// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		console.log('–ü–æ–ª—É—á–µ–Ω callback_query:', query.data)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
		if (query.data === 'offers_list' || query.data === 'back_to_offers_list') {
			console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
			await this.handleOffersList(ctx)
			return
		}

		// –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
		if (query.data.startsWith('cattle_type_')) {
			await this.handleCattleTypeSelection(ctx)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ö–†–°
		if (query.data.startsWith('purpose_')) {
			await this.handlePurpose(ctx)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω—ã
		if (query.data === 'price_PER_HEAD') {
			await this.handlePricePerHead(ctx)
			return
		}
		if (query.data === 'price_PER_KG') {
			await this.handlePricePerKg(ctx)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ñ–ö–¢
		if (query.data === 'gut_yes') {
			await this.handleGutYes(ctx)
			return
		}
		if (query.data === 'gut_no') {
			await this.handleGutNo(ctx)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –°–æ—é–∑–∞
		if (query.data === 'customs_yes') {
			await this.handleCustomsYes(ctx)
			return
		}
		if (query.data === 'customs_no') {
			await this.handleCustomsNo(ctx)
			return
		}

		await ctx.answerCbQuery()

		const userId = ctx.from.id

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		if (query.data.startsWith('view_offer_')) {
			await this.offerService.handleViewOffer(ctx)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
		if (query.data.startsWith('request_contacts_')) {
			await this.offerService.handleContactRequest(ctx)
			return
		}

		if (query.data === 'create_offer') {
			await this.offerService.startOfferCreation(ctx)
			return
		}

		if (query.data === 'login') {
			const isLoggedIn = await this.authService.isUserLoggedIn(userId)
			if (isLoggedIn) {
				await ctx.reply('‚ùå –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
				await this.telegramService.handleMenu(ctx)
				return
			}

			this.authService.setLoginState(userId, {})
			await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
			return
		}

		if (query.data === 'logout') {
			await this.authService.handleLogout(ctx)
			return
		}

		switch (query.data) {
			case 'create_ad':
				await this.offerService.handleCreateOffer(ctx)
				break
			case 'my_ads':
				await this.offerService.showMyOffers(ctx)
				break
			case 'requests':
				await this.requestService.handleRequest(ctx)
				break
			case 'messages':
				await this.messageService.handleMessages(ctx, 1)
				break
			case 'profile':
				await this.profileService.showProfile(ctx)
				break
			case 'help':
				await ctx.reply('‚ÑπÔ∏è –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏.')
				break
			case 'menu':
				await this.telegramService.handleMenu(ctx)
				break
			case 'browse_offers':
				await this.offerService.handleBrowseOffers(ctx, 1)
				break
		}
	}

	@On('photo')
	async handlePhoto(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const offerState = this.offerService.getOfferState(userId)

		if (offerState) {
			await this.offerService.handlePhotoUpload(ctx)
			return
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		await ctx.reply(
			'–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_offer',
		)
	}

	@On('video')
	async handleVideo(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const offerState = this.offerService.getOfferState(userId)

		if (offerState) {
			await this.offerService.handleVideoUpload(ctx)
			return
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		await ctx.reply(
			'–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_offer',
		)
	}

	@Action('login')
	async handleLogin(@Ctx() ctx: Context) {
		await this.telegramService.handleLogin(ctx)
	}

	@Action('browse_offers')
	async handleBrowseOffers(@Ctx() ctx: Context) {
		await this.offerService.handleBrowseOffers(ctx, 1)
	}

	@Action(/browse_offers_(\d+)/)
	async handleBrowseOffersPage(@Ctx() ctx: Context) {
		//@ts-ignore
		const match = ctx.callbackQuery.data.match(/browse_offers_(\d+)/)
		if (match) {
			const page = parseInt(match[1])
			await this.offerService.handleBrowseOffers(ctx, page)
		}
	}

	@Action(/request_contacts_.*/)
	async handleContactRequest(@Ctx() ctx: Context) {
		await this.offerService.handleContactRequest(ctx)
	}

	@Action(/view_offer_.*/)
	async handleViewOffer(@Ctx() ctx: Context) {
		await this.offerService.handleViewOffer(ctx)
	}

	@Action('start')
	async handleStartButton(@Ctx() ctx: Context) {
		// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
		await ctx.answerCbQuery()

		await ctx.reply(
			'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
						],
					],
				},
			},
		)
	}

	@Action(/actual_yes_.*/)
	async handleActualityYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		//@ts-ignore
		const offerId = ctx.callbackQuery.data.replace('actual_yes_', '')

		await this.prisma.offer.update({
			where: { id: offerId },
			data: { lastActualityCheck: new Date() },
		})

		await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.')
	}

	@Action(/actual_no_.*/)
	async handleActualityNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		//@ts-ignore

		const offerId = ctx.callbackQuery.data.replace('actual_no_', '')

		await this.prisma.offer.update({
			where: { id: offerId },
			data: {
				status: 'PAUSED',
				lastActualityCheck: new Date(),
			},
		})

		await ctx.reply(
			'‚è∏ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n' +
				'–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è".',
		)
	}

	@Action(/cattle_type_.*/)
	async handleCattleTypeSelection(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)
			//@ts-ignore
			const cattleType = ctx.callbackQuery.data.split('_')[2] as CattleType

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –ö–†–° —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
			const validCattleTypes = [
				'CALVES',
				'BULL_CALVES',
				'HEIFERS',
				'BREEDING_HEIFERS',
				'BULLS',
				'COWS',
			]

			if (!validCattleTypes.includes(cattleType)) {
				await ctx.reply(
					'‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ö–†–°. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.',
				)
				return
			}

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.cattleType = cattleType
			state.inputType = 'breed'
			this.offerService.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–¥—É
			await ctx.reply('üêÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ö–†–°:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action(/purpose_.*/)
	async handlePurpose(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)
			//@ts-ignore
			const purpose = ctx.callbackQuery.data.split('_')[1] as CattlePurpose

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.purpose = purpose
			state.inputType = 'price_type'
			this.offerService.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã
			await ctx.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üêÆ –ó–∞ –≥–æ–ª–æ–≤—É', callback_data: 'price_PER_HEAD' },
							{ text: '‚öñÔ∏è –ó–∞ –∫–≥', callback_data: 'price_PER_KG' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('price_PER_HEAD')
	async handlePricePerHead(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.priceType = 'PER_HEAD'
			state.inputType = 'price_per_head'
			this.offerService.updateOfferState(userId, state)

			await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (‚ÇΩ):')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–Ω—ã –∑–∞ –≥–æ–ª–æ–≤—É:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('price_PER_KG')
	async handlePricePerKg(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.priceType = 'PER_KG'
			state.inputType = 'price_per_kg'
			this.offerService.updateOfferState(userId, state)

			await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ (‚ÇΩ):')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–Ω—ã –∑–∞ –∫–≥:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('gut_yes')
	async handleGutYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.inputType = 'gkt_discount'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–∞ –ñ–ö–¢ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):')
	}

	@Action('gut_no')
	async handleGutNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.gktDiscount = 0
		state.inputType = 'region'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
	}

	@Action('customs_yes')
	async handleCustomsYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.customsUnion = true
		state.inputType = 'full_address'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
	}

	@Action('customs_no')
	async handleCustomsNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.customsUnion = false
		state.inputType = 'full_address'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
	}

	@Action('offers_list')
	async handleOffersList(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			const offers = await this.prisma.offer.findMany({
				where: { status: 'ACTIVE' },
				orderBy: { createdAt: 'desc' },
				take: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			})

			if (offers.length === 0) {
				await ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			let message = 'üìã <b>–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>\n\n'

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const keyboard = []

			for (const offer of offers) {
				// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
				message += `üêÆ <b>${offer.title}</b>\n`
				message += `üí∞ ${
					offer.priceType === 'PER_HEAD'
						? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ/–≥–æ–ª–æ–≤—É`
						: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
				}\n`
				message += `üìç ${offer.region}\n\n`

				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
				keyboard.push([
					{
						text: `${offer.title} (${
							offer.priceType === 'PER_HEAD'
								? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ`
								: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
						})`,
						callback_data: `view_offer_${offer.id}`,
					},
				])
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
			keyboard.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: keyboard,
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	@Action('menu')
	async handleMenu(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≥–æ—Å—Ç—è
				await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'login' }],
							[{ text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', callback_data: 'offers_list' }],
						],
					},
				})
				return
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
			if (user.role === 'SUPPLIER') {
				// –ú–µ–Ω—é –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–ø–æ—Å—Ç–∞–≤—â–∏–∫'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
										callback_data: 'create_offer',
									},
								],
								[{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_offers' }],
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			} else if (user.role === 'BUYER') {
				// –ú–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[
									{
										text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
										callback_data: 'create_request',
									},
								],
								[{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			} else {
				// –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤',
										callback_data: 'requests_list',
									},
								],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é')
		}
	}

	@Action('back_to_offers_list')
	async handleBackToOffersList(@Ctx() ctx: Context) {
		// –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
		await this.handleOffersList(ctx)
	}
}
