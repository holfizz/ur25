import { CattlePurpose, CattleType } from '@prisma/client'
import { Action, Ctx, On, Start, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { CallbackQuery } from 'telegraf/typings/core/types/typegram'
import { PrismaService } from '../prisma.service'
import { TelegramAuthService } from './services/auth.service'
import { TelegramMessageService } from './services/message.service'
import { TelegramOfferService } from './services/offer.service'
import { TelegramProfileService } from './services/profile.service'
import { TelegramRequestService } from './services/request.service'
import { TelegramClient } from './telegram.client'
import { TelegramService } from './telegram.service'

@Update()
export class TelegramUpdate {
	constructor(
		private readonly telegramService: TelegramService,
		private readonly authService: TelegramAuthService,
		private readonly offerService: TelegramOfferService,
		private readonly requestService: TelegramRequestService,
		private readonly messageService: TelegramMessageService,
		private readonly profileService: TelegramProfileService,
		private readonly prisma: PrismaService,
		private readonly telegramClient: TelegramClient,
	) {}

	@Start()
	async start(@Ctx() ctx: Context) {
		await ctx.reply(
			'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
						],
					],
				},
			},
		)
	}

	@Action('register')
	async handleRegisterCommand(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		await this.authService.startRegistration(userId)

		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: 'role_buyer' },
						{ text: 'üõ†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'role_supplier' },
					],
					[{ text: 'üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', callback_data: 'role_carrier' }],
				],
			},
		})
	}
	@Action('skip_mercury')
	async handleSkipMercury(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ú–µ—Ä–∫—É—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
		await this.offerService.handleCreateOffer(ctx)
	}
	@Action(/role_.*/)
	async handleRoleSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const role = callbackQuery.data.split('_')[1]
		await this.authService.handleRoleSelection(ctx, role)
	}

	@Action(/user_type_.*/)
	async handleUserTypeSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const userType = callbackQuery.data.split('_')[2]
		await this.authService.handleUserTypeSelection(ctx, userType)
	}

	@Action(/input_.*/)
	async handleInputTypeSelection(@Ctx() ctx: Context) {
		const callbackQuery = ctx.callbackQuery
		//@ts-ignore
		const inputType = callbackQuery.data.split('_')[1]
		await this.authService.setInputType(ctx, inputType)
	}

	@Action('create_ad')
	async handleCreateOffer(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user) {
			await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
			return
		}

		if (user.role !== 'SUPPLIER') {
			await ctx.reply(
				'‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏.\n\n' +
					'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
			)
			return
		}

		await this.offerService.startOfferCreation(ctx)
	}

	@Action('media_done')
	async handleMediaDone(@Ctx() ctx: Context) {
		await this.offerService.handlePhotosDone(ctx)
	}

	@On('text')
	async handleText(@Ctx() ctx: Context) {
		try {
			const userId = ctx.from.id

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
			if (!('text' in ctx.message)) {
				return
			}

			const text = ctx.message.text
			console.log(
				`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${text}`,
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
				const authState = this.authService.getAuthState(userId)
				if (authState) {
					console.log(
						`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`,
						authState,
					)
					await this.authService.handleAuthInput(ctx, text)
					return
				}

				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const offerState = this.offerService.getOfferState(userId)
			if (offerState && offerState.inputType) {
				console.log(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`,
					offerState,
				)
				await this.offerService.handleOfferInput(ctx, text)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
			const requestState = this.requestService.getRequestState(userId)
			if (requestState && requestState.inputType) {
				console.log(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:`,
					requestState,
				)
				await this.requestService.handleRequestInput(ctx, text)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
			const messageState = this.messageService.getMessageState(userId)
			if (messageState) {
				console.log(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
					messageState,
				)
				await this.messageService.handleMessageInput(ctx, text)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
			const editState = this.profileService.getEditState(userId)
			if (editState) {
				console.log(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:`,
					editState,
				)
				await this.profileService.handleProfileInput(ctx, text)
				return
			}

			// –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
			console.log(
				`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é`,
			)
			await this.telegramService.handleMenu(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
		}
	}

	@On('callback_query')
	async handleCallbackQuery(@Ctx() ctx: Context) {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è callbackQuery
		const query = ctx.callbackQuery as any

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ data
		if (!query || !query.data) {
			console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_query:', query)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		console.log('–ü–æ–ª—É—á–µ–Ω callback_query:', query.data)

		try {
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É view_offer_*
			if (query.data.startsWith('view_offer_')) {
				const offerId = query.data.replace('view_offer_', '')
				console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ view_offer_ –≤ handleCallbackQuery: ${offerId}`)
				await this.offerService.handleViewOffer(ctx)
				return
			}

			// –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º switch
			switch (query.data) {
				case 'create_request':
					await this.handleCreateRequest(ctx)
					break
				case 'my_requests':
					await this.handleMyRequests(ctx)
					break
				case 'edit_profile':
					await this.handleEditProfile(ctx)
					break
				case 'edit_name':
					await this.handleEditName(ctx)
					break
				case 'edit_phone':
					await this.handleEditPhone(ctx)
					break
				case 'edit_address':
					await this.handleEditAddress(ctx)
					break
				case 'offers_list':
					await this.handleOffersList(ctx)
					break
				case 'back_to_offers_list':
					await this.handleBackToOffersList(ctx)
					break
				case 'create_ad':
					await this.offerService.handleCreateOffer(ctx)
					break
				case 'login':
					await this.telegramService.handleLogin(ctx)
					break
				case 'logout':
					await this.authService.handleLogout(ctx)
					break
				case 'messages':
					await this.messageService.handleMessages(ctx)
					break
				case 'profile':
					await this.profileService.showProfile(ctx)
					break
				case 'help':
					await this.handleHelp(ctx)
					break
				case 'menu':
					await this.telegramService.handleMenu(ctx)
					break
				case 'browse_offers':
					await this.offerService.handleBrowseOffers(ctx, 1)
					break
				case 'create_offer':
					await this.offerService.startOfferCreation(ctx)
					break
				case 'gut_yes':
					await this.handleGutYes(ctx)
					break
				case 'gut_no':
					await this.handleGutNo(ctx)
					break
				case 'customs_yes':
					await this.handleCustomsYes(ctx)
					break
				case 'customs_no':
					await this.handleCustomsNo(ctx)
					break
				case 'actual_yes_':
					await this.handleActualityYes(ctx)
					break
				case 'actual_no_':
					await this.handleActualityNo(ctx)
					break
				case 'cattle_type_':
					await this.handleCattleTypeSelection(ctx)
					break
				case 'purpose_':
					await this.handlePurpose(ctx)
					break
				case 'price_PER_HEAD':
					await this.handlePricePerHead(ctx)
					break
				case 'price_PER_KG':
					await this.handlePricePerKg(ctx)
					break
				case 'approve_contact_':
					await this.handleApproveContact(ctx)
					break
				case 'reject_contact_':
					await this.handleRejectContact(ctx)
					break
				case 'open_chat_':
					await this.handleOpenChat(ctx)
					break
				case 'send_message_':
					await this.handleSendMessage(ctx)
					break
				case 'propose_deal_':
					await this.handleProposeDeal(ctx)
					break
				case 'reject_deal_':
					await this.handleRejectDeal(ctx)
					break
				case 'approve_deal_':
					await this.handleApproveDeal(ctx)
					break
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	@On('photo')
	async handlePhoto(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const offerState = this.offerService.getOfferState(userId)

		if (offerState) {
			await this.offerService.handlePhotoUpload(ctx)
			return
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		await ctx.reply(
			'–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_offer',
		)
	}

	@On('video')
	async handleVideo(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const offerState = this.offerService.getOfferState(userId)

		if (offerState) {
			await this.offerService.handleVideoUpload(ctx)
			return
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		await ctx.reply(
			'–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_offer',
		)
	}

	@Action('login')
	async handleLogin(@Ctx() ctx: Context) {
		await this.telegramService.handleLogin(ctx)
	}

	@Action('browse_offers')
	async handleBrowseOffers(@Ctx() ctx: Context) {
		await this.offerService.handleBrowseOffers(ctx, 1)
	}

	@Action(/browse_offers_(\d+)/)
	async handleBrowseOffersPage(@Ctx() ctx: Context) {
		//@ts-ignore
		const match = ctx.callbackQuery.data.match(/browse_offers_(\d+)/)
		if (match) {
			const page = parseInt(match[1])
			await this.offerService.handleBrowseOffers(ctx, page)
		}
	}

	@Action(/request_contacts_.*/)
	async handleContactRequest(@Ctx() ctx: Context) {
		await this.offerService.handleContactRequest(ctx)
	}

	@Action('start')
	async handleStartButton(@Ctx() ctx: Context) {
		// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
		await ctx.answerCbQuery()

		await ctx.reply(
			'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ö–†–° (–∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞)! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			{
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' },
							{ text: 'üîë –í–æ–π—Ç–∏', callback_data: 'login' },
						],
					],
				},
			},
		)
	}

	@Action(/actual_yes_.*/)
	async handleActualityYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		//@ts-ignore
		const offerId = ctx.callbackQuery.data.replace('actual_yes_', '')

		await this.prisma.offer.update({
			where: { id: offerId },
			data: { lastActualityCheck: new Date() },
		})

		await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.')
	}

	@Action(/actual_no_.*/)
	async handleActualityNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		//@ts-ignore

		const offerId = ctx.callbackQuery.data.replace('actual_no_', '')

		await this.prisma.offer.update({
			where: { id: offerId },
			data: {
				status: 'PAUSED',
				lastActualityCheck: new Date(),
			},
		})

		await ctx.reply(
			'‚è∏ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n' +
				'–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è".',
		)
	}

	@Action(/cattle_type_.*/)
	async handleCattleTypeSelection(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)
			//@ts-ignore
			const cattleType = ctx.callbackQuery.data.split('_')[2] as CattleType

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –ö–†–° —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
			const validCattleTypes = [
				'CALVES',
				'BULL_CALVES',
				'HEIFERS',
				'BREEDING_HEIFERS',
				'BULLS',
				'COWS',
			]

			if (!validCattleTypes.includes(cattleType)) {
				await ctx.reply(
					'‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ö–†–°. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.',
				)
				return
			}

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.cattleType = cattleType
			state.inputType = 'breed'
			this.offerService.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–¥—É
			await ctx.reply('üêÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ö–†–°:')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ö–†–°:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action(/purpose_.*/)
	async handlePurpose(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)
			//@ts-ignore
			const purpose = ctx.callbackQuery.data.split('_')[1] as CattlePurpose

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.purpose = purpose
			state.inputType = 'price_type'
			this.offerService.updateOfferState(userId, state)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã
			await ctx.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üêÆ –ó–∞ –≥–æ–ª–æ–≤—É', callback_data: 'price_PER_HEAD' },
							{ text: '‚öñÔ∏è –ó–∞ –∫–≥', callback_data: 'price_PER_KG' },
						],
					],
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('price_PER_HEAD')
	async handlePricePerHead(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.priceType = 'PER_HEAD'
			state.inputType = 'price_per_head'
			this.offerService.updateOfferState(userId, state)

			await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥–æ–ª–æ–≤—É (‚ÇΩ):')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–Ω—ã –∑–∞ –≥–æ–ª–æ–≤—É:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('price_PER_KG')
	async handlePricePerKg(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()
			const userId = ctx.from.id
			const state = this.offerService.getOfferState(userId)

			if (!state) {
				await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
				return
			}

			state.priceType = 'PER_KG'
			state.inputType = 'price_per_kg'
			this.offerService.updateOfferState(userId, state)

			await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ (‚ÇΩ):')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–Ω—ã –∑–∞ –∫–≥:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
		}
	}

	@Action('gut_yes')
	async handleGutYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.inputType = 'gkt_discount'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–∞ –ñ–ö–¢ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):')
	}

	@Action('gut_no')
	async handleGutNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.gutDiscount = 0
		state.inputType = 'region'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:')
	}

	@Action('customs_yes')
	async handleCustomsYes(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.customsUnion = true
		state.inputType = 'full_address'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
	}

	@Action('customs_no')
	async handleCustomsNo(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		const userId = ctx.from.id
		const state = this.offerService.getOfferState(userId)

		if (!state) {
			await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
			return
		}

		state.customsUnion = false
		state.inputType = 'full_address'
		this.offerService.updateOfferState(userId, state)
		await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:')
	}

	@Action('offers_list')
	async handleOffersList(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			const offers = await this.prisma.offer.findMany({
				where: { status: 'ACTIVE' },
				orderBy: { createdAt: 'desc' },
				take: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			})

			if (offers.length === 0) {
				await ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			let message = 'üìã <b>–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>\n\n'

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			const keyboard = []

			for (const offer of offers) {
				// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
				message += `üêÆ <b>${offer.title}</b>\n`
				message += `üí∞ ${
					offer.priceType === 'PER_HEAD'
						? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ/–≥–æ–ª–æ–≤—É`
						: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
				}\n`
				message += `üìç ${offer.region}\n\n`

				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
				keyboard.push([
					{
						text: `${offer.title} (${
							offer.priceType === 'PER_HEAD'
								? `${offer.pricePerHead.toLocaleString('ru-RU')} ‚ÇΩ`
								: `${offer.pricePerKg.toLocaleString('ru-RU')} ‚ÇΩ/–∫–≥`
						})`,
						callback_data: `view_offer_${offer.id}`,
					},
				])
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
			keyboard.push([{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }])

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			await ctx.reply(message, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: keyboard,
				},
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
		}
	}

	@Action('menu')
	async handleMenu(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≥–æ—Å—Ç—è
				await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'login' }],
							[{ text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', callback_data: 'offers_list' }],
						],
					},
				})
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			const unreadCount = await this.messageService.getUnreadMessagesCount(
				user.id,
			)
			const messagesText =
				unreadCount > 0 ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏—è (${unreadCount})` : 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
			if (user.role === 'SUPPLIER') {
				// –ú–µ–Ω—é –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–ø–æ—Å—Ç–∞–≤—â–∏–∫'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
										callback_data: 'create_offer',
									},
								],
								[{ text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data: 'my_offers' }],
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[{ text: messagesText, callback_data: 'messages' }],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			} else if (user.role === 'BUYER') {
				// –ú–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[
									{
										text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
										callback_data: 'create_request',
									},
								],
								[{ text: 'üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'my_requests' }],
								[{ text: messagesText, callback_data: 'messages' }],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			} else {
				// –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
				await ctx.reply(
					`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
										callback_data: 'offers_list',
									},
								],
								[
									{
										text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤',
										callback_data: 'requests_list',
									},
								],
								[{ text: messagesText, callback_data: 'messages' }],
								[{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é')
		}
	}

	@Action('back_to_offers_list')
	async handleBackToOffersList(@Ctx() ctx: Context) {
		// –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
		await this.handleOffersList(ctx)
	}

	@Action(/approve_contact_.*/)
	async handleApproveContact(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const requestId = callbackQuery.data.replace('approve_contact_', '')

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
			const request = await this.prisma.contactRequest.update({
				where: { id: requestId },
				data: { status: 'APPROVED' },
				include: { offer: true, requester: true },
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			await ctx.reply(
				`‚úÖ –í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${request.offer.title}".\n\n` +
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${request.requester.name || request.requester.email} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.`,
				{
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			const requesterTelegramId = request.requester.telegramId
			if (requesterTelegramId) {
				const offer = await this.prisma.offer.findUnique({
					where: { id: request.offerId },
					include: { user: true },
				})

				await this.telegramClient.sendMessage(
					requesterTelegramId,
					`‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n` +
						`–í–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${offer.title}" –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n\n` +
						`üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n` +
						`üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ${offer.contactPerson || offer.user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
						`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${offer.contactPhone || offer.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
						`üìß Email: ${offer.user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
										callback_data: `send_message_${offer.userId}`,
									},
								],
								[
									{
										text: 'ü§ù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É',
										callback_data: `propose_deal_${offer.id}`,
									},
								],
								[
									{
										text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
										callback_data: `view_offer_${offer.id}`,
									},
								],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	@Action(/reject_contact_.*/)
	async handleRejectContact(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const requestId = callbackQuery.data.replace('reject_contact_', '')

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
			const request = await this.prisma.contactRequest.update({
				where: { id: requestId },
				data: { status: 'REJECTED' },
				include: { offer: true, requester: true },
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			await ctx.reply(
				`‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${request.offer.title}".`,
				{
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã
			const requesterTelegramId = request.requester.telegramId
			if (requesterTelegramId) {
				await this.telegramClient.sendMessage(
					requesterTelegramId,
					`‚ùå <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n` +
						`–í–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${request.offer.title}" –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
										callback_data: `view_offer_${request.offerId}`,
									},
								],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	@Action('messages')
	async handleMessages(@Ctx() ctx: Context) {
		await this.messageService.handleMessages(ctx)
	}

	@Action(/open_chat_.*/)
	async handleOpenChat(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const chatId = callbackQuery.data.replace('open_chat_', '')

			await this.messageService.openChat(ctx, chatId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞')
		}
	}

	@Action(/send_message_.*/)
	async handleSendMessage(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const recipientId = callbackQuery.data.replace('send_message_', '')

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
			const recipient = await this.prisma.user.findUnique({
				where: { id: recipientId },
			})

			if (!recipient) {
				await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
			let chat = await this.prisma.chat.findFirst({
				where: {
					OR: [
						{
							user1Id: user.id,
							user2Id: recipient.id,
						},
						{
							user1Id: recipient.id,
							user2Id: user.id,
						},
					],
				},
			})

			if (!chat) {
				chat = await this.prisma.chat.create({
					data: {
						user1Id: user.id,
						user2Id: recipient.id,
					},
				})
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
			this.messageService.setMessageState(userId, {
				chatId: chat.id,
				recipientId: recipient.id,
			})

			await ctx.reply(
				`üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n` +
					`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient.name || recipient.email}\n\n` +
					`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'menu' }]],
					},
				},
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
		}
	}

	@Action(/propose_deal_.*/)
	async handleProposeDeal(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const offerId = callbackQuery.data.replace('propose_deal_', '')

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			const offer = await this.prisma.offer.findUnique({
				where: { id: offerId },
				include: { user: true },
			})

			if (!offer) {
				await ctx.reply('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (offer.userId === user.id) {
				await ctx.reply(
					'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É –ø–æ —Å–≤–æ–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
				)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–¥–µ–ª–∫—É
			const existingDeal = await this.prisma.deal.findFirst({
				where: {
					offerId: offerId,
					buyerId: user.id,
				},
			})

			if (existingDeal) {
				// –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–µ —Å—Ç–∞—Ç—É—Å
				if (existingDeal.status === 'APPROVED') {
					// –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
					await ctx.reply(
						`‚úÖ <b>–°–¥–µ–ª–∫–∞ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n` +
							`–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${offer.title}\n` +
							`–°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–∞\n\n` +
							`–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
											callback_data: `send_message_${offer.userId}`,
										},
									],
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
											callback_data: `view_offer_${offerId}`,
										},
									],
								],
							},
						},
					)
					return
				} else if (existingDeal.status === 'PENDING') {
					// –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
					await ctx.reply(
						'‚è≥ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n\n' +
							'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
											callback_data: `view_offer_${offerId}`,
										},
									],
								],
							},
						},
					)
					return
				} else if (existingDeal.status === 'REJECTED') {
					// –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
					await ctx.reply(
						'‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.',
						{
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
											callback_data: `view_offer_${offerId}`,
										},
									],
								],
							},
						},
					)
					return
				}
			}

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
			const deal = await this.prisma.deal.create({
				data: {
					offer: { connect: { id: offerId } },
					buyer: { connect: { id: user.id } },
					seller: { connect: { id: offer.userId } },
					status: 'PENDING',
					price:
						offer.priceType === 'PER_HEAD'
							? offer.pricePerHead
							: offer.pricePerKg,
					quantity: offer.quantity,
				},
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			await ctx.reply(
				'‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n' +
					'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.',
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
									callback_data: `view_offer_${offerId}`,
								},
							],
						],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
			const sellerTelegramId = offer.user.telegramId
			if (sellerTelegramId) {
				await this.telegramClient.sendMessage(
					sellerTelegramId,
					`ü§ù <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ!</b>\n\n` +
						`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name || user.email} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É –ø–æ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${offer.title}".\n\n` +
						`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deal.quantity} –≥–æ–ª–æ–≤\n` +
						`–¶–µ–Ω–∞: ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ${offer.priceType === 'PER_HEAD' ? '/–≥–æ–ª–æ–≤—É' : '/–∫–≥'}\n\n` +
						`–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
										callback_data: `approve_deal_${deal.id}`,
									},
									{
										text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
										callback_data: `reject_deal_${deal.id}`,
									},
								],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏')
		}
	}

	@Action(/reject_deal_.*/)
	async handleRejectDeal(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const dealId = callbackQuery.data.replace('reject_deal_', '')

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
			const deal = await this.prisma.deal.update({
				where: { id: dealId },
				data: { status: 'REJECTED' },
				include: { offer: true, buyer: true },
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
			await ctx.reply(
				`‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${deal.offer.title}".`,
				{
					reply_markup: {
						inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
			const buyerTelegramId = deal.buyer.telegramId
			if (buyerTelegramId) {
				await this.telegramClient.sendMessage(
					buyerTelegramId,
					`‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
						`–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${deal.offer.title}".`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏')
		}
	}

	@Action(/approve_deal_.*/)
	async handleApproveDeal(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery
			const dealId = callbackQuery.data.replace('approve_deal_', '')

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
			const deal = await this.prisma.deal.update({
				where: { id: dealId },
				data: { status: 'APPROVED' },
				include: { offer: true, buyer: true },
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
			await ctx.reply(
				`‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${deal.offer.title}".\n\n` +
					`–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${deal.buyer.name || deal.buyer.email}\n` +
					`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deal.quantity} –≥–æ–ª–æ–≤\n` +
					`–¶–µ–Ω–∞: ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ${deal.offer.priceType === 'PER_HEAD' ? '/–≥–æ–ª–æ–≤—É' : '/–∫–≥'}\n\n` +
					`–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
									callback_data: `send_message_${deal.buyerId}`,
								},
							],
							[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
						],
					},
				},
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
			const buyerTelegramId = deal.buyer.telegramId
			if (buyerTelegramId) {
				await this.telegramClient.sendMessage(
					buyerTelegramId,
					`‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n` +
						`–ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${deal.offer.title}".\n\n` +
						`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deal.quantity} –≥–æ–ª–æ–≤\n` +
						`–¶–µ–Ω–∞: ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ${deal.offer.priceType === 'PER_HEAD' ? '/–≥–æ–ª–æ–≤—É' : '/–∫–≥'}\n\n` +
						`–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
										callback_data: `send_message_${deal.offer.userId}`,
									},
								],
								[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
							],
						},
					},
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏')
		}
	}

	@Action('my_requests')
	async handleMyRequests(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_requests')
			await (ctx as any).answerCbQuery()

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return
			}

			console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º handleMyRequests')
			await this.requestService.handleMyRequests(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤')
		}
	}

	@Action('edit_name')
	async handleEditName(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_name')
			await ctx.answerCbQuery()
			await this.profileService.handleEditField(ctx, 'name')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏')
		}
	}

	@Action('edit_phone')
	async handleEditPhone(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_phone')
			await ctx.answerCbQuery()
			await this.profileService.handleEditField(ctx, 'phone')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
		}
	}

	@Action('edit_address')
	async handleEditAddress(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_address')
			await ctx.answerCbQuery()
			await this.profileService.handleEditField(ctx, 'address')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞')
		}
	}

	@Action('help')
	async handleHelp(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()

		const helpText = `
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ö–†–°
‚Ä¢ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

<b>–î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:</b>
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ö–†–°
‚Ä¢ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏

<b>–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è - –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>
‚Ä¢ Email: support@cattle-market.ru
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
`

		await ctx.reply(helpText, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
			},
		})
	}

	@Action('create_request')
	async handleCreateRequest(@Ctx() ctx: Context) {
		try {
			await ctx.answerCbQuery()

			const userId = ctx.from.id
			const user = await this.prisma.user.findUnique({
				where: { telegramId: userId.toString() },
			})

			if (!user) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
				return
			}

			if (user.role !== 'BUYER') {
				await ctx.reply(
					'‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏.\n\n' +
						'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é.',
				)
				return
			}

			await this.requestService.startRequestCreation(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	@Action('edit_profile')
	async handleEditProfile(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_profile')
			await ctx.answerCbQuery()

			// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ handleEditProfile –∏–∑ profileService
			await this.profileService.handleEditProfile(ctx)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')
		}
	}

	@Action(/^view_request_(\d+)$/)
	async handleViewRequest(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ view_request')
			await ctx.answerCbQuery()

			// –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
			const callbackData = (ctx.callbackQuery as any).data
			const requestId = parseInt(callbackData.split('_')[2])

			if (isNaN(requestId)) {
				console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞:', callbackData)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞')
				return
			}

			console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å ID: ${requestId}`)

			// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
			await this.requestService.showRequestDetails(ctx, requestId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}

	@Action(/^view_match_(\d+)$/)
	async handleViewMatch(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ view_match')
			await ctx.answerCbQuery()

			// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ callback_data
			const callbackData = (ctx.callbackQuery as any).data
			const matchId = parseInt(callbackData.split('_')[2])

			if (isNaN(matchId)) {
				console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:', callbackData)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è')
				return
			}

			console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å ID: ${matchId}`)

			// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
			await this.requestService.showMatchDetails(ctx, matchId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è')
		}
	}

	@Action(/^close_request_(\d+)$/)
	async handleCloseRequest(@Ctx() ctx: Context) {
		try {
			console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ close_request')
			await ctx.answerCbQuery()

			// –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
			const callbackData = (ctx.callbackQuery as any).data
			const requestId = parseInt(callbackData.split('_')[2])

			if (isNaN(requestId)) {
				console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞:', callbackData)
				await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
				return
			}

			console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å ID: ${requestId}`)

			// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞
			await this.requestService.closeRequest(ctx, requestId)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
		}
	}
}
