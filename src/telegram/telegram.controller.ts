import { PrismaService } from '@/prisma.service'
import { Controller } from '@nestjs/common'
import { Action, Command, Ctx, On, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { TelegramService } from './telegram.service'

@Update()
@Controller()
export class TelegramController {
	constructor(
		private readonly telegramService: TelegramService,
		private readonly prisma: PrismaService,
	) {}

	@Command('start')
	async handleStart(@Ctx() ctx: Context) {
		await this.telegramService.handleStart(ctx)
	}

	@Command('menu')
	async handleMenu(@Ctx() ctx: Context) {
		await this.telegramService.handleMenu(ctx)
	}

	@Action('profile')
	async handleProfileAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			return
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
		await this.telegramService.showProfile(ctx)
	}

	@Action('create_ad')
	async handleCreateAd(@Ctx() ctx: Context) {
		await this.telegramService.handleCreateAd(ctx)
	}

	@Action('menu')
	async handleMenuAction(@Ctx() ctx: Context) {
		await this.telegramService.handleMenu(ctx)
	}

	@Action('enable_notifications')
	async handleEnableNotifications(@Ctx() ctx: Context) {
		await this.telegramService.toggleNotifications(ctx, true)
	}

	@Action('disable_notifications')
	async handleDisableNotifications(@Ctx() ctx: Context) {
		await this.telegramService.toggleNotifications(ctx, false)
	}

	@Action(/^edit_(.+)/)
	async handleEdit(@Ctx() ctx: Context) {
		if (!ctx.callbackQuery) return
		const field = ctx.callbackQuery['data'].split('_')[1]
		await this.telegramService.handleEdit(ctx, field)
	}

	@Command('help')
	async handleHelp(@Ctx() ctx: Context) {
		await ctx.reply(
			'üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
				'/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n' +
				'/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n' +
				'/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n' +
				'–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
		)
	}

	@Command('logout')
	async handleLogout(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		await this.telegramService.handleLogout(ctx, userId)
	}

	@On('text')
	async handleMessage(@Ctx() ctx: Context) {
		if (!ctx.message || !('text' in ctx.message)) return

		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		const message = ctx.message as { text: string }

		if (!user?.isVerified) {
			await this.telegramService.handleRegistrationFlow(ctx, message.text)
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—Ö–æ–¥–∞
		await this.telegramService.handleTextInput(ctx, message.text)
	}

	@Action('my_ads')
	async handleMyAdsAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			return
		}

		await ctx.reply(
			'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n' +
				'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n' +
				'–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ.',
			{
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_ad' }],
						[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }],
					],
				},
			},
		)
	}

	@Action('incoming_requests')
	async handleIncomingRequestsAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			return
		}

		await ctx.reply(
			'üì® –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏\n\n' +
				'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.\n' +
				'–û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.',
			{
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
				},
			},
		)
	}

	@Action('messages')
	async handleMessagesAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			return
		}

		await ctx.reply(
			'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è\n\n' +
				'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n' +
				'–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.',
			{
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
				},
			},
		)
	}

	@Action('help')
	async handleHelpAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		const user = await this.prisma.user.findUnique({
			where: { telegramId: userId.toString() },
		})

		if (!user || !user.isVerified) {
			await ctx.reply(
				'‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.',
			)
			return
		}

		await ctx.reply(
			'‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n' +
				'üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
				'‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
				'‚Ä¢ /menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
				'‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
				'‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: support@example.com',
			{
				reply_markup: {
					inline_keyboard: [[{ text: '¬´ –ú–µ–Ω—é', callback_data: 'menu' }]],
				},
			},
		)
	}

	@Action(/^role_(.+)/)
	async handleRoleSelection(@Ctx() ctx: Context) {
		await this.telegramService.handleRoleSelection(ctx)
	}

	@Action('register')
	async handleRegisterAction(@Ctx() ctx: Context) {
		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	}

	@Action('login')
	async handleLoginAction(@Ctx() ctx: Context) {
		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∞
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –≤—Ö–æ–¥–∞:')
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∞
	}

	@Action('cancel')
	async handleCancelAction(@Ctx() ctx: Context) {
		const userId = ctx.from.id
		// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		this.telegramService.clearEditState(userId)
		this.telegramService.clearRegistrationState(userId)

		await ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', {
			reply_markup: {
				inline_keyboard: [[{ text: 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]],
			},
		})
	}
}
