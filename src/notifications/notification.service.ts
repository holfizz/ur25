import { Injectable } from '@nestjs/common'
import { Cron, CronExpression } from '@nestjs/schedule'
import { MailService } from '../auth/mail.service'
import { ActualityCheckTemplate } from '../auth/templates/actuality-check.template'
import { PrismaService } from '../prisma.service'
import { TelegramClient } from '../telegram/telegram.client'

@Injectable()
export class NotificationService {
	constructor(
		private prisma: PrismaService,
		private telegramClient: TelegramClient,
		private mailService: MailService,
	) {}

	@Cron(CronExpression.EVERY_DAY_AT_10AM) // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
	async checkOffersActuality() {
		const tenDaysAgo = new Date()
		tenDaysAgo.setDate(tenDaysAgo.getDate() - 10)

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å –±–æ–ª–µ–µ 10 –¥–Ω–µ–π
		const offers = await this.prisma.offer.findMany({
			where: {
				status: 'ACTIVE',
				lastActualityCheck: {
					lt: tenDaysAgo,
				},
			},
			include: {
				user: true,
			},
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
		for (const offer of offers) {
			await this.sendActualityCheck(offer)
		}
	}

	private async sendActualityCheck(offer: any) {
		const message =
			`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n` +
			`üìã ${offer.title}\n` +
			`üî¢ ${offer.quantity} –≥–æ–ª–æ–≤\n` +
			`üí∞ ${offer.price} ‚ÇΩ/–≥–æ–ª\n\n` +
			`–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ?`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
		if (offer.user.telegramId) {
			await this.telegramClient.sendMessage(offer.user.telegramId, message, {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '‚úÖ –î–∞, –∞–∫—Ç—É–∞–ª—å–Ω–æ',
								callback_data: `actual_yes_${offer.id}`,
							},
							{
								text: '‚ùå –ù–µ—Ç, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
								callback_data: `actual_no_${offer.id}`,
							},
						],
					],
				},
			})
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω
		await this.mailService.sendMail({
			to: offer.user.email,
			subject: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
			html: ActualityCheckTemplate({
				title: offer.title,
				quantity: offer.quantity,
				price: offer.price,
			}),
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
		await this.prisma.offer.update({
			where: { id: offer.id },
			data: { lastActualityCheck: new Date() },
		})
	}
}
