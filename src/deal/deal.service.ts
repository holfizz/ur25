import { Injectable, NotFoundException } from '@nestjs/common'
import { PrismaService } from '../prisma.service'
import { TelegramClient } from '../telegram/telegram.client'
import { CreateDealDto } from './dto/create-deal.dto'
import { UpdateDealDto } from './dto/update-deal.dto'

@Injectable()
export class DealService {
	constructor(
		private prisma: PrismaService,
		private telegramClient: TelegramClient,
	) {}

	async create(createDealDto: CreateDealDto) {
		const deal = await this.prisma.deal.create({
			data: {
				offer: { connect: { id: createDealDto.offerId } },
				buyer: { connect: { id: createDealDto.buyerId } },
				seller: { connect: { id: createDealDto.sellerId } },
				status: 'PENDING',
				price: createDealDto.price,
				quantity: createDealDto.quantity,
			},
			include: {
				offer: true,
				buyer: true,
				seller: true,
			},
		})

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
		if (deal.seller.telegramId) {
			await this.telegramClient.sendMessage(
				deal.seller.telegramId,
				`ü§ù <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ!</b>\n\n` +
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${deal.buyer.name || deal.buyer.email} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É –ø–æ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${deal.offer.title}".\n\n` +
					`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deal.quantity} –≥–æ–ª–æ–≤\n` +
					`–¶–µ–Ω–∞: ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ${deal.offer.priceType === 'PER_HEAD' ? '/–≥–æ–ª–æ–≤—É' : '/–∫–≥'}\n\n` +
					`–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`,
				{
					parse_mode: 'HTML',
				},
			)
		}

		return deal
	}

	async findAll(params: {
		status?: string
		userId?: string
		offerId?: string
		page: number
		limit: number
	}) {
		const { status, userId, offerId, page, limit } = params
		const skip = (page - 1) * limit

		const where: any = {}

		if (status) {
			where.status = status
		}

		if (userId) {
			where.OR = [{ buyerId: userId }, { sellerId: userId }]
		}

		if (offerId) {
			where.offerId = offerId
		}

		const [deals, total] = await Promise.all([
			this.prisma.deal.findMany({
				where,
				include: {
					offer: true,
					buyer: {
						select: {
							id: true,
							name: true,
							email: true,
						},
					},
					seller: {
						select: {
							id: true,
							name: true,
							email: true,
						},
					},
				},
				skip,
				take: limit,
				orderBy: { createdAt: 'desc' },
			}),
			this.prisma.deal.count({ where }),
		])

		return {
			data: deals,
			meta: {
				total,
				page,
				limit,
				totalPages: Math.ceil(total / limit),
			},
		}
	}

	async findOne(id: string) {
		const deal = await this.prisma.deal.findUnique({
			where: { id },
			include: {
				offer: true,
				buyer: {
					select: {
						id: true,
						name: true,
						email: true,
						phone: true,
					},
				},
				seller: {
					select: {
						id: true,
						name: true,
						email: true,
						phone: true,
					},
				},
			},
		})

		if (!deal) {
			throw new NotFoundException(`–°–¥–µ–ª–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
		}

		return deal
	}

	async update(id: string, updateDealDto: UpdateDealDto) {
		const deal = await this.prisma.deal.findUnique({
			where: { id },
		})

		if (!deal) {
			throw new NotFoundException(`–°–¥–µ–ª–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
		}

		return this.prisma.deal.update({
			where: { id },
			data: updateDealDto,
			include: {
				offer: true,
				buyer: true,
				seller: true,
			},
		})
	}

	async updateStatus(id: string, status: 'APPROVED' | 'REJECTED') {
		const deal = await this.prisma.deal.findUnique({
			where: { id },
			include: {
				offer: true,
				buyer: true,
				seller: true,
			},
		})

		if (!deal) {
			throw new NotFoundException(`–°–¥–µ–ª–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
		}

		const updatedDeal = await this.prisma.deal.update({
			where: { id },
			data: { status },
			include: {
				offer: true,
				buyer: true,
				seller: true,
			},
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
		if (deal.buyer.telegramId) {
			if (status === 'APPROVED') {
				await this.telegramClient.sendMessage(
					deal.buyer.telegramId,
					`‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n` +
						`–ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${deal.offer.title}".\n\n` +
						`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deal.quantity} –≥–æ–ª–æ–≤\n` +
						`–¶–µ–Ω–∞: ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ${deal.offer.priceType === 'PER_HEAD' ? '/–≥–æ–ª–æ–≤—É' : '/–∫–≥'}\n\n` +
						`–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`,
					{
						parse_mode: 'HTML',
					},
				)
			} else {
				await this.telegramClient.sendMessage(
					deal.buyer.telegramId,
					`‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
						`–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é "${deal.offer.title}".`,
					{
						parse_mode: 'HTML',
					},
				)
			}
		}

		return updatedDeal
	}
}
