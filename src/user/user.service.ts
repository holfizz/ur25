import { MailService } from '@/auth/mail.service'
import {
	BadRequestException,
	Inject,
	Injectable,
	forwardRef,
} from '@nestjs/common'
import { Prisma, VerificationStatus } from '@prisma/client'
import * as bcrypt from 'bcrypt'
import { PrismaService } from '../prisma.service'
import { TelegramService } from '../telegram/telegram.service'
import { returnUserObject } from './return-user.object'
import { UserDto } from './user.dto'

@Injectable()
export class UserService {
	constructor(
		private prisma: PrismaService,
		private mailService: MailService,
		@Inject(forwardRef(() => TelegramService))
		private telegramService: TelegramService,
	) {}

	async byId(id: string, selectObject?: Prisma.UserSelect) {
		const user = await this.prisma.user.findUnique({
			where: { id },
			select: {
				...returnUserObject,
				...selectObject,
			},
		})
		if (!user) {
			throw new Error('User not found')
		}
		return user
	}

	async updateProfile(id: string, dto: UserDto) {
		const isSameUser = await this.prisma.user.findUnique({
			where: { email: dto.email },
		})

		if (isSameUser && id !== isSameUser.id) {
			throw new BadRequestException('Email –∑–∞–Ω—è—Ç')
		}

		const user = await this.prisma.user.update({
			where: { id },
			data: {
				email: dto.email,
				name: dto.name,
				phone: dto.phone,
				password: dto.password ? await bcrypt.hash(dto.password, 5) : undefined,
			},
			select: returnUserObject,
		})

		return user
	}

	async getPendingUsers() {
		return this.prisma.user.findMany({
			where: {
				verificationStatus: 'PENDING',
			},
			select: {
				id: true,
				email: true,
				name: true,
				role: true,
				createdAt: true,
				verificationStatus: true,
			},
		})
	}

	async verifyUser(id: string, status: 'APPROVED' | 'REJECTED') {
		const user = await this.prisma.user.update({
			where: { id },
			data: {
				isVerified: status === 'APPROVED',
				verificationStatus: status as VerificationStatus,
			},
			select: {
				id: true,
				email: true,
				name: true,
				telegramId: true,
				verificationStatus: true,
			},
		})

		if (status === 'APPROVED') {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
			if (user.email) {
				await this.mailService.sendVerificationEmail(user.email)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
			if (user.telegramId) {
				await this.telegramService.sendMessage(
					user.telegramId,
					'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
				)
			}
		} else {
			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
			if (user.email) {
				await this.mailService.sendMail({
					to: user.email,
					subject: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå',
					html: `
						<h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!</h2>
						<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</p>
						<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
						<p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
					`,
				})
			}

			if (user.telegramId) {
				await this.telegramService.sendMessage(
					user.telegramId,
					'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
				)
			}
		}

		return {
			message: `User verification ${status.toLowerCase()}`,
			user,
		}
	}
}
