generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SUPPLIER
  CARRIER
  ADMIN
}

enum BuyerType {
  PRIVATE // Частное лицо
  FARM // КФХ
  AGRICULTURAL // с/х предприятие
  MEAT_FACTORY // мясокомбинат
  FEEDLOT // откормочная площадка
  GRANT
}

enum Purpose {
  MEAT // Мясо
  BREEDING // Разведение
  DAIRY // Молочное производство
  FATTENING // Откорм
}

enum AgeGroup {
  CALF // Телята
  YOUNG // Молодняк
  ADULT // Взрослые
  HEIFER // Нетели
}

enum CattleType {
  CALVES // Телята
  BULL_CALVES // Бычки
  HEIFERS // Телки
  BREEDING_HEIFERS // Нетели
  BULLS // Быки
  COWS // Коровы
}

enum CattlePurpose {
  COMMERCIAL
  BREEDING
}

enum PriceType {
  PER_HEAD // За голову
  PER_KG // За кг
}

enum UserStatus {
  REGULAR
  PREMIUM
  SUPER_PREMIUM
}

enum OfferStatus {
  REGULAR
  PREMIUM
  SUPER_PREMIUM
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VehicleType {
  TRUCK
  CATTLE_TRUCK
}

enum Equipment {
  WATER_SYSTEM
  VENTILATION
  TEMPERATURE_CONTROL
  CCTV
  GPS_TRACKER
  LOADING_RAMP
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email      String  @unique
  password   String
  name       String
  phone      String?
  telegramId String? @unique

  address   String?
  buyerType BuyerType?

  role                 Role
  isAdmin              Boolean   @default(false) @map("is_admin")
  notificationsEnabled Boolean   @default(false) @map("notifications_enabled")
  requests             Request[]
  offers               Offer[]

  // Связи с сообщениями
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  messages         Message[]     @relation("UserMessages")
  chatMessages     ChatMessage[]

  isVerified         Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)

  // Добавляем новые поля
  inn           String? // ИНН
  ogrn          String? // ОГРН
  mercuryNumber String? // Номер в системе "Меркурий"

  // Связи с запросами на контакты
  buyerRequests  ContactRequest[] @relation("BuyerRequests")
  sellerRequests ContactRequest[] @relation("SellerRequests")

  chatsAsUser1  Chat[] @relation("ChatUser1")
  chatsAsUser2  Chat[] @relation("ChatUser2")
  dealsAsBuyer  Deal[] @relation("DealBuyer")
  dealsAsSeller Deal[] @relation("DealSeller")

  status         String    @default("REGULAR") // REGULAR, PREMIUM, SUPER_PREMIUM
  rating         Float     @default(0)
  lastAiAnalysis DateTime?

  lastLoginAt DateTime?

  vehicles    Vehicle[]
  companyType String? // ИП, ООО, etc.

  @@map("users")
}

model Request {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?
  quantity    Int
  weight      Int
  age         Int
  price       Int
  location    String
  region      String
  breed       String
  status      String    @default("ACTIVE")
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  matches     Match[]
  Message     Message[]

  // Добавляем новые поля для расширенной функциональности
  deadline   DateTime?
  isExport   Boolean   @default(false)
  isBreeding Boolean   @default(false)

  cattleType String?

  @@map("requests")
}

model Offer {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  title              String
  description        String
  quantity           Int
  weight             Float
  age                Int
  breed              String?
  region             String?
  location           String?
  price              Float?
  cattleType         CattleType
  priceType          PriceType
  pricePerKg         Float?
  pricePerHead       Float?
  purpose            CattlePurpose @default(COMMERCIAL)
  fullAddress        String?
  customsUnion       Boolean?      @default(false)
  status             String        @default("APPROVED")
  offerStatus        OfferStatus   @default(REGULAR)
  gktDiscount        Int           @default(0)
  quality            Float         @default(0)
  aiScore            Float         @default(0)
  views              Int           @default(0)
  lastAnalyzed       DateTime?
  lastActualityCheck DateTime      @default(now())

  // Дополнительные поля
  images        Image[]
  videoUrl      String?
  mercuryNumber String?
  contactPerson String?
  contactPhone  String?

  // Связи
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  matches         Match[]
  contactRequests ContactRequest[]
  deals           Deal[]

  @@map("offers")
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  url String
  key String // Ключ в S3

  // Связь с объявлением
  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id])

  @@map("images")
}

model Match {
  id        Int      @id @default(autoincrement())
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestId Int
  request   Request @relation(fields: [requestId], references: [id])

  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id])

  messages Message[]

  @@map("matches")
}

// Добавляем модель Message для совместимости
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи с пользователями
  fromId   String
  fromUser User    @relation("SentMessages", fields: [fromId], references: [id])
  toId     String?
  toUser   User?   @relation("ReceivedMessages", fields: [toId], references: [id])

  // Связи с запросами и совпадениями
  requestId Int?
  request   Request? @relation(fields: [requestId], references: [id])
  matchId   Int?
  match     Match?   @relation(fields: [matchId], references: [id])

  // Связь с пользователем (для обратной совместимости)
  userId String?
  user   User?   @relation("UserMessages", fields: [userId], references: [id])

  @@map("messages")
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  text      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_messages")
}

model RegistrationRequest {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String
  name          String
  phone         String
  address       String
  inn           String
  ogrn          String? // Опционально
  mercuryNumber String? // Опционально
  role          Role
  userType      String
  isProcessed   Boolean  @default(false)
  password      String // Добавляем поле для хранения хешированного пароля
}

model ContactRequest {
  id      String  @id @default(uuid())
  status  String // PENDING, APPROVED, REJECTED
  comment String? // Поле для комментария

  offer   Offer  @relation(fields: [offerId], references: [id])
  offerId String

  buyer   User   @relation("BuyerRequests", fields: [buyerId], references: [id])
  buyerId String

  seller   User   @relation("SellerRequests", fields: [sellerId], references: [id])
  sellerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String        @id @default(uuid())
  user1Id   String
  user1     User          @relation("ChatUser1", fields: [user1Id], references: [id])
  user2Id   String
  user2     User          @relation("ChatUser2", fields: [user2Id], references: [id])
  messages  ChatMessage[] // Изменено с Message[] на ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Deal {
  id        String   @id @default(uuid())
  offerId   String
  offer     Offer    @relation(fields: [offerId], references: [id])
  buyerId   String
  buyer     User     @relation("DealBuyer", fields: [buyerId], references: [id])
  sellerId  String
  seller    User     @relation("DealSeller", fields: [sellerId], references: [id])
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemSettings {
  key   String @id
  value String

  @@map("system_settings")
}

model Vehicle {
  id               String      @id @default(cuid())
  type             VehicleType
  brand            String
  model            String
  year             Int
  capacity         Int
  licensePlate     String
  vin              String?
  hasCattleExp     Boolean     @default(false)
  cattleExpYears   Int         @default(0)
  equipment        Equipment[] @default([])
  workingRegions   String[]    @default([])
  sanitaryPassport Boolean     @default(false)
  sanitaryExpDate  DateTime?
  user             User        @relation(fields: [userId], references: [id])
  userId           String
}
